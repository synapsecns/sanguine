{"solidity/AttestationCollector.sol:AddressUpgradeable":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dcda7d8b4a16a8be474b7b8e4f04f5cd165ebbe0d30b9517a07b917cb980edf964736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220dcda7d8b4a16a8be474b7b8e4f04f5cd165ebbe0d30b9517a07b917cb980edf964736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"112403:7122:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;112403:7122:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"112403:7122:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:AgentRegistry":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainDeactivated","type":"event"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"allAgents","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allDomains","outputs":[{"internalType":"uint32[]","name":"domains_","type":"uint32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"amountAgents","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"amountDomains","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"uint256","name":"_agentIndex","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_domainIndex","type":"uint256"}],"name":"getDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"address","name":"_account","type":"address"}],"name":"isActiveAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"isActiveAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"isActiveDomain","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"AgentRemoved(uint32,address)":{"notice":"Emitted when a new Agent is removed."},"DomainActivated(uint32)":{"notice":"Emitted when the first agent is added for the domain"},"DomainDeactivated(uint32)":{"notice":"Emitted when the last agent is removed from the domain"}},"kind":"user","methods":{"allAgents(uint32)":{"notice":"Returns all active Agents for a given domain in an array. Note: will return the list of active Guards, if `_domain == 0`."},"allDomains()":{"notice":"Returns all domains having at least one active Notary in an array."},"amountAgents(uint32)":{"notice":"Returns the amount of active agents for the given domain. Note: will return the amount of active Guards, if `_domain == 0`."},"amountDomains()":{"notice":"Returns the amount of active domains."},"getAgent(uint32,uint256)":{"notice":"Returns i-th agent for a given domain."},"getDomain(uint256)":{"notice":"Returns i-th domain from the list of active domains."},"isActiveAgent(address)":{"notice":"Returns true if the agent is active on any domain. Note: that includes both Guards and Notaries."},"isActiveAgent(uint32,address)":{"notice":"Returns true if the agent is active on the given domain. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary."},"isActiveDomain(uint32)":{"notice":"Returns true if there is at least one active notary for the domain Note: will return false for `_domain == 0`, even if there are active Guards."}},"version":1},"developerDoc":{"kind":"dev","methods":{"allAgents(uint32)":{"details":"This copies storage into memory, so can consume a lof of gas, if amount of agents is large (see EnumerableSet.values())"},"allDomains()":{"details":"This always excludes the zero domain, which is used for storing the guards."},"amountDomains()":{"details":"This always excludes the zero domain, which is used for storing the guards."},"getAgent(uint32,uint256)":{"details":"Will revert if index is out of range. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary."},"getDomain(uint256)":{"details":"Will revert if index is out of range. Note: this never returns the zero domain, which is used for storing the guards."}},"stateVariables":{"epoch":{"details":"Variable is private as the child contracts are not supposed to modify it. Use _currentEpoch() getter if needed."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainDeactivated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"allAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDomains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"domains_\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"amountAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountDomains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_agentIndex\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domainIndex\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"isActiveDomain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allAgents(uint32)\":{\"details\":\"This copies storage into memory, so can consume a lof of gas, if amount of agents is large (see EnumerableSet.values())\"},\"allDomains()\":{\"details\":\"This always excludes the zero domain, which is used for storing the guards.\"},\"amountDomains()\":{\"details\":\"This always excludes the zero domain, which is used for storing the guards.\"},\"getAgent(uint32,uint256)\":{\"details\":\"Will revert if index is out of range. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\"},\"getDomain(uint256)\":{\"details\":\"Will revert if index is out of range. Note: this never returns the zero domain, which is used for storing the guards.\"}},\"stateVariables\":{\"epoch\":{\"details\":\"Variable is private as the child contracts are not supposed to modify it. Use _currentEpoch() getter if needed.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AgentRemoved(uint32,address)\":{\"notice\":\"Emitted when a new Agent is removed.\"},\"DomainActivated(uint32)\":{\"notice\":\"Emitted when the first agent is added for the domain\"},\"DomainDeactivated(uint32)\":{\"notice\":\"Emitted when the last agent is removed from the domain\"}},\"kind\":\"user\",\"methods\":{\"allAgents(uint32)\":{\"notice\":\"Returns all active Agents for a given domain in an array. Note: will return the list of active Guards, if `_domain == 0`.\"},\"allDomains()\":{\"notice\":\"Returns all domains having at least one active Notary in an array.\"},\"amountAgents(uint32)\":{\"notice\":\"Returns the amount of active agents for the given domain. Note: will return the amount of active Guards, if `_domain == 0`.\"},\"amountDomains()\":{\"notice\":\"Returns the amount of active domains.\"},\"getAgent(uint32,uint256)\":{\"notice\":\"Returns i-th agent for a given domain.\"},\"getDomain(uint256)\":{\"notice\":\"Returns i-th domain from the list of active domains.\"},\"isActiveAgent(address)\":{\"notice\":\"Returns true if the agent is active on any domain. Note: that includes both Guards and Notaries.\"},\"isActiveAgent(uint32,address)\":{\"notice\":\"Returns true if the agent is active on the given domain. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\"},\"isActiveDomain(uint32)\":{\"notice\":\"Returns true if there is at least one active notary for the domain Note: will return false for `_domain == 0`, even if there are active Guards.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AgentRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{"allAgents(uint32)":"64ecb518","allDomains()":"6f225878","amountAgents(uint32)":"32254098","amountDomains()":"61b0b357","getAgent(uint32,uint256)":"1d82873b","getDomain(uint256)":"1a7a98e2","isActiveAgent(address)":"65e1e466","isActiveAgent(uint32,address)":"0958117d","isActiveDomain(uint32)":"4f5dbc0d"}},"solidity/AttestationCollector.sol:AgentRegistryEvents":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainDeactivated","type":"event"}],"userDoc":{"events":{"AgentRemoved(uint32,address)":{"notice":"Emitted when a new Agent is removed."},"DomainActivated(uint32)":{"notice":"Emitted when the first agent is added for the domain"},"DomainDeactivated(uint32)":{"notice":"Emitted when the last agent is removed from the domain"}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"AgentRemoved(uint32,address)":{"params":{"account":"Address of the removed agent","domain":"Domain where a Agent was removed"}},"DomainActivated(uint32)":{"params":{"domain":"Domain where the first Agent was added"}},"DomainDeactivated(uint32)":{"params":{"domain":"Domain where the last Agent was removed"}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainDeactivated\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"AgentRemoved(uint32,address)\":{\"params\":{\"account\":\"Address of the removed agent\",\"domain\":\"Domain where a Agent was removed\"}},\"DomainActivated(uint32)\":{\"params\":{\"domain\":\"Domain where the first Agent was added\"}},\"DomainDeactivated(uint32)\":{\"params\":{\"domain\":\"Domain where the last Agent was removed\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AgentRemoved(uint32,address)\":{\"notice\":\"Emitted when a new Agent is removed.\"},\"DomainActivated(uint32)\":{\"notice\":\"Emitted when the first agent is added for the domain\"},\"DomainDeactivated(uint32)\":{\"notice\":\"Emitted when the last agent is removed from the domain\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AgentRegistryEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:AgentSet":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5915f54419e8b9793ca2a2790538d0d361bb16d01454527245b232bedfc0c5b64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e5915f54419e8b9793ca2a2790538d0d361bb16d01454527245b232bedfc0c5b64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"75243:5647:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;75243:5647:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"75243:5647:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AgentSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:Attestation":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e339956fc98d51f14f6318420daa7af41590534600d50acdba32f24a9b712bbf64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220e339956fc98d51f14f6318420daa7af41590534600d50acdba32f24a9b712bbf64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"47148:14212:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;47148:14212:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"47148:14212:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_ORIGIN":{"details":"AttestationData memory layout [000 .. 004): origin         uint32   4 bytes [004 .. 008): destination    uint32   4 bytes [008 .. 012): nonce          uint32   4 bytes [012 .. 044): root           bytes32 32 bytes      Attestation memory layout [000 .. 044): attData        bytes   44 bytes (see above) [044 .. 045): G = guardSigs  uint8    1 byte [045 .. 046): N = notarySigs uint8    1 byte [046 .. 111): guardSig[0]    bytes   65 bytes      .. [AAA .. BBB): guardSig[G-1]  bytes   65 bytes [BBB .. CCC): notarySig[0]   bytes   65 bytes      .. [DDD .. END): notarySig[N-1] bytes   65 bytes"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_ORIGIN\":{\"details\":\"AttestationData memory layout [000 .. 004): origin         uint32   4 bytes [004 .. 008): destination    uint32   4 bytes [008 .. 012): nonce          uint32   4 bytes [012 .. 044): root           bytes32 32 bytes      Attestation memory layout [000 .. 044): attData        bytes   44 bytes (see above) [044 .. 045): G = guardSigs  uint8    1 byte [045 .. 046): N = notarySigs uint8    1 byte [046 .. 111): guardSig[0]    bytes   65 bytes      .. [AAA .. BBB): guardSig[G-1]  bytes   65 bytes [BBB .. CCC): notarySig[0]   bytes   65 bytes      .. [DDD .. END): notarySig[N-1] bytes   65 bytes\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"Attestation\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:AttestationCollector":{"code":"0x608060405234801561001057600080fd5b5061429c806100206000396000f3fe608060405234801561001057600080fd5b50600436106101ae5760003560e01c806365e1e466116100ee5780637f9d6d2e116100975780639a47423c116100715780639a47423c146103e7578063b623501614610441578063f2fde38b14610454578063f646a5121461046757600080fd5b80637f9d6d2e1461037a5780638129fc1c146103c15780638da5cb5b146103c957600080fd5b80636f225878116100c85780636f22587814610353578063715018a61461036857806371e2db771461037257600080fd5b806365e1e4661461031a5780636913a63c1461032d5780636ba4d1d41461034057600080fd5b80632dfbe02c1161015b5780634f5dbc0d116101355780634f5dbc0d146102cc57806361b0b357146102df578063646674ab146102e757806364ecb518146102fa57600080fd5b80632dfbe02c1461028557806332254098146102985780634b82bad7146102b957600080fd5b80631a7a98e21161018c5780631a7a98e2146102125780631d82873b1461023a5780632af678b01461027257600080fd5b8063038037a7146101b357806308f4c9a9146101dc5780630958117d146101ef575b600080fd5b6101c66101c1366004613c59565b61047a565b6040516101d39190613cd6565b60405180910390f35b6101c66101ea366004613cfd565b6104ec565b6102026101fd366004613d64565b610679565b60405190151581526020016101d3565b610225610220366004613c59565b610685565b60405163ffffffff90911681526020016101d3565b61024d610248366004613d97565b6106b4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d3565b610202610280366004613d64565b6106e5565b6101c6610293366004613dc1565b610759565b6102ab6102a6366004613e0c565b610863565b6040519081526020016101d3565b6102026102c7366004613d64565b610892565b6102026102da366004613e0c565b610906565b6102ab610911565b6101c66102f5366004613e27565b61093b565b61030d610308366004613e0c565b610a40565b6040516101d39190613eb2565b610202610328366004613ec5565b610a6f565b61020261033b366004613ec5565b610a7a565b61022561034e366004613e27565b610af4565b61035b610b16565b6040516101d39190613ee0565b610370610b3d565b005b6069546102ab565b6102ab610388366004613cfd565b63ffffffff16602091821b67ffffffff0000000016604093841b6bffffffff000000000000000016171760009081526068909152205490565b610370610bb0565b60365473ffffffffffffffffffffffffffffffffffffffff1661024d565b6102ab6103f5366004613e27565b63ffffffff91909116602092831b67ffffffff0000000016176000908152606a8352604080822073ffffffffffffffffffffffffffffffffffffffff9390931682529190925290205490565b61020261044f366004613ec5565b610c5f565b610370610462366004613ec5565b610cd4565b610202610475366004613f59565b610dcd565b60695460609082106104d35760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6104e66104e1836001614057565b610e00565b92915050565b6060600063ffffffff8316602085901b67ffffffff0000000016604087901b6bffffffff00000000000000001617176bffffffffffffffffffffffff8116600090815260686020908152604091829020825160608101845281548082526001909201546fffffffffffffffffffffffffffffffff808216948301949094527001000000000000000000000000000000009004909216928201929092529192506105d75760405162461bcd60e51b815260206004820152600d60248201527f556e6b6e6f776e206e6f6e63650000000000000000000000000000000000000060448201526064016104ca565b8051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08a811b8216602084015289811b8216602484015288901b166028820152602c8082019390935281518082039093018352604c01905261066c8183602001516fffffffffffffffffffffffffffffffff1684604001516fffffffffffffffffffffffffffffffff1661102c565b93505050505b9392505050565b60006106728383611044565b60006104e6826001600061069860005490565b815260200190815260200160002061107590919063ffffffff16565b60006106728383600260006106c860005490565b81526020019081526020016000206110819092919063ffffffff16565b60365460009073ffffffffffffffffffffffffffffffffffffffff16331461074f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b61067283836110d2565b63ffffffff8316602085811b67ffffffff0000000016919091176000818152606a8352604080822073ffffffffffffffffffffffffffffffffffffffff8716835290935291909120546060919083106107f45760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016104ca565b67ffffffffffffffff81166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845290915281208054859081106108405761084061406a565b9060005260206000200154905061085681610e00565b925050505b949350505050565b60006104e6826002600061087660005490565b81526020019081526020016000206111a990919063ffffffff16565b60365460009073ffffffffffffffffffffffffffffffffffffffff1633146108fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b61067283836111c2565b60006104e6826112a6565b60006109366001600061092360005490565b81526020019081526020016000206112db565b905090565b63ffffffff8216602084811b67ffffffff0000000016919091176000818152606a8352604080822073ffffffffffffffffffffffffffffffffffffffff86168352909352918220546060928190036109d55760405162461bcd60e51b815260206004820152601560248201527f4e6f206174746573746174696f6e7320666f756e64000000000000000000000060448201526064016104ca565b67ffffffffffffffff82166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120610a1a600184614099565b81548110610a2a57610a2a61406a565b9060005260206000200154905061066c81610e00565b60606104e68260026000610a5360005490565b81526020019081526020016000206112e590919063ffffffff16565b60006104e682611364565b60365460009073ffffffffffffffffffffffffffffffffffffffff163314610ae45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b6104e66000836110d2565b919050565b600061085b67ffffffff00000000602086901b1663ffffffff85161783611393565b606060006104e660016000610b2a60005490565b8152602001908152602001600020611486565b60365473ffffffffffffffffffffffffffffffffffffffff163314610ba45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b610bae6000611493565b565b6000610bbc600161150a565b90508015610bf157600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610bf961165e565b8015610c5c57600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60365460009073ffffffffffffffffffffffffffffffffffffffff163314610cc95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b6104e66000836111c2565b60365473ffffffffffffffffffffffffffffffffffffffff163314610d3b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b73ffffffffffffffffffffffffffffffffffffffff8116610dc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104ca565b610c5c81611493565b600080610dd9836116e4565b9050600080610de7836116f5565b91509150610df782828588611906565b95945050505050565b606081600003610e1257610e126140ac565b60006069610e21600185614099565b81548110610e3157610e3161406a565b600091825260208083206040805160e081018252600394909402909101805484526001810154848401526002015460ff808216858401526101008204161515606085015262010000810463ffffffff81811660808701526601000000000000830480821660a08801526a01000000000000000000009093041660c08601819052949650921b67ffffffff000000001691901b6bffffffff00000000000000001617176bffffffffffffffffffffffff811660009081526068602052604090205490915080610f0157610f016140ac565b608083015160a084015160c0850151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e095861b8116602083015293851b841660248201529190931b9091166028820152602c80820184905282518083039091018152604c9091019091526000610fd68560000151866020015187604001516040805160208101949094528381019290925260f81b7fff00000000000000000000000000000000000000000000000000000000000000166060830152805160418184030181526061909201905290565b9050611021828660600151610ffa5760405180602001604052806000815250610ffc565b825b876060015161100b5783611afc565b604051806020016040528060008152505b611afc565b979650505050505050565b606061085b8461103b85611b21565b61101c85611b21565b600061067283836002600061105860005490565b8152602001908152602001600020611c249092919063ffffffff16565b60006106728383611cc8565b63ffffffff821660009081526020849052604081208054839081106110a8576110a861406a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16949350505050565b600080548082526002602052604082206110ed908585611cf2565b915081156111a25760405173ffffffffffffffffffffffffffffffffffffffff84169063ffffffff8616907ff317002dd4275e311428a6702ca0c0dd258ccd819733937b3c325f9fa7d2dd6d90600090a363ffffffff8416156111a257600081815260016020526040902061116b9063ffffffff80871690611e1416565b156111a25760405163ffffffff8516907f05b9ad808d73157589dfae619d8942273dafcd3ec0a49b8f33a573410c0f122290600090a25b5092915050565b63ffffffff166000908152602091909152604090205490565b600080548082526002602052604082206111dd908585611e20565b915081156111a25760405173ffffffffffffffffffffffffffffffffffffffff84169063ffffffff8616907f36c9058f377a833904163847910be07fdfc0d1f90d885d7f2749713d9913852e90600090a363ffffffff841615801590611249575061124784610863565b155b156111a257600081815260016020526040902061126f9063ffffffff808716906120a816565b5060405163ffffffff8516907fa7654f2ff76a0d100f23fd02cae38d87b3fdf3c5d36b7f4df3bd5cc285816a1990600090a26111a2565b60006104e68263ffffffff16600160006112bf60005490565b81526020019081526020016000206120b490919063ffffffff16565b60006104e6825490565b63ffffffff81166000908152602083815260409182902080548351818402810184019094528084526060939283018282801561135757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161132c575b5050505050905092915050565b60006104e6826002600061137760005490565b81526020019081526020016000206120cc90919063ffffffff16565b67ffffffffffffffff82166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205480156111a25767ffffffffffffffff84166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120611419600184614099565b815481106114295761142961406a565b9060005260206000200154905060696001826114459190614099565b815481106114555761145561406a565b60009182526020909120600390910201600201546a0100000000000000000000900463ffffffff1695945050505050565b6060600061067283612120565b6036805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600354600090610100900460ff16156115a9578160ff16600114801561152f5750303b155b6115a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104ca565b506000919050565b60035460ff8084169116106116265760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104ca565b50600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b600354610100900460ff166116db5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104ca565b610bae33611493565b60006104e68264010100000061217c565b60608061170762ffffff198416612197565b6117535760405162461bcd60e51b815260206004820152601260248201527f4e6f7420616e206174746573746174696f6e000000000000000000000000000060448201526064016104ca565b600061176c61176762ffffff19861661222d565b61225f565b905060008061178062ffffff1987166122c6565b60ff16915060ff1691508167ffffffffffffffff8111156117a3576117a3613f2a565b6040519080825280602002602001820160405280156117cc578160200160208202803683370190505b5094508067ffffffffffffffff8111156117e8576117e8613f2a565b604051908082528060200260200182016040528015611811578160200160208202803683370190505b50935060005b828110156118815761183a60008561183562ffffff198b16856122f4565b6123a5565b86828151811061184c5761184c61406a565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015261187a816140db565b9050611817565b50600061189362ffffff198816612409565b905060005b828110156118fc576118b5828661183562ffffff198c1685612434565b8682815181106118c7576118c761406a565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526118f5816140db565b9050611898565b5050505050915091565b60008061191862ffffff1985166124ff565b9050600061192b62ffffff19861661252b565b90508061197a5760405162461bcd60e51b815260206004820152600c60248201527f526f6f74206973207a65726f000000000000000000000000000000000000000060448201526064016104ca565b6bffffffffffffffffffffffff8216600090815260686020908152604091829020825160608101845281548082526001909201546fffffffffffffffffffffffffffffffff80821694830194909452700100000000000000000000000000000000900490921692820192909252906119f457818152611a08565b80518214611a08576000935050505061085b565b6000611a17878360018c612557565b9095509050600080611a2b8985838d612557565b915091508680611a385750815b96508280611a435750805b92508615611a87577f4f0c90de207e0a470e5e1f82afac401eb563d4f550ffeabf940201329fc2bba08b8b8a604051611a7e93929190614113565b60405180910390a15b8215611aee576bffffffffffffffffffffffff86166000908152606860209081526040918290208651815590860151918601516fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029216919091176001909101555b505050505050949350505050565b606061085b611b0a85612642565b611b1385612642565b611b1c85612642565b61264e565b60608115610aef5760006069611b38600185614099565b81548110611b4857611b4861406a565b60009182526020918290206040805160e08101825260039093029091018054808452600182015494840185905260029091015460ff8082169385018490526101008204161515606085015263ffffffff6201000082048116608086015266010000000000008204811660a08601526a01000000000000000000009091041660c084015291935061067292906040805160208101949094528381019290925260f81b7fff00000000000000000000000000000000000000000000000000000000000000166060830152805160418184030181526061909201905290565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600184016020908152604080832081518083019092525463ffffffff8082168084526401000000009092047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169383019390935290918516148015610df75750602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161515949350505050565b6000826000018281548110611cdf57611cdf61406a565b9060005260206000200154905092915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018401602052604081205464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1615611d4d57506000610672565b5063ffffffff808316600081815260208681526040808320805460018181018355828652848620909101805473ffffffffffffffffffffffffffffffffffffffff8a167fffffffffffffffffffffffff000000000000000000000000000000000000000090911681179091558351808501855296875291547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff908116878601908152928652818b01909452919093209351925190911664010000000002919093161790559392505050565b600061067283836127b0565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600184016020908152604080832081518083019092525463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101829052901580611ea557508363ffffffff16816000015163ffffffff1614155b15611eb4576000915050610672565b600060018260200151611ec7919061414c565b63ffffffff8616600090815260208890526040812080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909316935091611f0e90600190614099565b9050828114612006576000828281548110611f2b57611f2b61406a565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080838581548110611f6b57611f6b61406a565b60009182526020808320909101805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790558781015193909216815260018b019091526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092166401000000000263ffffffff9092169190911790555b8180548061201657612016614181565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff8816825260018a810190915260408220919091559450505050509392505050565b600061067283836127ff565b60008181526001830160205260408120541515610672565b73ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16151590565b60608160000180548060200260200160405190810160405280929190818152602001828054801561217057602002820191906000526020600020905b81548152602001906001019080831161215c575b50505050509050919050565b815160009060208401610df764ffffffffff851682846128f2565b6000601882901c6bffffffffffffffffffffffff166121b8602c6002614057565b8110156121c85750600092915050565b6000806121d485612937565b60ff918216935016905060006121ea8284614057565b9050806000036122005750600095945050505050565b61220b6041826141b0565b612217602c6002614057565b6122219190614057565b90931495945050505050565b60008161224562ffffff198216640101000000612962565b5061067262ffffff1984166000602c640101010000612a62565b60006104e661227362ffffff198416612acd565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600080826122df62ffffff198216640101000000612962565b506122e984612937565b909590945092505050565b60008261230c62ffffff198216640101000000612962565b50600061231885612937565b5090508060ff16841061236d5760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016104ca565b610df761237b6041866141b0565b612387602c6002614057565b6123919190614057565b62ffffff1987169060416301000000612a62565b60006123b18383612b1b565b90506123bd8482611044565b6106725760405162461bcd60e51b815260206004820152601860248201527f5369676e6572206973206e6f7420617574686f72697a6564000000000000000060448201526064016104ca565b60008161242162ffffff198216640101000000612962565b5061067262ffffff198416600480612ba4565b60008261244c62ffffff198216640101000000612962565b5060008061245986612937565b915091508060ff1685106124af5760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016104ca565b6124f560416124c160ff851688614057565b6124cb91906141b0565b6124d7602c6002614057565b6124e19190614057565b62ffffff1988169060416301000000612a62565b9695505050505050565b60008161251762ffffff198216640101000000612962565b5061067262ffffff1984166000600c612ba4565b60008161254362ffffff198216640101000000612962565b5061067262ffffff198416600c6020612bd4565b80516000908190815b8181101561263757600061258f8983898986815181106125825761258261406a565b6020026020010151612d4e565b9050801561262657600194508680156125bc575060208801516fffffffffffffffffffffffffffffffff16155b156125e2576fffffffffffffffffffffffffffffffff8116602089015260019350612626565b86158015612604575060408801516fffffffffffffffffffffffffffffffff16155b15612626576fffffffffffffffffffffffffffffffff81166040890152600193505b50612630816140db565b9050612560565b505094509492505050565b60006104e6828261217c565b6060600061265b846130d2565b90506000612668846130d2565b60408051600480825260a0820190925291925061ff00600885901b1660ff841617916000916020820160808036833701905050905087816000815181106126b1576126b161406a565b62ffffff19909216602092830291909101820152604051612717916127039185910160f09190911b7fffff00000000000000000000000000000000000000000000000000000000000016815260020190565b604051602081830303815290604052612642565b8160018151811061272a5761272a61406a565b602002602001019062ffffff1916908162ffffff19168152505086816002815181106127585761275861406a565b602002602001019062ffffff1916908162ffffff19168152505085816003815181106127865761278661406a565b62ffffff19909216602092830291909101909101526127a48161319e565b98975050505050505050565b60008181526001830160205260408120546127f7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e6565b5060006104e6565b600081815260018301602052604081205480156128e8576000612823600183614099565b855490915060009061283790600190614099565b905081811461289c5760008660000182815481106128575761285761406a565b906000526020600020015490508087600001848154811061287a5761287a61406a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ad576128ad614181565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e6565b60009150506104e6565b6000806128ff8385614057565b905060405181111561290f575060005b806000036129245762ffffff19915050610672565b606085811b8517901b831760181b610df7565b6000808061294e62ffffff198516602c6002612ba4565b60ff600882901c8116969116945092505050565b600061296e83836131fd565b612a5b57600061298c6129808561321f565b64ffffffffff16613243565b91505060006129a18464ffffffffff16613243565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b086811b8216603d8401527f2e20457870656374656420307800000000000000000000000000000000000000604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b81526004016104ca9190613cd6565b5090919050565b600080612a6e8661332d565b6bffffffffffffffffffffffff169050612a8786613354565b84612a928784614057565b612a9c9190614057565b1115612aaf5762ffffff1991505061085b565b612ab98582614057565b90506124f58364ffffffffff1682866128f2565b600080612ad98361332d565b6bffffffffffffffffffffffff1690506000612b038460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b600060416bffffffffffffffffffffffff601884901c1614612b7f5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742061207369676e6174757265000000000000000000000000000000000060448201526064016104ca565b60008080612b9262ffffff19861661338d565b9250925092506124f5868285856133ee565b6000612bb18260206141c7565b612bbc9060086141e0565b60ff16612bca858585612bd4565b901c949350505050565b60008160ff16600003612be957506000610672565b612c018460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16612c1c60ff841685614057565b1115612c8557612c6c612c2e8561332d565b6bffffffffffffffffffffffff16612c548660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff16613416565b60405162461bcd60e51b81526004016104ca9190613cd6565b60208260ff161115612cd95760405162461bcd60e51b815260206004820152601960248201527f496e6465783a206d6f7265207468616e2033322062797465730000000000000060448201526064016104ca565b600882026000612ce88661332d565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b600080612d6062ffffff1987166135a6565b90506000612d7362ffffff1988166135d2565b9050612d7f8285611393565b63ffffffff168163ffffffff1611612d9c5760009250505061085b565b600085612db857612db362ffffff19891688612434565b612dc8565b612dc862ffffff198916886122f4565b90506000612de4604051806020016040528060008152506135fe565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152909150612e2f62ffffff19841661338d565b60ff166040840152602083015281528715156060820152612e5c8563ffffffff602082901c811692911690565b63ffffffff90811660a084019081529181166080840190815286821660c0850190815260698054600181810183556000838152885160039093027f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143088101939093556020808a01517f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143098501556040808b01517f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe39991430a909501805460608d015199519b5198518b166a0100000000000000000000027fffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffff998c166601000000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffff9d909c1662010000029c909c167fffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffff9a1515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090921660ff909816979097171798909816949094179790971794909416969096179093555467ffffffffffffffff8a168252606a845282822073ffffffffffffffffffffffffffffffffffffffff8d16835284529181208054948501815581529182206fffffffffffffffffffffffffffffffff909116920182905590965061308061306262ffffff198d1661222d565b8a61306d578461306f565b855b8b61307a578661264e565b8561264e565b905061308d600188614099565b7f10fe5969a93a01ac4d42fedca800a6fde8e809baa2b031ee2793a6abafdcec03826040516130bc9190613cd6565b60405180910390a2505050505050949350505050565b6000601882901c6bffffffffffffffffffffffff16816130f36041836141fc565b9050816131016041836141b0565b1461314e5760405162461bcd60e51b815260206004820152601160248201527f217369676e6174757265734c656e67746800000000000000000000000000000060448201526064016104ca565b60ff81106106725760405162461bcd60e51b815260206004820152601360248201527f546f6f206d616e79207369676e6174757265730000000000000000000000000060448201526064016104ca565b60405160609060006131b3846020840161360e565b905060006131cf8260181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060006131ea836136a8565b9184525082016020016040525092915050565b60008164ffffffffff166132108461321f565b64ffffffffff16149392505050565b600080606061322f816018614057565b6132399190614057565b9290921c92915050565b600080601f5b600f8160ff1611156132b65760006132628260086141e0565b60ff1685901c9050613273816136be565b61ffff16841793508160ff1660101461328e57601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01613249565b50600f5b60ff8160ff1610156133275760006132d38260086141e0565b60ff1685901c90506132e4816136be565b61ffff16831792508160ff166000146132ff57601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016132ba565b50915091565b60008061333c60606018614057565b9290921c6bffffffffffffffffffffffff1692915050565b600061336e8260181c6bffffffffffffffffffffffff1690565b6133778361332d565b016bffffffffffffffffffffffff169050919050565b600080808363010000006133a762ffffff19831682612962565b506133bb62ffffff19871660006020612bd4565b94506133cf62ffffff198716602080612bd4565b93506133e462ffffff19871660406001612ba4565b9496939550505050565b60008060006133ff878787876136f0565b9150915061340c81613808565b5095945050505050565b6060600061342386613243565b915050600061343186613243565b915050600061343f86613243565b915050600061344d86613243565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e2074686560208201527f20766965772e20536c6963652069732061742030780000000000000000000000818301527fffffffffffff000000000000000000000000000000000000000000000000000060d098891b811660558301527f2077697468206c656e6774682030780000000000000000000000000000000000605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060708301527f7800000000000000000000000000000000000000000000000000000000000000609083015295881b861660918201526097810196909652951b90921660a684015250507f2e0000000000000000000000000000000000000000000000000000000000000060ac8201528151808203608d01815260ad90910190915295945050505050565b6000816135be62ffffff198216640101000000612962565b5061067262ffffff19841660006008612ba4565b6000816135ea62ffffff198216640101000000612962565b5061067262ffffff19841660086004612ba4565b60006104e682630100000061217c565b6000604051828111156136215760206060fd5b506000805b84518110156136985760008582815181106136435761364361406a565b60200260200101519050613659818487016139f4565b506136728160181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1683019250508080613690906140db565b915050613626565b50606083901b811760181b61085b565b60006136b382613b82565b6104e69060206141b0565b60006136d060048360ff16901c613bc1565b60ff1661ffff919091161760081b6136e782613bc1565b60ff1617919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561372757506000905060036137ff565b8460ff16601b1415801561373f57508460ff16601c14155b1561375057506000905060046137ff565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156137a4573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166137f8576000600192509250506137ff565b9150600090505b94509492505050565b600081600481111561381c5761381c614237565b036138245750565b600181600481111561383857613838614237565b036138855760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104ca565b600281600481111561389957613899614237565b036138e65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104ca565b60038160048111156138fa576138fa614237565b0361396d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104ca565b600481600481111561398157613981614237565b03610c5c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104ca565b600062ffffff1980841603613a4b5760405162461bcd60e51b815260206004820152601a60248201527f636f7079546f3a204e756c6c20706f696e74657220646572656600000000000060448201526064016104ca565b613a5483613c1d565b613aa05760405162461bcd60e51b815260206004820152601d60248201527f636f7079546f3a20496e76616c696420706f696e74657220646572656600000060448201526064016104ca565b6000613aba8460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000613ad58561332d565b6bffffffffffffffffffffffff169050600080604051915085821115613afb5760206060fd5b8386858560045afa905080613b525760405162461bcd60e51b815260206004820152601460248201527f6964656e746974793a206f7574206f662067617300000000000000000000000060448201526064016104ca565b611021613b5e8861321f565b70ffffffffff000000000000000000000000606091821b168817901b851760181b90565b60006020613b9e8360181c6bffffffffffffffffffffffff1690565b613bb7906bffffffffffffffffffffffff16601f614057565b6104e691906141fc565b6040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152600091600f84169182908110613c0e57613c0e61406a565b016020015160f81c9392505050565b6000613c288261321f565b64ffffffffff1664ffffffffff03613c4257506000919050565b6000613c4d83613354565b60405110199392505050565b600060208284031215613c6b57600080fd5b5035919050565b6000815180845260005b81811015613c9857602081850181015186830182015201613c7c565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006106726020830184613c72565b803563ffffffff81168114610aef57600080fd5b600080600060608486031215613d1257600080fd5b613d1b84613ce9565b9250613d2960208501613ce9565b9150613d3760408501613ce9565b90509250925092565b803573ffffffffffffffffffffffffffffffffffffffff81168114610aef57600080fd5b60008060408385031215613d7757600080fd5b613d8083613ce9565b9150613d8e60208401613d40565b90509250929050565b60008060408385031215613daa57600080fd5b613db383613ce9565b946020939093013593505050565b60008060008060808587031215613dd757600080fd5b613de085613ce9565b9350613dee60208601613ce9565b9250613dfc60408601613d40565b9396929550929360600135925050565b600060208284031215613e1e57600080fd5b61067282613ce9565b600080600060608486031215613e3c57600080fd5b613e4584613ce9565b9250613e5360208501613ce9565b9150613d3760408501613d40565b600081518084526020808501945080840160005b83811015613ea757815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613e75565b509495945050505050565b6020815260006106726020830184613e61565b600060208284031215613ed757600080fd5b61067282613d40565b6020808252825182820181905260009190848201906040850190845b81811015613f1e57835163ffffffff1683529284019291840191600101613efc565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215613f6b57600080fd5b813567ffffffffffffffff80821115613f8357600080fd5b818401915084601f830112613f9757600080fd5b813581811115613fa957613fa9613f2a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613fef57613fef613f2a565b8160405282815287602084870101111561400857600080fd5b826020860160208301376000928101602001929092525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104e6576104e6614028565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156104e6576104e6614028565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361410c5761410c614028565b5060010190565b6060815260006141266060830186613e61565b82810360208401526141388186613e61565b905082810360408401526124f58185613c72565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281168282160390808211156111a2576111a2614028565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b80820281158282048414176104e6576104e6614028565b60ff82811682821603908111156104e6576104e6614028565b60ff81811683821602908116908181146111a2576111a2614028565b600082614232577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220884bf407e5da548f3293afd7535eee3452bdc919bce3cd8e844fb51a2fcebf1364736f6c63430008110033","runtime-code":"0x608060405234801561001057600080fd5b50600436106101ae5760003560e01c806365e1e466116100ee5780637f9d6d2e116100975780639a47423c116100715780639a47423c146103e7578063b623501614610441578063f2fde38b14610454578063f646a5121461046757600080fd5b80637f9d6d2e1461037a5780638129fc1c146103c15780638da5cb5b146103c957600080fd5b80636f225878116100c85780636f22587814610353578063715018a61461036857806371e2db771461037257600080fd5b806365e1e4661461031a5780636913a63c1461032d5780636ba4d1d41461034057600080fd5b80632dfbe02c1161015b5780634f5dbc0d116101355780634f5dbc0d146102cc57806361b0b357146102df578063646674ab146102e757806364ecb518146102fa57600080fd5b80632dfbe02c1461028557806332254098146102985780634b82bad7146102b957600080fd5b80631a7a98e21161018c5780631a7a98e2146102125780631d82873b1461023a5780632af678b01461027257600080fd5b8063038037a7146101b357806308f4c9a9146101dc5780630958117d146101ef575b600080fd5b6101c66101c1366004613c59565b61047a565b6040516101d39190613cd6565b60405180910390f35b6101c66101ea366004613cfd565b6104ec565b6102026101fd366004613d64565b610679565b60405190151581526020016101d3565b610225610220366004613c59565b610685565b60405163ffffffff90911681526020016101d3565b61024d610248366004613d97565b6106b4565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101d3565b610202610280366004613d64565b6106e5565b6101c6610293366004613dc1565b610759565b6102ab6102a6366004613e0c565b610863565b6040519081526020016101d3565b6102026102c7366004613d64565b610892565b6102026102da366004613e0c565b610906565b6102ab610911565b6101c66102f5366004613e27565b61093b565b61030d610308366004613e0c565b610a40565b6040516101d39190613eb2565b610202610328366004613ec5565b610a6f565b61020261033b366004613ec5565b610a7a565b61022561034e366004613e27565b610af4565b61035b610b16565b6040516101d39190613ee0565b610370610b3d565b005b6069546102ab565b6102ab610388366004613cfd565b63ffffffff16602091821b67ffffffff0000000016604093841b6bffffffff000000000000000016171760009081526068909152205490565b610370610bb0565b60365473ffffffffffffffffffffffffffffffffffffffff1661024d565b6102ab6103f5366004613e27565b63ffffffff91909116602092831b67ffffffff0000000016176000908152606a8352604080822073ffffffffffffffffffffffffffffffffffffffff9390931682529190925290205490565b61020261044f366004613ec5565b610c5f565b610370610462366004613ec5565b610cd4565b610202610475366004613f59565b610dcd565b60695460609082106104d35760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064015b60405180910390fd5b6104e66104e1836001614057565b610e00565b92915050565b6060600063ffffffff8316602085901b67ffffffff0000000016604087901b6bffffffff00000000000000001617176bffffffffffffffffffffffff8116600090815260686020908152604091829020825160608101845281548082526001909201546fffffffffffffffffffffffffffffffff808216948301949094527001000000000000000000000000000000009004909216928201929092529192506105d75760405162461bcd60e51b815260206004820152600d60248201527f556e6b6e6f776e206e6f6e63650000000000000000000000000000000000000060448201526064016104ca565b8051604080517fffffffff0000000000000000000000000000000000000000000000000000000060e08a811b8216602084015289811b8216602484015288901b166028820152602c8082019390935281518082039093018352604c01905261066c8183602001516fffffffffffffffffffffffffffffffff1684604001516fffffffffffffffffffffffffffffffff1661102c565b93505050505b9392505050565b60006106728383611044565b60006104e6826001600061069860005490565b815260200190815260200160002061107590919063ffffffff16565b60006106728383600260006106c860005490565b81526020019081526020016000206110819092919063ffffffff16565b60365460009073ffffffffffffffffffffffffffffffffffffffff16331461074f5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b61067283836110d2565b63ffffffff8316602085811b67ffffffff0000000016919091176000818152606a8352604080822073ffffffffffffffffffffffffffffffffffffffff8716835290935291909120546060919083106107f45760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016104ca565b67ffffffffffffffff81166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8816845290915281208054859081106108405761084061406a565b9060005260206000200154905061085681610e00565b925050505b949350505050565b60006104e6826002600061087660005490565b81526020019081526020016000206111a990919063ffffffff16565b60365460009073ffffffffffffffffffffffffffffffffffffffff1633146108fc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b61067283836111c2565b60006104e6826112a6565b60006109366001600061092360005490565b81526020019081526020016000206112db565b905090565b63ffffffff8216602084811b67ffffffff0000000016919091176000818152606a8352604080822073ffffffffffffffffffffffffffffffffffffffff86168352909352918220546060928190036109d55760405162461bcd60e51b815260206004820152601560248201527f4e6f206174746573746174696f6e7320666f756e64000000000000000000000060448201526064016104ca565b67ffffffffffffffff82166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff881684529091528120610a1a600184614099565b81548110610a2a57610a2a61406a565b9060005260206000200154905061066c81610e00565b60606104e68260026000610a5360005490565b81526020019081526020016000206112e590919063ffffffff16565b60006104e682611364565b60365460009073ffffffffffffffffffffffffffffffffffffffff163314610ae45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b6104e66000836110d2565b919050565b600061085b67ffffffff00000000602086901b1663ffffffff85161783611393565b606060006104e660016000610b2a60005490565b8152602001908152602001600020611486565b60365473ffffffffffffffffffffffffffffffffffffffff163314610ba45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b610bae6000611493565b565b6000610bbc600161150a565b90508015610bf157600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b610bf961165e565b8015610c5c57600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50565b60365460009073ffffffffffffffffffffffffffffffffffffffff163314610cc95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b6104e66000836111c2565b60365473ffffffffffffffffffffffffffffffffffffffff163314610d3b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016104ca565b73ffffffffffffffffffffffffffffffffffffffff8116610dc45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016104ca565b610c5c81611493565b600080610dd9836116e4565b9050600080610de7836116f5565b91509150610df782828588611906565b95945050505050565b606081600003610e1257610e126140ac565b60006069610e21600185614099565b81548110610e3157610e3161406a565b600091825260208083206040805160e081018252600394909402909101805484526001810154848401526002015460ff808216858401526101008204161515606085015262010000810463ffffffff81811660808701526601000000000000830480821660a08801526a01000000000000000000009093041660c08601819052949650921b67ffffffff000000001691901b6bffffffff00000000000000001617176bffffffffffffffffffffffff811660009081526068602052604090205490915080610f0157610f016140ac565b608083015160a084015160c0850151604080517fffffffff0000000000000000000000000000000000000000000000000000000060e095861b8116602083015293851b841660248201529190931b9091166028820152602c80820184905282518083039091018152604c9091019091526000610fd68560000151866020015187604001516040805160208101949094528381019290925260f81b7fff00000000000000000000000000000000000000000000000000000000000000166060830152805160418184030181526061909201905290565b9050611021828660600151610ffa5760405180602001604052806000815250610ffc565b825b876060015161100b5783611afc565b604051806020016040528060008152505b611afc565b979650505050505050565b606061085b8461103b85611b21565b61101c85611b21565b600061067283836002600061105860005490565b8152602001908152602001600020611c249092919063ffffffff16565b60006106728383611cc8565b63ffffffff821660009081526020849052604081208054839081106110a8576110a861406a565b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16949350505050565b600080548082526002602052604082206110ed908585611cf2565b915081156111a25760405173ffffffffffffffffffffffffffffffffffffffff84169063ffffffff8616907ff317002dd4275e311428a6702ca0c0dd258ccd819733937b3c325f9fa7d2dd6d90600090a363ffffffff8416156111a257600081815260016020526040902061116b9063ffffffff80871690611e1416565b156111a25760405163ffffffff8516907f05b9ad808d73157589dfae619d8942273dafcd3ec0a49b8f33a573410c0f122290600090a25b5092915050565b63ffffffff166000908152602091909152604090205490565b600080548082526002602052604082206111dd908585611e20565b915081156111a25760405173ffffffffffffffffffffffffffffffffffffffff84169063ffffffff8616907f36c9058f377a833904163847910be07fdfc0d1f90d885d7f2749713d9913852e90600090a363ffffffff841615801590611249575061124784610863565b155b156111a257600081815260016020526040902061126f9063ffffffff808716906120a816565b5060405163ffffffff8516907fa7654f2ff76a0d100f23fd02cae38d87b3fdf3c5d36b7f4df3bd5cc285816a1990600090a26111a2565b60006104e68263ffffffff16600160006112bf60005490565b81526020019081526020016000206120b490919063ffffffff16565b60006104e6825490565b63ffffffff81166000908152602083815260409182902080548351818402810184019094528084526060939283018282801561135757602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161132c575b5050505050905092915050565b60006104e6826002600061137760005490565b81526020019081526020016000206120cc90919063ffffffff16565b67ffffffffffffffff82166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915281205480156111a25767ffffffffffffffff84166000908152606a6020908152604080832073ffffffffffffffffffffffffffffffffffffffff871684529091528120611419600184614099565b815481106114295761142961406a565b9060005260206000200154905060696001826114459190614099565b815481106114555761145561406a565b60009182526020909120600390910201600201546a0100000000000000000000900463ffffffff1695945050505050565b6060600061067283612120565b6036805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600354600090610100900460ff16156115a9578160ff16600114801561152f5750303b155b6115a15760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104ca565b506000919050565b60035460ff8084169116106116265760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016104ca565b50600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b600354610100900460ff166116db5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016104ca565b610bae33611493565b60006104e68264010100000061217c565b60608061170762ffffff198416612197565b6117535760405162461bcd60e51b815260206004820152601260248201527f4e6f7420616e206174746573746174696f6e000000000000000000000000000060448201526064016104ca565b600061176c61176762ffffff19861661222d565b61225f565b905060008061178062ffffff1987166122c6565b60ff16915060ff1691508167ffffffffffffffff8111156117a3576117a3613f2a565b6040519080825280602002602001820160405280156117cc578160200160208202803683370190505b5094508067ffffffffffffffff8111156117e8576117e8613f2a565b604051908082528060200260200182016040528015611811578160200160208202803683370190505b50935060005b828110156118815761183a60008561183562ffffff198b16856122f4565b6123a5565b86828151811061184c5761184c61406a565b73ffffffffffffffffffffffffffffffffffffffff9092166020928302919091019091015261187a816140db565b9050611817565b50600061189362ffffff198816612409565b905060005b828110156118fc576118b5828661183562ffffff198c1685612434565b8682815181106118c7576118c761406a565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101526118f5816140db565b9050611898565b5050505050915091565b60008061191862ffffff1985166124ff565b9050600061192b62ffffff19861661252b565b90508061197a5760405162461bcd60e51b815260206004820152600c60248201527f526f6f74206973207a65726f000000000000000000000000000000000000000060448201526064016104ca565b6bffffffffffffffffffffffff8216600090815260686020908152604091829020825160608101845281548082526001909201546fffffffffffffffffffffffffffffffff80821694830194909452700100000000000000000000000000000000900490921692820192909252906119f457818152611a08565b80518214611a08576000935050505061085b565b6000611a17878360018c612557565b9095509050600080611a2b8985838d612557565b915091508680611a385750815b96508280611a435750805b92508615611a87577f4f0c90de207e0a470e5e1f82afac401eb563d4f550ffeabf940201329fc2bba08b8b8a604051611a7e93929190614113565b60405180910390a15b8215611aee576bffffffffffffffffffffffff86166000908152606860209081526040918290208651815590860151918601516fffffffffffffffffffffffffffffffff908116700100000000000000000000000000000000029216919091176001909101555b505050505050949350505050565b606061085b611b0a85612642565b611b1385612642565b611b1c85612642565b61264e565b60608115610aef5760006069611b38600185614099565b81548110611b4857611b4861406a565b60009182526020918290206040805160e08101825260039093029091018054808452600182015494840185905260029091015460ff8082169385018490526101008204161515606085015263ffffffff6201000082048116608086015266010000000000008204811660a08601526a01000000000000000000009091041660c084015291935061067292906040805160208101949094528381019290925260f81b7fff00000000000000000000000000000000000000000000000000000000000000166060830152805160418184030181526061909201905290565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600184016020908152604080832081518083019092525463ffffffff8082168084526401000000009092047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff169383019390935290918516148015610df75750602001517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff161515949350505050565b6000826000018281548110611cdf57611cdf61406a565b9060005260206000200154905092915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018401602052604081205464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1615611d4d57506000610672565b5063ffffffff808316600081815260208681526040808320805460018181018355828652848620909101805473ffffffffffffffffffffffffffffffffffffffff8a167fffffffffffffffffffffffff000000000000000000000000000000000000000090911681179091558351808501855296875291547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff908116878601908152928652818b01909452919093209351925190911664010000000002919093161790559392505050565b600061067283836127b0565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600184016020908152604080832081518083019092525463ffffffff8116825264010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16918101829052901580611ea557508363ffffffff16816000015163ffffffff1614155b15611eb4576000915050610672565b600060018260200151611ec7919061414c565b63ffffffff8616600090815260208890526040812080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff93909316935091611f0e90600190614099565b9050828114612006576000828281548110611f2b57611f2b61406a565b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080838581548110611f6b57611f6b61406a565b60009182526020808320909101805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff00000000000000000000000000000000000000009091161790558781015193909216815260018b019091526040902080547bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092166401000000000263ffffffff9092169190911790555b8180548061201657612016614181565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905590920190925573ffffffffffffffffffffffffffffffffffffffff8816825260018a810190915260408220919091559450505050509392505050565b600061067283836127ff565b60008181526001830160205260408120541515610672565b73ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205464010000000090047bffffffffffffffffffffffffffffffffffffffffffffffffffffffff16151590565b60608160000180548060200260200160405190810160405280929190818152602001828054801561217057602002820191906000526020600020905b81548152602001906001019080831161215c575b50505050509050919050565b815160009060208401610df764ffffffffff851682846128f2565b6000601882901c6bffffffffffffffffffffffff166121b8602c6002614057565b8110156121c85750600092915050565b6000806121d485612937565b60ff918216935016905060006121ea8284614057565b9050806000036122005750600095945050505050565b61220b6041826141b0565b612217602c6002614057565b6122219190614057565b90931495945050505050565b60008161224562ffffff198216640101000000612962565b5061067262ffffff1984166000602c640101010000612a62565b60006104e661227362ffffff198416612acd565b6040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b600080826122df62ffffff198216640101000000612962565b506122e984612937565b909590945092505050565b60008261230c62ffffff198216640101000000612962565b50600061231885612937565b5090508060ff16841061236d5760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016104ca565b610df761237b6041866141b0565b612387602c6002614057565b6123919190614057565b62ffffff1987169060416301000000612a62565b60006123b18383612b1b565b90506123bd8482611044565b6106725760405162461bcd60e51b815260206004820152601860248201527f5369676e6572206973206e6f7420617574686f72697a6564000000000000000060448201526064016104ca565b60008161242162ffffff198216640101000000612962565b5061067262ffffff198416600480612ba4565b60008261244c62ffffff198216640101000000612962565b5060008061245986612937565b915091508060ff1685106124af5760405162461bcd60e51b815260206004820152600c60248201527f4f7574206f662072616e6765000000000000000000000000000000000000000060448201526064016104ca565b6124f560416124c160ff851688614057565b6124cb91906141b0565b6124d7602c6002614057565b6124e19190614057565b62ffffff1988169060416301000000612a62565b9695505050505050565b60008161251762ffffff198216640101000000612962565b5061067262ffffff1984166000600c612ba4565b60008161254362ffffff198216640101000000612962565b5061067262ffffff198416600c6020612bd4565b80516000908190815b8181101561263757600061258f8983898986815181106125825761258261406a565b6020026020010151612d4e565b9050801561262657600194508680156125bc575060208801516fffffffffffffffffffffffffffffffff16155b156125e2576fffffffffffffffffffffffffffffffff8116602089015260019350612626565b86158015612604575060408801516fffffffffffffffffffffffffffffffff16155b15612626576fffffffffffffffffffffffffffffffff81166040890152600193505b50612630816140db565b9050612560565b505094509492505050565b60006104e6828261217c565b6060600061265b846130d2565b90506000612668846130d2565b60408051600480825260a0820190925291925061ff00600885901b1660ff841617916000916020820160808036833701905050905087816000815181106126b1576126b161406a565b62ffffff19909216602092830291909101820152604051612717916127039185910160f09190911b7fffff00000000000000000000000000000000000000000000000000000000000016815260020190565b604051602081830303815290604052612642565b8160018151811061272a5761272a61406a565b602002602001019062ffffff1916908162ffffff19168152505086816002815181106127585761275861406a565b602002602001019062ffffff1916908162ffffff19168152505085816003815181106127865761278661406a565b62ffffff19909216602092830291909101909101526127a48161319e565b98975050505050505050565b60008181526001830160205260408120546127f7575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556104e6565b5060006104e6565b600081815260018301602052604081205480156128e8576000612823600183614099565b855490915060009061283790600190614099565b905081811461289c5760008660000182815481106128575761285761406a565b906000526020600020015490508087600001848154811061287a5761287a61406a565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806128ad576128ad614181565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506104e6565b60009150506104e6565b6000806128ff8385614057565b905060405181111561290f575060005b806000036129245762ffffff19915050610672565b606085811b8517901b831760181b610df7565b6000808061294e62ffffff198516602c6002612ba4565b60ff600882901c8116969116945092505050565b600061296e83836131fd565b612a5b57600061298c6129808561321f565b64ffffffffff16613243565b91505060006129a18464ffffffffff16613243565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201527fffffffffffffffffffff0000000000000000000000000000000000000000000060b086811b8216603d8401527f2e20457870656374656420307800000000000000000000000000000000000000604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b81526004016104ca9190613cd6565b5090919050565b600080612a6e8661332d565b6bffffffffffffffffffffffff169050612a8786613354565b84612a928784614057565b612a9c9190614057565b1115612aaf5762ffffff1991505061085b565b612ab98582614057565b90506124f58364ffffffffff1682866128f2565b600080612ad98361332d565b6bffffffffffffffffffffffff1690506000612b038460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b600060416bffffffffffffffffffffffff601884901c1614612b7f5760405162461bcd60e51b815260206004820152600f60248201527f4e6f742061207369676e6174757265000000000000000000000000000000000060448201526064016104ca565b60008080612b9262ffffff19861661338d565b9250925092506124f5868285856133ee565b6000612bb18260206141c7565b612bbc9060086141e0565b60ff16612bca858585612bd4565b901c949350505050565b60008160ff16600003612be957506000610672565b612c018460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16612c1c60ff841685614057565b1115612c8557612c6c612c2e8561332d565b6bffffffffffffffffffffffff16612c548660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff16613416565b60405162461bcd60e51b81526004016104ca9190613cd6565b60208260ff161115612cd95760405162461bcd60e51b815260206004820152601960248201527f496e6465783a206d6f7265207468616e2033322062797465730000000000000060448201526064016104ca565b600882026000612ce88661332d565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b600080612d6062ffffff1987166135a6565b90506000612d7362ffffff1988166135d2565b9050612d7f8285611393565b63ffffffff168163ffffffff1611612d9c5760009250505061085b565b600085612db857612db362ffffff19891688612434565b612dc8565b612dc862ffffff198916886122f4565b90506000612de4604051806020016040528060008152506135fe565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152909150612e2f62ffffff19841661338d565b60ff166040840152602083015281528715156060820152612e5c8563ffffffff602082901c811692911690565b63ffffffff90811660a084019081529181166080840190815286821660c0850190815260698054600181810183556000838152885160039093027f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143088101939093556020808a01517f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe3999143098501556040808b01517f7fb4302e8e91f9110a6554c2c0a24601252c2a42c2220ca988efcfe39991430a909501805460608d015199519b5198518b166a0100000000000000000000027fffffffffffffffffffffffffffffffffffff00000000ffffffffffffffffffff998c166601000000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffffff9d909c1662010000029c909c167fffffffffffffffffffffffffffffffffffffffffffff0000000000000000ffff9a1515610100027fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000090921660ff909816979097171798909816949094179790971794909416969096179093555467ffffffffffffffff8a168252606a845282822073ffffffffffffffffffffffffffffffffffffffff8d16835284529181208054948501815581529182206fffffffffffffffffffffffffffffffff909116920182905590965061308061306262ffffff198d1661222d565b8a61306d578461306f565b855b8b61307a578661264e565b8561264e565b905061308d600188614099565b7f10fe5969a93a01ac4d42fedca800a6fde8e809baa2b031ee2793a6abafdcec03826040516130bc9190613cd6565b60405180910390a2505050505050949350505050565b6000601882901c6bffffffffffffffffffffffff16816130f36041836141fc565b9050816131016041836141b0565b1461314e5760405162461bcd60e51b815260206004820152601160248201527f217369676e6174757265734c656e67746800000000000000000000000000000060448201526064016104ca565b60ff81106106725760405162461bcd60e51b815260206004820152601360248201527f546f6f206d616e79207369676e6174757265730000000000000000000000000060448201526064016104ca565b60405160609060006131b3846020840161360e565b905060006131cf8260181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060006131ea836136a8565b9184525082016020016040525092915050565b60008164ffffffffff166132108461321f565b64ffffffffff16149392505050565b600080606061322f816018614057565b6132399190614057565b9290921c92915050565b600080601f5b600f8160ff1611156132b65760006132628260086141e0565b60ff1685901c9050613273816136be565b61ffff16841793508160ff1660101461328e57601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01613249565b50600f5b60ff8160ff1610156133275760006132d38260086141e0565b60ff1685901c90506132e4816136be565b61ffff16831792508160ff166000146132ff57601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016132ba565b50915091565b60008061333c60606018614057565b9290921c6bffffffffffffffffffffffff1692915050565b600061336e8260181c6bffffffffffffffffffffffff1690565b6133778361332d565b016bffffffffffffffffffffffff169050919050565b600080808363010000006133a762ffffff19831682612962565b506133bb62ffffff19871660006020612bd4565b94506133cf62ffffff198716602080612bd4565b93506133e462ffffff19871660406001612ba4565b9496939550505050565b60008060006133ff878787876136f0565b9150915061340c81613808565b5095945050505050565b6060600061342386613243565b915050600061343186613243565b915050600061343f86613243565b915050600061344d86613243565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e2074686560208201527f20766965772e20536c6963652069732061742030780000000000000000000000818301527fffffffffffff000000000000000000000000000000000000000000000000000060d098891b811660558301527f2077697468206c656e6774682030780000000000000000000000000000000000605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060708301527f7800000000000000000000000000000000000000000000000000000000000000609083015295881b861660918201526097810196909652951b90921660a684015250507f2e0000000000000000000000000000000000000000000000000000000000000060ac8201528151808203608d01815260ad90910190915295945050505050565b6000816135be62ffffff198216640101000000612962565b5061067262ffffff19841660006008612ba4565b6000816135ea62ffffff198216640101000000612962565b5061067262ffffff19841660086004612ba4565b60006104e682630100000061217c565b6000604051828111156136215760206060fd5b506000805b84518110156136985760008582815181106136435761364361406a565b60200260200101519050613659818487016139f4565b506136728160181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1683019250508080613690906140db565b915050613626565b50606083901b811760181b61085b565b60006136b382613b82565b6104e69060206141b0565b60006136d060048360ff16901c613bc1565b60ff1661ffff919091161760081b6136e782613bc1565b60ff1617919050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561372757506000905060036137ff565b8460ff16601b1415801561373f57508460ff16601c14155b1561375057506000905060046137ff565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156137a4573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff81166137f8576000600192509250506137ff565b9150600090505b94509492505050565b600081600481111561381c5761381c614237565b036138245750565b600181600481111561383857613838614237565b036138855760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016104ca565b600281600481111561389957613899614237565b036138e65760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016104ca565b60038160048111156138fa576138fa614237565b0361396d5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104ca565b600481600481111561398157613981614237565b03610c5c5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c60448201527f756500000000000000000000000000000000000000000000000000000000000060648201526084016104ca565b600062ffffff1980841603613a4b5760405162461bcd60e51b815260206004820152601a60248201527f636f7079546f3a204e756c6c20706f696e74657220646572656600000000000060448201526064016104ca565b613a5483613c1d565b613aa05760405162461bcd60e51b815260206004820152601d60248201527f636f7079546f3a20496e76616c696420706f696e74657220646572656600000060448201526064016104ca565b6000613aba8460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000613ad58561332d565b6bffffffffffffffffffffffff169050600080604051915085821115613afb5760206060fd5b8386858560045afa905080613b525760405162461bcd60e51b815260206004820152601460248201527f6964656e746974793a206f7574206f662067617300000000000000000000000060448201526064016104ca565b611021613b5e8861321f565b70ffffffffff000000000000000000000000606091821b168817901b851760181b90565b60006020613b9e8360181c6bffffffffffffffffffffffff1690565b613bb7906bffffffffffffffffffffffff16601f614057565b6104e691906141fc565b6040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152600091600f84169182908110613c0e57613c0e61406a565b016020015160f81c9392505050565b6000613c288261321f565b64ffffffffff1664ffffffffff03613c4257506000919050565b6000613c4d83613354565b60405110199392505050565b600060208284031215613c6b57600080fd5b5035919050565b6000815180845260005b81811015613c9857602081850181015186830182015201613c7c565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006106726020830184613c72565b803563ffffffff81168114610aef57600080fd5b600080600060608486031215613d1257600080fd5b613d1b84613ce9565b9250613d2960208501613ce9565b9150613d3760408501613ce9565b90509250925092565b803573ffffffffffffffffffffffffffffffffffffffff81168114610aef57600080fd5b60008060408385031215613d7757600080fd5b613d8083613ce9565b9150613d8e60208401613d40565b90509250929050565b60008060408385031215613daa57600080fd5b613db383613ce9565b946020939093013593505050565b60008060008060808587031215613dd757600080fd5b613de085613ce9565b9350613dee60208601613ce9565b9250613dfc60408601613d40565b9396929550929360600135925050565b600060208284031215613e1e57600080fd5b61067282613ce9565b600080600060608486031215613e3c57600080fd5b613e4584613ce9565b9250613e5360208501613ce9565b9150613d3760408501613d40565b600081518084526020808501945080840160005b83811015613ea757815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101613e75565b509495945050505050565b6020815260006106726020830184613e61565b600060208284031215613ed757600080fd5b61067282613d40565b6020808252825182820181905260009190848201906040850190845b81811015613f1e57835163ffffffff1683529284019291840191600101613efc565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600060208284031215613f6b57600080fd5b813567ffffffffffffffff80821115613f8357600080fd5b818401915084601f830112613f9757600080fd5b813581811115613fa957613fa9613f2a565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613fef57613fef613f2a565b8160405282815287602084870101111561400857600080fd5b826020860160208301376000928101602001929092525095945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156104e6576104e6614028565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b818103818111156104e6576104e6614028565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361410c5761410c614028565b5060010190565b6060815260006141266060830186613e61565b82810360208401526141388186613e61565b905082810360408401526124f58185613c72565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8281168282160390808211156111a2576111a2614028565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b80820281158282048414176104e6576104e6614028565b60ff82811682821603908111156104e6576104e6614028565b60ff81811683821602908116908181146111a2576111a2614028565b600082614232577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220884bf407e5da548f3293afd7535eee3452bdc919bce3cd8e844fb51a2fcebf1364736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"129078:21965:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"129078:21965:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;139255:228;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;137892:810;;;;;;:::i;:::-;;:::i;97326:143::-;;;;;;:::i;:::-;;:::i;:::-;;;2037:14:1;;2030:22;2012:41;;2000:2;1985:18;97326:143:0;1872:187:1;99480:143:0;;;;;;:::i;:::-;;:::i;:::-;;;2238:10:1;2226:23;;;2208:42;;2196:2;2181:18;99480:143:0;2064:192:1;99096:157:0;;;;;;:::i;:::-;;:::i;:::-;;;2694:42:1;2682:55;;;2664:74;;2652:2;2637:18;99096:157:0;2518:226:1;134321:137:0;;;;;;:::i;:::-;;:::i;136043:483::-;;;;;;:::i;:::-;;:::i;98482:131::-;;;;;;:::i;:::-;;:::i;:::-;;;3488:25:1;;;3476:2;3461:18;98482:131:0;3342:177:1;134611:143:0;;;;;;:::i;:::-;;:::i;97657:117::-;;;;;;:::i;:::-;;:::i;98776:112::-;;;:::i;137076:502::-;;;;;;:::i;:::-;;:::i;96192:139::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;97032:118::-;;;;;;:::i;:::-;;:::i;134180:135::-;;;;;;:::i;:::-;;:::i;136725:242::-;;;;;;:::i;:::-;;:::i;96523:368::-;;;:::i;:::-;;;;;;;:::i;127990:101::-;;;:::i;:::-;;135781:107;135859:15;:22;135781:107;;138817:262;;;;;;:::i;:::-;53767:63;;53818:2;53794:26;;;;;53787:2;53768:21;;;;;53767:54;:63;138939:7;139048:19;;;:11;:19;;;;:24;;138817:262;133468:86;;;:::i;127358:85::-;127430:6;;;;127358:85;;135409:291;;;;;;:::i;:::-;53330:38;;;;;53350:2;53331:21;;;;;53330:38;135542:7;135651:27;;;:15;:27;;;;;;:35;;;;;;;;;;;;;:42;;135409:291;134464:141;;;;;;:::i;:::-;;:::i;128240:198::-;;;;;;:::i;:::-;;:::i;108565:418::-;;;;;;:::i;:::-;;:::i;139255:228::-;139364:15;:22;139323:12;;139355:31;;139347:56;;;;-1:-1:-1;;;139347:56:0;;7015:2:1;139347:56:0;;;6997:21:1;7054:2;7034:18;;;7027:30;7093:14;7073:18;;;7066:42;7125:18;;139347:56:0;;;;;;;;;139420;139463:10;:6;139472:1;139463:10;:::i;:::-;139420:23;:56::i;:::-;139413:63;139255:228;-1:-1:-1;;139255:228:0:o;137892:810::-;138021:12;138045:13;53767:63;;;53818:2;53794:26;;;;;53787:2;53768:21;;;;;53767:54;:63;138159:19;;;138128:28;138159:19;;;:11;:19;;;;;;;;;138128:50;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;138045:73;;-1:-1:-1;138188:55:0;;;;-1:-1:-1;;;138188:55:0;;7675:2:1;138188:55:0;;;7657:21:1;7714:2;7694:18;;;7687:30;7753:15;7733:18;;;7726:43;7786:18;;138188:55:0;7473:337:1;138188:55:0;138429:15;;51920:54;;;9860:66:1;9955:3;9951:16;;;9947:25;;51920:54:0;;;9935:38:1;10006:16;;;10002:25;;9989:11;;;9982:46;10061:16;;;10057:25;10044:11;;;10037:46;10099:12;;;;10092:28;;;;51920:54:0;;;;;;;;;;10136:12:1;;51920:54:0;;138484:211;138543:7;138590:10;:24;;;138484:211;;138655:10;:25;;;138484:211;;:22;:211::i;:::-;138465:230;;;;;137892:810;;;;;;:::o;97326:143::-;97406:4;97429:33;97444:7;97453:8;97429:14;:33::i;99480:143::-;99542:6;99574:41;99602:12;99574:7;:24;99582:15;104899:7;104925:5;;104851:86;99582:15;99574:24;;;;;;;;;;;:27;;:41;;;;:::i;99096:157::-;99172:7;99198:48;99225:7;99234:11;99198:6;:23;99205:15;104899:7;104925:5;;104851:86;99205:15;99198:23;;;;;;;;;;;:26;;:48;;;;;:::i;134321:137::-;127430:6;;134401:4;;127570:23;127430:6;126358:10;127570:23;127562:68;;;;-1:-1:-1;;;127562:68:0;;8017:2:1;127562:68:0;;;7999:21:1;;;8036:18;;;8029:30;8095:34;8075:18;;;8068:62;8147:18;;127562:68:0;7815:356:1;127562:68:0;134424:27:::1;134434:7;134443;134424:9;:27::i;136043:483::-:0;53330:38;;;53350:2;53331:21;;;;;53330:38;;;;136226:17;136326:27;;;:15;:27;;;;;;:35;;;;;;;;;;;;:42;136202:12;;53330:38;136317:51;;136309:76;;;;-1:-1:-1;;;136309:76:0;;7015:2:1;136309:76:0;;;6997:21:1;7054:2;7034:18;;;7027:30;7093:14;7073:18;;;7066:42;7125:18;;136309:76:0;6813:336:1;136309:76:0;136420:27;;;136395:22;136420:27;;;:15;:27;;;;;;;;:35;;;;;;;;;;:43;;136456:6;;136420:43;;;;;;:::i;:::-;;;;;;;;;136395:68;;136480:39;136504:14;136480:23;:39::i;:::-;136473:46;;;;136043:483;;;;;;;:::o;98482:131::-;98541:7;98567:39;98598:7;98567:6;:23;98574:15;104899:7;104925:5;;104851:86;98574:15;98567:23;;;;;;;;;;;:30;;:39;;;;:::i;134611:143::-;127430:6;;134694:4;;127570:23;127430:6;126358:10;127570:23;127562:68;;;;-1:-1:-1;;;127562:68:0;;8017:2:1;127562:68:0;;;7999:21:1;;;8036:18;;;8029:30;8095:34;8075:18;;;8068:62;8147:18;;127562:68:0;7815:356:1;127562:68:0;134717:30:::1;134730:7;134739;134717:12;:30::i;97657:117::-:0;97720:4;97743:24;97759:7;97743:15;:24::i;98776:112::-;98822:7;98848:33;:7;:24;98856:15;104899:7;104925:5;;104851:86;98856:15;98848:24;;;;;;;;;;;:31;:33::i;:::-;98841:40;;98776:112;:::o;137076:502::-;53330:38;;;53350:2;53331:21;;;;;53330:38;;;;137236:17;137336:27;;;:15;:27;;;;;;:35;;;;;;;;;;;:42;137212:12;;137396:11;;;137388:45;;;;-1:-1:-1;;;137388:45:0;;8567:2:1;137388:45:0;;;8549:21:1;8606:2;8586:18;;;8579:30;8645:23;8625:18;;;8618:51;8686:18;;137388:45:0;8365:345:1;137388:45:0;137468:27;;;137443:22;137468:27;;;:15;:27;;;;;;;;:35;;;;;;;;;;137504:10;137513:1;137504:6;:10;:::i;:::-;137468:47;;;;;;;;:::i;:::-;;;;;;;;;137443:72;;137532:39;137556:14;137532:23;:39::i;96192:139::-;96250:16;96285:39;96316:7;96285:6;:23;96292:15;104899:7;104925:5;;104851:86;96292:15;96285:23;;;;;;;;;;;:30;;:39;;;;:::i;97032:118::-;97096:4;97119:24;97134:8;97119:14;:24::i;134180:135::-;127430:6;;134242:4;;127570:23;127430:6;126358:10;127570:23;127562:68;;;;-1:-1:-1;;;127562:68:0;;8017:2:1;127562:68:0;;;7999:21:1;;;8036:18;;;8029:30;8095:34;8075:18;;;8068:62;8147:18;;127562:68:0;7815:356:1;127562:68:0;134265:43:::1;134286:1;134299:6;134265:9;:43::i;127640:1::-;134180:135:::0;;;:::o;136725:242::-;136855:6;136880:80;53331:21;53350:2;53331:21;;;;53330:38;;;;136953:6;136880:17;:80::i;96523:368::-;96568:24;96604:23;96630:33;:7;:24;96638:15;104899:7;104925:5;;104851:86;96638:15;96630:24;;;;;;;;;;;:31;:33::i;127990:101::-;127430:6;;127570:23;127430:6;126358:10;127570:23;127562:68;;;;-1:-1:-1;;;127562:68:0;;8017:2:1;127562:68:0;;;7999:21:1;;;8036:18;;;8029:30;8095:34;8075:18;;;8068:62;8147:18;;127562:68:0;7815:356:1;127562:68:0;128054:30:::1;128081:1;128054:18;:30::i;:::-;127990:101::o:0;133468:86::-;122538:19;122560:25;122583:1;122560:22;:25::i;:::-;122538:47;;122599:14;122595:65;;;122629:13;:20;;;;;;;;122595:65;133521:26:::1;:24;:26::i;:::-;122684:14:::0;122680:99;;;122714:13;:21;;;;;;122754:14;;-1:-1:-1;9000:36:1;;122754:14:0;;8988:2:1;8973:18;122754:14:0;;;;;;;122680:99;122528:257;133468:86::o;134464:141::-;127430:6;;134529:4;;127570:23;127430:6;126358:10;127570:23;127562:68;;;;-1:-1:-1;;;127562:68:0;;8017:2:1;127562:68:0;;;7999:21:1;;;8036:18;;;8029:30;8095:34;8075:18;;;8068:62;8147:18;;127562:68:0;7815:356:1;127562:68:0;134552:46:::1;134576:1;134589:6;134552:12;:46::i;128240:198::-:0;127430:6;;127570:23;127430:6;126358:10;127570:23;127562:68;;;;-1:-1:-1;;;127562:68:0;;8017:2:1;127562:68:0;;;7999:21:1;;;8036:18;;;8029:30;8095:34;8075:18;;;8068:62;8147:18;;127562:68:0;7815:356:1;127562:68:0;128328:22:::1;::::0;::::1;128320:73;;;::::0;-1:-1:-1;;;128320:73:0;;9249:2:1;128320:73:0::1;::::0;::::1;9231:21:1::0;9288:2;9268:18;;;9261:30;9327:34;9307:18;;;9300:62;9398:8;9378:18;;;9371:36;9424:19;;128320:73:0::1;9047:402:1::0;128320:73:0::1;128403:28;128422:8;128403:18;:28::i;108565:418::-:0;108637:4;108653:23;108679:32;:12;:30;:32::i;:::-;108653:58;;108803:23;108828:25;108857:35;108876:15;108857:18;:35::i;:::-;108802:90;;;;108909:67;108928:6;108936:8;108946:15;108963:12;108909:18;:67::i;:::-;108902:74;108565:418;-1:-1:-1;;;;;108565:418:0:o;148221:1464::-;148302:12;148419:15;148438:1;148419:20;148412:28;;;;:::i;:::-;148488:30;148521:15;148537:19;148555:1;148537:15;:19;:::i;:::-;148521:36;;;;;;;;:::i;:::-;;;;;;;;;148488:69;;;;;;;;148521:36;;;;;;;;148488:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;53794:26:0;;;;53768:21;;;;;53767:54;:63;148768:19;;;148753:12;148768:19;;;:11;:19;;;;;:24;148567:176;;-1:-1:-1;148768:24:0;148867:26;;;;:::i;:::-;149023:15;;;;149066:20;;;;149108:14;;;;51920:54;;;9860:66:1;9955:3;9951:16;;;9947:25;;51920:54:0;;;9935:38:1;10006:16;;;10002:25;;9989:11;;;9982:46;10061:16;;;;10057:25;;;10044:11;;;10037:46;10099:12;;;;10092:28;;;51920:54:0;;;;;;;;;;10136:12:1;;;;51920:54:0;;;149220:22;149245:119;149289:8;:10;;;149316:8;:10;;;149343:8;:10;;;42508:25;;;;;;12685:19:1;;;;12720:12;;;12713:28;;;;12779:3;12775:16;12793:66;12771:89;42477:12:0;12757::1;;12750:111;42508:25:0;;;;;;;;;12877:12:1;;;;42508:25:0;;;42368:172;149245:119;149220:144;;149448:230;149503:7;149546:8;:16;;;:40;;149577:9;;;;;;;;;;;;149546:40;;;149565:9;149546:40;149623:8;:16;;;:40;;149654:9;149448:29;:230::i;149623:40::-;149642:9;;;;;;;;;;;;149623:40;149448:29;:230::i;:::-;149429:249;148221:1464;-1:-1:-1;;;;;;;148221:1464:0:o;149827:457::-;150004:12;150047:230;150102:16;150154:35;150168:20;150154:13;:35::i;:::-;150226:36;150240:21;150226:13;:36::i;105962:232::-;106043:4;106136:51;106169:7;106178:8;106136:6;:23;106143:15;104899:7;104925:5;;104851:86;106143:15;106136:23;;;;;;;;;;;:32;;:51;;;;;:::i;91372:135::-;91443:7;91477:22;91481:3;91493:5;91477:3;:22::i;79965:184::-;80116:19;;;80090:7;80116:19;;;;;;;;;;:26;;80136:5;;80116:26;;;;;;:::i;:::-;;;;;;;;;;;;;;79965:184;-1:-1:-1;;;;79965:184:0:o;100439:1065::-;100510:13;104925:5;;100825:14;;;:6;:14;;;;;:37;;100844:7;100853:8;100825:18;:37::i;:::-;100814:48;;100876:8;100872:626;;;100905:29;;;;;;;;;;;;;;;101049:12;;;;101045:339;;101182:15;;;;:7;:15;;;;;:28;;;;;;;:19;:28;:::i;:::-;101178:192;;;101327:24;;;;;;;;;;;101178:192;100525:979;100439:1065;;;;:::o;79464:143::-;79574:19;;79548:7;79574:19;;;;;;;;;;;:26;;79464:143::o;101793:995::-;101867:15;104925:5;;102191:14;;;:6;:14;;;;;:40;;102213:7;102222:8;102191:21;:40::i;:::-;102178:53;;102245:10;102241:541;;;102276:31;;;;;;;;;;;;;;;102426:12;;;;;;;:42;;;102442:21;102455:7;102442:12;:21::i;:::-;:26;102426:42;102422:244;;;102571:15;;;;:7;:15;;;;;:31;;;;;;;:22;:31;:::i;:::-;-1:-1:-1;102625:26:0;;;;;;;;;;;102734:37;103837:79;106380:136;106444:4;106467:42;106501:7;106467:42;;:7;:24;106475:15;104899:7;104925:5;;104851:86;106475:15;106467:24;;;;;;;;;;;:33;;:42;;;;:::i;90918:112::-;90978:7;91004:19;91012:3;84108:18;;84026:107;80715:173;80862:19;;;:11;:19;;;;;;;;;;;;80855:26;;;;;;;;;;;;;;;;;80823:16;;80855:26;;;80862:19;80855:26;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;80715:173;;;;:::o;105598:201::-;105663:4;105750:42;105783:8;105750:6;:23;105757:15;104899:7;104925:5;;104851:86;105757:15;105750:23;;;;;;;;;;;:32;;:42;;;;:::i;150491:379::-;150646:28;;;150601:12;150646:28;;;:15;:28;;;;;;;;:36;;;;;;;;;;:43;150703:10;;150699:165;;150748:28;;;150729:16;150748:28;;;:15;:28;;;;;;;;:36;;;;;;;;;;150785:10;150794:1;150785:6;:10;:::i;:::-;150748:48;;;;;;;;:::i;:::-;;;;;;;;;150729:67;;150818:15;150845:1;150834:8;:12;;;;:::i;:::-;150818:29;;;;;;;;:::i;:::-;;;;;;;;;;;;;;:35;;;;;;;;;;-1:-1:-1;;;;;150491:379:0:o;92047:297::-;92107:16;92135:22;92160:19;92168:3;92160:7;:19::i;128592:187::-;128684:6;;;;128700:17;;;;;;;;;;;128732:40;;128684:6;;;128700:17;128684:6;;128732:40;;128665:16;;128732:40;128655:124;128592:187;:::o;124714:808::-;125111:13;;124778:4;;125111:13;;;;;125107:409;;;125165:7;:12;;125176:1;125165:12;:61;;;;-1:-1:-1;125220:4:0;113685:19;:23;125165:61;125140:166;;;;-1:-1:-1;;;125140:166:0;;10361:2:1;125140:166:0;;;10343:21:1;10400:2;10380:18;;;10373:30;10439:34;10419:18;;;10412:62;10510:16;10490:18;;;10483:44;10544:19;;125140:166:0;10159:410:1;125140:166:0;-1:-1:-1;125327:5:0;;124714:808;-1:-1:-1;124714:808:0:o;125107:409::-;125371:12;;:22;;;;:12;;:22;125363:81;;;;-1:-1:-1;;;125363:81:0;;10361:2:1;125363:81:0;;;10343:21:1;10400:2;10380:18;;;10373:30;10439:34;10419:18;;;10412:62;10510:16;10490:18;;;10483:44;10544:19;;125363:81:0;10159:410:1;125363:81:0;-1:-1:-1;125458:12:0;:22;;;;;;;;;;;;;;;-1:-1:-1;;124714:808:0:o;127171:111::-;124125:13;;;;;;;124117:69;;;;-1:-1:-1;;;124117:69:0;;10776:2:1;124117:69:0;;;10758:21:1;10815:2;10795:18;;;10788:30;10854:34;10834:18;;;10827:62;10925:13;10905:18;;;10898:41;10956:19;;124117:69:0;10574:407:1;124117:69:0;127243:32:::1;126358:10:::0;127243:18:::1;:32::i;52087:144::-:0;52160:7;52186:38;:8;37661:16;52186:12;:38::i;110638:1490::-;110739:23;;110972:32;-1:-1:-1;;110972:30:0;;;:32::i;:::-;110964:63;;;;-1:-1:-1;;;110964:63:0;;11188:2:1;110964:63:0;;;11170:21:1;11227:2;11207:18;;;11200:30;11266:20;11246:18;;;11239:48;11304:18;;110964:63:0;10986:342:1;110964:63:0;111037:14;111054:63;111082:34;-1:-1:-1;;111082:32:0;;;:34::i;:::-;111054:27;:63::i;:::-;111037:80;-1:-1:-1;111198:17:0;;111239:34;-1:-1:-1;;111239:32:0;;;:34::i;:::-;111197:76;;;;;;;;111306:9;111292:24;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;111292:24:0;;111283:33;;111351:10;111337:25;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;111337:25:0;;111326:36;;111468:9;111463:237;111487:9;111483:1;:13;111463:237;;;111529:160;111572:1;111600:6;111640:34;-1:-1:-1;;111640:31:0;;111672:1;111640:31;:34::i;:::-;111529:15;:160::i;:::-;111517:6;111524:1;111517:9;;;;;;;;:::i;:::-;:172;;;;:9;;;;;;;;;;;:172;111498:3;;;:::i;:::-;;;111463:237;;;-1:-1:-1;111802:18:0;111823:38;-1:-1:-1;;111823:36:0;;;:38::i;:::-;111802:59;;111876:9;111871:251;111895:10;111891:1;:14;111871:251;;;111940:171;111983:11;112021:6;112061:35;-1:-1:-1;;112061:32:0;;112094:1;112061:32;:35::i;111940:171::-;111926:8;111935:1;111926:11;;;;;;;;:::i;:::-;:185;;;;:11;;;;;;;;;;;:185;111907:3;;;:::i;:::-;;;111871:251;;;;110795:1333;;;;110638:1490;;;:::o;140592:2405::-;140792:11;;140831:30;-1:-1:-1;;140831:28:0;;;:30::i;:::-;140815:46;-1:-1:-1;140871:12:0;140886:31;-1:-1:-1;;140886:29:0;;;:31::i;:::-;140871:46;-1:-1:-1;140871:46:0;141067:43;;;;-1:-1:-1;;;141067:43:0;;11735:2:1;141067:43:0;;;11717:21:1;11774:2;11754:18;;;11747:30;11813:14;11793:18;;;11786:42;11845:18;;141067:43:0;11533:336:1;141067:43:0;141218:19;;;141185:30;141218:19;;;:11;:19;;;;;;;;;141185:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;141247:532;;141506:24;;;141247:532;;;141551:17;;:25;;141547:232;;141763:5;141756:12;;;;;;;141547:232;142052:11;142092:176;142142:16;142187:12;142223:4;142250:7;142092:17;:176::i;:::-;142073:195;;-1:-1:-1;142073:195:0;-1:-1:-1;142321:12:0;;142351:179;142401:16;142446:12;142321;142510:9;142351:17;:179::i;:::-;142320:210;;;;142618:6;:17;;;;142628:7;142618:17;142609:26;;142654:6;:17;;;;142664:7;142654:17;142645:26;;142749:6;142745:95;;;142776:53;142796:7;142805:9;142816:12;142776:53;;;;;;;;:::i;:::-;;;;;;;;142745:95;142924:6;142920:71;;;142946:19;;;;;;;:11;:19;;;;;;;;;:34;;;;;;;;;;;;;;;;;;;;;;;;;;;;;142920:71;140805:2192;;;;;;140592:2405;;;;;;:::o;50145:433::-;50308:12;50351:220;50398:22;:5;:20;:22::i;:::-;50454:33;:16;:31;:33::i;:::-;50522:34;:17;:32;:34::i;:::-;50351:17;:220::i;147702:332::-;147773:22;147811:20;;147807:221;;147847:30;147880:15;147896:19;147914:1;147896:15;:19;:::i;:::-;147880:36;;;;;;;;:::i;:::-;;;;;;;;;;147847:69;;;;;;;;147880:36;;;;;;;147847:69;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;147942:75:0;;147847:69;42508:25;;;;;;12685:19:1;;;;12720:12;;;12713:28;;;;12779:3;12775:16;12793:66;12771:89;42477:12:0;12757::1;;12750:111;42508:25:0;;;;;;;;;12877:12:1;;;;42508:25:0;;;42368:172;78981:385;79200:21;;;79114:4;79200:21;;;:12;;;:21;;;;;;;;79169:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;79307:27;;;:52;;;;-1:-1:-1;79338:16:0;;;:21;;;;;79300:59;-1:-1:-1;;;;78981:385:0:o;84475:118::-;84542:7;84568:3;:11;;84580:5;84568:18;;;;;;;;:::i;:::-;;;;;;;;;84561:25;;84475:118;;;;:::o;76554:503::-;78843:21;;;76677:4;78843:21;;;:12;;;:21;;;;;:27;;;;;;:32;76693:40;;-1:-1:-1;76728:5:0;76721:12;;76693:40;-1:-1:-1;76743:19:0;;;;:11;:19;;;;;;;;;;;:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;76923:106;;;;;;;;;;76991:26;;76923:106;;;;;;;;;;76899:21;;;:12;;;:21;;;;;;;:130;;;;;;;;;;;;;;;;76554:503;;;;;:::o;90180:129::-;90247:4;90270:32;90275:3;90295:5;90270:4;:32::i;77356:1283::-;77529:21;;;77482:4;77529:21;;;:12;;;:21;;;;;;;;77498:52;;;;;;;;;;;;;;;;;;;;;;;;;;77645:21;;:52;;;77691:6;77670:27;;:10;:17;;;:27;;;;77645:52;77641:70;;;77706:5;77699:12;;;;;77641:70;77721:21;77764:1;77745:10;:16;;;:20;;;;:::i;:::-;78007:19;;;77980:24;78007:19;;;;;;;;;;78056:13;;77721:44;;;;;;-1:-1:-1;78007:19:0;78056:17;;78072:1;;78056:17;:::i;:::-;78036:37;;78100:13;78087:9;:26;78083:360;;78129:17;78149:6;78156:9;78149:17;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;78129:37;;78281:9;78257:6;78264:13;78257:21;;;;;;;;:::i;:::-;;;;;;;;;;;;:33;;;;;;;;;;;;;78416:16;;;;78384:23;;;;;;78257:33;78384:12;;:23;;;;;;:48;;;;;;;;;;;;;;;;;;78083:360;78512:6;:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;78590:21;;;;78512:12;78590;;;:21;;;;;;78583:28;;;;78512:12;-1:-1:-1;;;;;77356:1283:0;;;;;:::o;90477:135::-;90547:4;90570:35;90578:3;90598:5;90570:7;:35::i;90693:144::-;90770:4;83914:19;;;:12;;;:19;;;;;;:24;;90793:37;83818:127;78732:150;78843:21;;78820:4;78843:21;;;:12;;;;;:21;;;;;:27;;;;;;:32;;;78732:150::o;85133:109::-;85189:16;85224:3;:11;;85217:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;85133:109;;;:::o;14644:595::-;14748:10;;14714:7;;15174:4;15165:14;;15206:26;;;;15165:14;14748:10;15206:5;:26::i;52326:618::-;52387:4;3119:2;18555:23;;;3512:16;18551:41;48391:21;48256:2;48411:1;48391:21;:::i;:::-;52503:6;:31;52499:49;;;-1:-1:-1;52543:5:0;;52326:618;-1:-1:-1;;52326:618:0:o;52499:49::-;52559:17;52578:18;52600:23;52617:5;52600:16;:23::i;:::-;52558:65;;;;;-1:-1:-1;52558:65:0;;-1:-1:-1;52633:17:0;52653:22;52558:65;;52653:22;:::i;:::-;52633:42;;52739:9;52752:1;52739:14;52735:32;;-1:-1:-1;52762:5:0;;52326:618;-1:-1:-1;;;;;52326:618:0:o;52735:32::-;52898:39;40397:2;52898:9;:39;:::i;:::-;48391:21;48256:2;48411:1;48391:21;:::i;:::-;52873:64;;;;:::i;:::-;52863:74;;;;52326:618;-1:-1:-1;;;;;52326:618:0:o;56881:300::-;56967:7;56951:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;-1:-1:-1;57005:169:0::1;-1:-1:-1::0;;57005:11:0;::::1;48047:1;48256:2;37760:16;57005:11;:169::i;72609:260::-:0;72683:14;72814:48;72843:18;-1:-1:-1;;72843:16:0;;;:18::i;:::-;70999:58;;15258:66:1;70999:58:0;;;15246:79:1;15341:12;;;15334:28;;;70869:7:0;;15378:12:1;;70999:58:0;;;;;;;;;;;;70989:69;;;;;;70982:76;;70800:265;;;;57296:223;57414:15;;57390:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;;57489:23:::1;57506:5;57489:16;:23::i;:::-;57463:49:::0;;;;-1:-1:-1;57296:223:0;-1:-1:-1;;;57296:223:0:o;58264:519::-;58402:7;58378:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;;58426:15:::1;58447:23;58464:5;58447:16;:23::i;:::-;58425:45;;;58502:9;58488:23;;:11;:23;58480:48;;;::::0;-1:-1:-1;;;58480:48:0;;7015:2:1;58480:48:0::1;::::0;::::1;6997:21:1::0;7054:2;7034:18;;;7027:30;7093:14;7073:18;;;7066:42;7125:18;;58480:48:0::1;6813:336:1::0;58480:48:0::1;58557:219;58620:41;40397:2;58620:11:::0;:41:::1;:::i;:::-;48391:21;48256:2;48411:1;48391:21;:::i;:::-;58595:66;;;;:::i;:::-;-1:-1:-1::0;;58557:11:0;::::1;::::0;40397:2:::1;36922:16;58557:11;:219::i;105156:295::-:0;105291:13;105324:43;105343:7;105352:14;105324:18;:43::i;:::-;105316:51;;105385:30;105400:7;105409:5;105385:14;:30::i;:::-;105377:67;;;;-1:-1:-1;;;105377:67:0;;13693:2:1;105377:67:0;;;13675:21:1;13732:2;13712:18;;;13705:30;13771:26;13751:18;;;13744:54;13815:18;;105377:67:0;13491:348:1;55408:224:0;55530:6;55506:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;-1:-1:-1;55566:58:0::1;-1:-1:-1::0;;55566:15:0;::::1;48101:1;::::0;55566:15:::1;:58::i;58927:594::-:0;59067:7;59043:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;;59091:15:::1;59108:16:::0;59128:23:::1;59145:5;59128:16;:23::i;:::-;59090:61;;;;59184:10;59169:25;;:12;:25;59161:50;;;::::0;-1:-1:-1;;;59161:50:0;;7015:2:1;59161:50:0::1;::::0;::::1;6997:21:1::0;7054:2;7034:18;;;7027:30;7093:14;7073:18;;;7066:42;7125:18;;59161:50:0::1;6813:336:1::0;59161:50:0::1;59240:274;40397:2;59324:24;;::::0;::::1;:12:::0;:24:::1;:::i;:::-;59323:76;;;;:::i;:::-;48391:21;48256:2;48411:1;48391:21;:::i;:::-;59278:121;;;;:::i;:::-;-1:-1:-1::0;;59240:11:0;::::1;::::0;40397:2:::1;36922:16;59240:11;:274::i;:::-;59221:293:::0;58927:594;-1:-1:-1;;;;;;58927:594:0:o;56340:176::-;56422:6;56406:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;-1:-1:-1;56454:54:0::1;-1:-1:-1::0;;56454:15:0;::::1;48047:1;56503:2;56454:15;:54::i;56611:164::-:0;56694:7;56678:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;-1:-1:-1;56720:48:0::1;-1:-1:-1::0;;56720:11:0;::::1;48196:2;56763;56720:11;:48::i;143267:1384::-:0;143521:14;;143450:20;;;;;143545:1100;143569:6;143565:1;:10;143545:1100;;;143596:21;143620:190;143675:16;143722:1;143751:8;143785:7;143793:1;143785:10;;;;;;;;:::i;:::-;;;;;;;143620:18;:190::i;:::-;143596:214;-1:-1:-1;143876:18:0;;143872:763;;143932:4;143914:22;;144044:8;:44;;;;-1:-1:-1;144056:27:0;;;;:32;;;144044:44;144040:581;;;144210:52;;;:27;;;:52;144302:4;;-1:-1:-1;144040:581:0;;;144336:8;144335:9;:46;;;;-1:-1:-1;144348:28:0;;;;:33;;;144335:46;144331:290;;;144505:53;;;:28;;;:53;144598:4;;-1:-1:-1;144331:290:0;-1:-1:-1;143577:3:0;;;:::i;:::-;;;143545:1100;;;;143494:1157;143267:1384;;;;;;;:::o;42643:139::-;42713:7;42739:36;:8;42713:7;42739:12;:36::i;50584:793::-;50732:12;50756:15;50774:33;50792:14;50774:17;:33::i;:::-;50756:51;;50817:16;50836:34;50854:15;50836:17;:34::i;:::-;51132:16;;;51146:1;51132:16;;;;;;;;;50817:53;;-1:-1:-1;50968:22:0;50989:1;50968:22;;;;50967:37;;;;;50948:16;;51132;;;;;;;;;;-1:-1:-1;51132:16:0;51104:44;;51172:9;51158:8;51167:1;51158:11;;;;;;;;:::i;:::-;-1:-1:-1;;51158:23:0;;;:11;;;;;;;;;;:23;51205:27;;:44;;:27;;51222:9;;51205:27;13991:3:1;13987:16;;;;14005:66;13983:89;13971:102;;14098:1;14089:11;;13844:262;51205:27:0;;;;;;;;;;;;;:42;:44::i;:::-;51191:8;51200:1;51191:11;;;;;;;;:::i;:::-;;;;;;:58;;;;;;;;;;;;;51273:14;51259:8;51268:1;51259:11;;;;;;;;:::i;:::-;;;;;;:28;;;;;;;;;;;;;51311:15;51297:8;51306:1;51297:11;;;;;;;;:::i;:::-;-1:-1:-1;;51297:29:0;;;:11;;;;;;;;;;;:29;51343:27;51361:8;51343:17;:27::i;:::-;51336:34;50584:793;-1:-1:-1;;;;;;;;50584:793:0:o;81777:404::-;81840:4;83914:19;;;:12;;;:19;;;;;;81856:319;;-1:-1:-1;81898:23:0;;;;;;;;:11;:23;;;;;;;;;;;;;82078:18;;82056:19;;;:12;;;:19;;;;;;:40;;;;82110:11;;81856:319;-1:-1:-1;82159:5:0;82152:12;;82349:1388;82415:4;82552:19;;;:12;;;:19;;;;;;82586:15;;82582:1149;;82955:21;82979:14;82992:1;82979:10;:14;:::i;:::-;83027:18;;82955:38;;-1:-1:-1;83007:17:0;;83027:22;;83048:1;;83027:22;:::i;:::-;83007:42;;83081:13;83068:9;:26;83064:398;;83114:17;83134:3;:11;;83146:9;83134:22;;;;;;;;:::i;:::-;;;;;;;;;83114:42;;83285:9;83256:3;:11;;83268:13;83256:26;;;;;;;;:::i;:::-;;;;;;;;;;;;:38;;;;83368:23;;;:12;;;:23;;;;;:36;;;83064:398;83540:17;;:3;;:17;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;83632:3;:12;;:19;83645:5;83632:19;;;;;;;;;;;83625:26;;;83673:4;83666:11;;;;;;;82582:1149;83715:5;83708:12;;;;;13632:615;13743:15;;13785:11;13792:4;13785;:11;:::i;:::-;13770:26;;14064:4;14058:11;14052:4;14049:21;14046:66;;;-1:-1:-1;14097:1:0;14046:66;14135:4;14143:1;14135:9;14131:51;;-1:-1:-1;;14160:11:0;;;;;14131:51;3031:2;12798:33;;;12936:17;;12922:32;;13059:17;;3119:2;13043:34;14201:39;12157:936;60265:487;60352:15;;;60470:57;-1:-1:-1;;60470:15:0;;48256:2;60523:1;60470:15;:57::i;:::-;60614:20;60633:1;60614:20;;;;;;60722:22;;;-1:-1:-1;60265:487:0;-1:-1:-1;;;60265:487:0:o;10137:578::-;10215:7;10239:26;10246:7;10255:9;10239:6;:26::i;:::-;10234:451;;10284:9;10297:35;10315:15;10322:7;10315:6;:15::i;:::-;10307:24;;10297:9;:35::i;:::-;10281:51;;;10349:9;10362:29;10380:9;10372:18;;10362:9;:29::i;:::-;10449:186;;14478:31:1;10449:186:0;;;14466:44:1;14529:66;14633:3;14629:16;;;14625:25;;14611:12;;;14604:47;14681:15;14667:12;;;14660:37;14731:16;;;14727:25;14713:12;;;14706:47;10346:45:0;;-1:-1:-1;10405:17:0;;-1:-1:-1;14769:12:1;;10449:186:0;;;;;;;;;;;;10405:244;;10670:3;10663:11;;-1:-1:-1;;;10663:11:0;;;;;;;;:::i;10234:451::-;-1:-1:-1;10701:7:0;;10137:578;-1:-1:-1;10137:578:0:o;19209:399::-;19348:7;19367:12;19382;19386:7;19382:3;:12::i;:::-;19367:27;;;;19478:12;19482:7;19478:3;:12::i;:::-;19471:4;19455:13;19462:6;19455:4;:13;:::i;:::-;:20;;;;:::i;:::-;:35;19451:77;;;-1:-1:-1;;19506:11:0;;;;;19451:77;19545:13;19552:6;19545:4;:13;:::i;:::-;19538:20;;19575:26;19581:7;19575:26;;19590:4;19596;19575:5;:26::i;25392:290::-;25448:14;25474:12;25489;25493:7;25489:3;:12::i;:::-;25474:27;;;;25511:12;25526;25530:7;3119:2;18555:23;3512:16;18551:41;;18035:573;25526:12;25511:27;;25645:21;;;;25392:290;-1:-1:-1;;;25392:290:0:o;73532:339::-;73643:14;40397:2;3512:16;3119:2;18555:23;;;18551:41;43185:31;73673:56;;;;-1:-1:-1;;;73673:56:0;;15603:2:1;73673:56:0;;;15585:21:1;15642:2;15622:18;;;15615:30;15681:17;15661:18;;;15654:45;15716:18;;73673:56:0;15401:339:1;73673:56:0;73740:9;;;73773:22;-1:-1:-1;;73773:20:0;;;:22::i;:::-;73739:56;;;;;;73814:50;73836:7;73860:1;73848;73854;73814:13;:50::i;23838:374::-;23957:14;24188:11;24193:6;24188:2;:11;:::i;:::-;24187:17;;24203:1;24187:17;:::i;:::-;24143:62;;24151:30;24157:7;24166:6;24174;24151:5;:30::i;:::-;24143:62;;;23838:374;-1:-1:-1;;;;23838:374:0:o;22602:890::-;22717:14;22747:6;:11;;22757:1;22747:11;22743:59;;-1:-1:-1;22789:1:0;22774:17;;22743:59;22833:12;22837:7;3119:2;18555:23;3512:16;18551:41;;18035:573;22833:12;22815:30;;:15;;;;:6;:15;:::i;:::-;:30;22811:137;;;22868:68;22884:12;22888:7;22884:3;:12::i;:::-;22868:68;;22898:12;22902:7;3119:2;18555:23;3512:16;18551:41;;18035:573;22898:12;22868:68;;22912:6;22928;22920:15;;22868;:68::i;:::-;22861:76;;-1:-1:-1;;;22861:76:0;;;;;;;;:::i;22811:137::-;22975:2;22965:6;:12;;;;22957:50;;;;-1:-1:-1;;;22957:50:0;;16333:2:1;22957:50:0;;;16315:21:1;16372:2;16352:18;;;16345:30;16411:27;16391:18;;;16384:55;16456:18;;22957:50:0;16131:349:1;22957:50:0;23088:1;23079:10;;23018:15;23124:12;23128:7;23124:3;:12::i;:::-;23109:27;;;-1:-1:-1;23202:13:0;7378:66;7348:12;;;7327:131;23450:17;;;;23444:24;23440:36;;;-1:-1:-1;;;;;22602:890:0:o;144893:1973::-;145055:22;;145109:34;-1:-1:-1;;145109:32:0;;;:34::i;:::-;145089:54;-1:-1:-1;145153:12:0;145168:32;-1:-1:-1;;145168:30:0;;;:32::i;:::-;145153:47;;145273:37;145291:10;145303:6;145273:17;:37::i;:::-;145264:46;;:5;:46;;;145260:60;;145319:1;145312:8;;;;;;145260:60;145388:17;145422:8;:135;;145512:45;-1:-1:-1;;145512:32:0;;145545:11;145512:32;:45::i;:::-;145422:135;;;145449:44;-1:-1:-1;;145449:31:0;;145481:11;145449:31;:44::i;:::-;145388:179;;145630:16;145649:27;:9;;;;;;;;;;;;:25;:27::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;145630:46:0;;-1:-1:-1;145815:17:0;-1:-1:-1;;145815:15:0;;;:17::i;:::-;145776:56;;145801:10;;;145776:56;145789:10;;;145776:56;;;145842:27;;;:16;;;:27;145921:37;145947:10;54042:25;54065:2;54042:25;;;;;;54129:38;;;53843:332;145921:37;145879:79;;;;145897:20;;;145879:79;;;;;;145880:15;;;145879:79;;;145968:22;;;:14;;;:22;;;146000:15;:30;;;;;;;;-1:-1:-1;146000:30:0;;;;;;;;;;;;;;;;-1:-1:-1;146000:30:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;146182:22;146215:27;;;;;:15;:27;;;;;:35;;;;;;;;;;:56;;;;;;;;;;;;146157:48;;;;146215:56;;;;;146157:48;;-1:-1:-1;146487:223:0;146542:34;-1:-1:-1;;146542:32:0;;;:34::i;:::-;146606:8;:31;;146629:8;146606:31;;;146617:9;146606:31;146668:8;:31;;146690:9;50351:17;:220::i;146668:31::-;146679:8;146487:29;:223::i;:::-;146455:255;-1:-1:-1;146822:18:0;146839:1;146822:14;:18;:::i;:::-;146805:54;146842:16;146805:54;;;;;;:::i;:::-;;;;;;;;145079:1787;;;;;;144893:1973;;;;;;:::o;60976:382::-;61044:12;3119:2;18555:23;;;3512:16;18551:41;61044:12;61128:36;40397:2;18551:41;61128:36;:::i;:::-;61110:54;-1:-1:-1;61223:6:0;61182:37;40397:2;61110:54;61182:37;:::i;:::-;:47;61174:77;;;;-1:-1:-1;;;61174:77:0;;16966:2:1;61174:77:0;;;16948:21:1;17005:2;16985:18;;;16978:30;17044:19;17024:18;;;17017:47;17081:18;;61174:77:0;16764:341:1;61174:77:0;61279:15;61269:25;;61261:57;;;;-1:-1:-1;;;61261:57:0;;17312:2:1;61261:57:0;;;17294:21:1;17351:2;17331:18;;;17324:30;17390:21;17370:18;;;17363:49;17429:18;;61261:57:0;17110:343:1;34752:780:0;34965:4;34959:11;34816:16;;34844:11;35081:32;35092:8;35108:4;35102:10;;35081;:32::i;:::-;35070:43;;35133:16;35152:13;35156:8;3119:2;18555:23;3512:16;18551:41;;18035:573;35152:13;35133:32;;;;35175:18;35196:19;35206:8;35196:9;:19::i;:::-;35345:21;;;-1:-1:-1;35465:20:0;;35487:4;35461:31;35455:4;35448:45;-1:-1:-1;35352:3:0;34752:780;-1:-1:-1;;34752:780:0:o;9707:132::-;9781:4;9823:9;9804:28;;:15;9811:7;9804:6;:15::i;:::-;:28;;;;9707:132;-1:-1:-1;;;9707:132:0:o;15431:504::-;15487:12;;3031:2;3303:20;3031:2;3119;3303:20;:::i;:::-;3383;;;;:::i;:::-;15895:24;;;;;15431:504;-1:-1:-1;;15431:504:0:o;4722:667::-;4776:13;;4832:2;4817:258;4840:2;4836:1;:6;;;4817:258;;;4860:11;4887:5;:1;4891;4887:5;:::i;:::-;4880:13;;:2;:13;;4860:34;;4917:14;4925:5;4917:7;:14::i;:::-;4908:23;;;;;;4949:1;:7;;4954:2;4949:7;4945:58;;4986:2;4976:12;;;;;4945:58;-1:-1:-1;5044:6:0;;4817:258;;;-1:-1:-1;5138:2:0;5123:260;5146:3;5142:1;:7;;;5123:260;;;5167:11;5194:5;:1;5198;5194:5;:::i;:::-;5187:13;;:2;:13;;5167:34;;5225:14;5233:5;5225:7;:14::i;:::-;5215:24;;;;;;5257:1;:6;;5262:1;5257:6;5253:58;;5294:2;5283:13;;;;;5253:58;-1:-1:-1;5352:6:0;;5123:260;;;;4722:667;;;:::o;16598:573::-;16651:11;;3303:20;3074:2;3119;3303:20;:::i;:::-;17118:23;;;;3512:16;17114:41;;16598:573;-1:-1:-1;;16598:573:0:o;18782:147::-;18835:7;18900:12;18904:7;3119:2;18555:23;3512:16;18551:41;;18035:573;18900:12;18885;18889:7;18885:3;:12::i;:::-;:27;18878:34;;;;18782:147;;;:::o;46744:400::-;46882:9;;;46821:5;36922:16;41565:23;-1:-1:-1;;41565:16:0;;36922;41565;:23::i;:::-;-1:-1:-1;46964:45:0::1;-1:-1:-1::0;;46964:11:0;::::1;40442:1;47004:2;46964:11;:45::i;:::-;46960:49:::0;-1:-1:-1;47023:45:0::1;-1:-1:-1::0;;47023:11:0;::::1;40486:2;::::0;47023:11:::1;:45::i;:::-;47019:49:::0;-1:-1:-1;47088:48:0::1;-1:-1:-1::0;;47088:15:0;::::1;40531:2;47132:1;47088:15;:48::i;:::-;46744:400:::0;;;;-1:-1:-1;;;;46744:400:0:o;70240:270::-;70363:7;70383:17;70402:18;70424:25;70435:4;70441:1;70444;70447;70424:10;:25::i;:::-;70382:67;;;;70459:18;70471:5;70459:11;:18::i;:::-;-1:-1:-1;70494:9:0;70240:270;-1:-1:-1;;;;;70240:270:0:o;21359:741::-;21505:17;21537:9;21550:15;21560:4;21550:9;:15::i;:::-;21534:31;;;21578:9;21591:15;21601:4;21591:9;:15::i;:::-;21575:31;;;21619:9;21632:17;21642:6;21632:9;:17::i;:::-;21616:33;;;21662:9;21675:17;21685:6;21675:9;:17::i;:::-;21728:355;;;18299:34:1;21728:355:0;;;18287:47:1;18364:23;18350:12;;;18343:45;18407:66;18511:3;18507:16;;;18503:25;;18489:12;;;18482:47;18548:17;18581:12;;;18574:24;;;18632:16;;;18628:25;;18614:12;;;18607:47;18684:34;18670:12;;;18663:56;18750:3;18735:13;;;18728:26;18789:16;;;18785:25;;18770:13;;;18763:48;18827:13;;;18820:25;;;;18880:16;;18876:25;;;18861:13;;;18854:48;-1:-1:-1;;17535:3:1;18948:13;;;17523:16;21728:355:0;;;;;;;;;17555:11:1;;;;21728:355:0;;;;;-1:-1:-1;;;;;21359:741:0:o;56041:179::-;56127:6;56111:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;-1:-1:-1;56159:53:0::1;-1:-1:-1::0;;56159:15:0;::::1;48047:1;56208;56159:15;:53::i;55748:176::-:0;55832:6;55816:5;49009:42;-1:-1:-1;;49009:16:0;;37661;49009;:42::i;:::-;-1:-1:-1;55864:52:0::1;-1:-1:-1::0;;55864:15:0;::::1;48149:1;55912;55864:15;:52::i;42885:140::-:0;42956:7;42982:36;:8;36922:16;42982:12;:36::i;32754:782::-;32866:18;33004:4;32998:11;33091:9;33086:3;33083:18;33080:96;;;33133:4;33127;33120:18;33080:96;;33196:15;33230:9;33225:239;33249:8;:15;33245:1;:19;33225:239;;;33285:15;33303:8;33312:1;33303:11;;;;;;;;:::i;:::-;;;;;;;33285:29;;33356:42;33369:7;33390;33378:9;:19;33356:12;:42::i;:::-;;33427:12;33431:7;3119:2;18555:23;3512:16;18551:41;;18035:573;33427:12;33416:23;;;;;;33271:193;33266:3;;;;;:::i;:::-;;;;33225:239;;;-1:-1:-1;3031:2:0;12922:32;;;13059:17;;3119:2;13043:34;33486:43;12157:936;17758:111;17817:7;17843:14;17849:7;17843:5;:14::i;:::-;:19;;17860:2;17843:19;:::i;4199:199::-;4249:14;4286:18;4302:1;4296:2;:7;;;;4286:9;:18::i;:::-;4275:29;;4328:13;;;;;;4340:1;4328:13;4362;4372:2;4362:9;:13::i;:::-;4351:24;;;;4199:199;-1:-1:-1;4199:199:0:o;68504:1603::-;68630:7;;69554:66;69541:79;;69537:161;;;-1:-1:-1;69652:1:0;;-1:-1:-1;69656:30:0;69636:51;;69537:161;69711:1;:7;;69716:2;69711:7;;:18;;;;;69722:1;:7;;69727:2;69722:7;;69711:18;69707:100;;;-1:-1:-1;69761:1:0;;-1:-1:-1;69765:30:0;69745:51;;69707:100;69918:24;;;69901:14;69918:24;;;;;;;;;19200:25:1;;;19273:4;19261:17;;19241:18;;;19234:45;;;;19295:18;;;19288:34;;;19338:18;;;19331:34;;;69918:24:0;;19172:19:1;;69918:24:0;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;69918:24:0;;;;;;-1:-1:-1;;69956:20:0;;;69952:101;;70008:1;70012:29;69992:50;;;;;;;69952:101;70071:6;-1:-1:-1;70079:20:0;;-1:-1:-1;68504:1603:0;;;;;;;;:::o;63885:631::-;63962:20;63953:5;:29;;;;;;;;:::i;:::-;;63949:561;;63885:631;:::o;63949:561::-;64058:29;64049:5;:38;;;;;;;;:::i;:::-;;64045:465;;64103:34;;-1:-1:-1;;;64103:34:0;;19767:2:1;64103:34:0;;;19749:21:1;19806:2;19786:18;;;19779:30;19845:26;19825:18;;;19818:54;19889:18;;64103:34:0;19565:348:1;64045:465:0;64167:35;64158:5;:44;;;;;;;;:::i;:::-;;64154:356;;64218:41;;-1:-1:-1;;;64218:41:0;;20120:2:1;64218:41:0;;;20102:21:1;20159:2;20139:18;;;20132:30;20198:33;20178:18;;;20171:61;20249:18;;64218:41:0;19918:355:1;64154:356:0;64289:30;64280:5;:39;;;;;;;;:::i;:::-;;64276:234;;64335:44;;-1:-1:-1;;;64335:44:0;;20480:2:1;64335:44:0;;;20462:21:1;20519:2;20499:18;;;20492:30;20558:34;20538:18;;;20531:62;20629:4;20609:18;;;20602:32;20651:19;;64335:44:0;20278:398:1;64276:234:0;64409:30;64400:5;:39;;;;;;;;:::i;:::-;;64396:114;;64455:44;;-1:-1:-1;;;64455:44:0;;20883:2:1;64455:44:0;;;20865:21:1;20922:2;20902:18;;;20895:30;20961:34;20941:18;;;20934:62;21032:4;21012:18;;;21005:32;21054:19;;64455:44:0;20681:398:1;30311:892:0;30389:15;-1:-1:-1;;7904:15:0;;;;30416:55;;;;-1:-1:-1;;;30416:55:0;;21286:2:1;30416:55:0;;;21268:21:1;21325:2;21305:18;;;21298:30;21364:28;21344:18;;;21337:56;21410:18;;30416:55:0;21084:350:1;30416:55:0;30489:16;30497:7;30489;:16::i;:::-;30481:58;;;;-1:-1:-1;;;30481:58:0;;21641:2:1;30481:58:0;;;21623:21:1;21680:2;21660:18;;;21653:30;21719:31;21699:18;;;21692:59;21768:18;;30481:58:0;21439:353:1;30481:58:0;30549:12;30564;30568:7;3119:2;18555:23;3512:16;18551:41;;18035:573;30564:12;30549:27;;;;30586:15;30604:12;30608:7;30604:3;:12::i;:::-;30586:30;;;;30627:11;30648:8;30766:4;30760:11;30753:18;;30853:7;30848:3;30845:16;30842:94;;;30893:4;30887;30880:18;30842:94;31063:4;31054:7;31048:4;31039:7;31033:4;31026:5;31015:53;31008:60;;31095:3;31087:36;;;;-1:-1:-1;;;31087:36:0;;21999:2:1;31087:36:0;;;21981:21:1;22038:2;22018:18;;;22011:30;22077:22;22057:18;;;22050:50;22117:18;;31087:36:0;21797:344:1;31087:36:0;31144:52;31165:15;31172:7;31165:6;:15::i;:::-;12798:33;3031:2;12798:33;;;;12936:17;;12922:32;;13059:17;;3119:2;13043:34;;12157:936;17377:162;17432:7;17530:2;17508:12;17512:7;3119:2;18555:23;3512:16;18551:41;;18035:573;17508:12;17500:26;;:21;;17524:2;17500:26;:::i;:::-;17499:33;;;;:::i;3824:203::-;3997:13;;;;;;;;;;;;;;;;;;3879:11;;3926:4;3918:12;;;;;3997:22;;;;;;:::i;:::-;;;;;;;;3824:203;-1:-1:-1;;;3824:203:0:o;8577:465::-;8634:8;8658:15;8665:7;8658:6;:15::i;:::-;:31;;8677:12;8658:31;8654:74;;-1:-1:-1;8712:5:0;;8577:465;-1:-1:-1;8577:465:0:o;8654:74::-;8737:12;8752;8756:7;8752:3;:12::i;:::-;9019:4;9013:11;-1:-1:-1;9000:26:0;;8577:465;-1:-1:-1;;;8577:465:0:o;14:180:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;199:481::-;240:3;278:5;272:12;305:6;300:3;293:19;330:1;340:162;354:6;351:1;348:13;340:162;;;416:4;472:13;;;468:22;;462:29;444:11;;;440:20;;433:59;369:12;340:162;;;344:3;547:1;540:4;531:6;526:3;522:16;518:27;511:38;669:4;599:66;594:2;586:6;582:15;578:88;573:3;569:98;565:109;558:116;;;199:481;;;;:::o;685:217::-;832:2;821:9;814:21;795:4;852:44;892:2;881:9;877:18;869:6;852:44;:::i;907:163::-;974:20;;1034:10;1023:22;;1013:33;;1003:61;;1060:1;1057;1050:12;1075:328;1149:6;1157;1165;1218:2;1206:9;1197:7;1193:23;1189:32;1186:52;;;1234:1;1231;1224:12;1186:52;1257:28;1275:9;1257:28;:::i;:::-;1247:38;;1304:37;1337:2;1326:9;1322:18;1304:37;:::i;:::-;1294:47;;1360:37;1393:2;1382:9;1378:18;1360:37;:::i;:::-;1350:47;;1075:328;;;;;:::o;1408:196::-;1476:20;;1536:42;1525:54;;1515:65;;1505:93;;1594:1;1591;1584:12;1609:258;1676:6;1684;1737:2;1725:9;1716:7;1712:23;1708:32;1705:52;;;1753:1;1750;1743:12;1705:52;1776:28;1794:9;1776:28;:::i;:::-;1766:38;;1823;1857:2;1846:9;1842:18;1823:38;:::i;:::-;1813:48;;1609:258;;;;;:::o;2261:252::-;2328:6;2336;2389:2;2377:9;2368:7;2364:23;2360:32;2357:52;;;2405:1;2402;2395:12;2357:52;2428:28;2446:9;2428:28;:::i;:::-;2418:38;2503:2;2488:18;;;;2475:32;;-1:-1:-1;;;2261:252:1:o;2749:399::-;2833:6;2841;2849;2857;2910:3;2898:9;2889:7;2885:23;2881:33;2878:53;;;2927:1;2924;2917:12;2878:53;2950:28;2968:9;2950:28;:::i;:::-;2940:38;;2997:37;3030:2;3019:9;3015:18;2997:37;:::i;:::-;2987:47;;3053:38;3087:2;3076:9;3072:18;3053:38;:::i;:::-;2749:399;;;;-1:-1:-1;3043:48:1;;3138:2;3123:18;3110:32;;-1:-1:-1;;2749:399:1:o;3153:184::-;3211:6;3264:2;3252:9;3243:7;3239:23;3235:32;3232:52;;;3280:1;3277;3270:12;3232:52;3303:28;3321:9;3303:28;:::i;3524:330::-;3599:6;3607;3615;3668:2;3656:9;3647:7;3643:23;3639:32;3636:52;;;3684:1;3681;3674:12;3636:52;3707:28;3725:9;3707:28;:::i;:::-;3697:38;;3754:37;3787:2;3776:9;3772:18;3754:37;:::i;:::-;3744:47;;3810:38;3844:2;3833:9;3829:18;3810:38;:::i;3859:484::-;3912:3;3950:5;3944:12;3977:6;3972:3;3965:19;4003:4;4032:2;4027:3;4023:12;4016:19;;4069:2;4062:5;4058:14;4090:1;4100:218;4114:6;4111:1;4108:13;4100:218;;;4179:13;;4194:42;4175:62;4163:75;;4258:12;;;;4293:15;;;;4136:1;4129:9;4100:218;;;-1:-1:-1;4334:3:1;;3859:484;-1:-1:-1;;;;;3859:484:1:o;4348:261::-;4527:2;4516:9;4509:21;4490:4;4547:56;4599:2;4588:9;4584:18;4576:6;4547:56;:::i;4614:186::-;4673:6;4726:2;4714:9;4705:7;4701:23;4697:32;4694:52;;;4742:1;4739;4732:12;4694:52;4765:29;4784:9;4765:29;:::i;4805:647::-;4974:2;5026:21;;;5096:13;;4999:18;;;5118:22;;;4945:4;;4974:2;5197:15;;;;5171:2;5156:18;;;4945:4;5240:186;5254:6;5251:1;5248:13;5240:186;;;5319:13;;5334:10;5315:30;5303:43;;5401:15;;;;5366:12;;;;5276:1;5269:9;5240:186;;;-1:-1:-1;5443:3:1;;4805:647;-1:-1:-1;;;;;;4805:647:1:o;5639:184::-;5691:77;5688:1;5681:88;5788:4;5785:1;5778:15;5812:4;5809:1;5802:15;5828:980;5896:6;5949:2;5937:9;5928:7;5924:23;5920:32;5917:52;;;5965:1;5962;5955:12;5917:52;6005:9;5992:23;6034:18;6075:2;6067:6;6064:14;6061:34;;;6091:1;6088;6081:12;6061:34;6129:6;6118:9;6114:22;6104:32;;6174:7;6167:4;6163:2;6159:13;6155:27;6145:55;;6196:1;6193;6186:12;6145:55;6232:2;6219:16;6254:2;6250;6247:10;6244:36;;;6260:18;;:::i;:::-;6394:2;6388:9;6456:4;6448:13;;6299:66;6444:22;;;6468:2;6440:31;6436:40;6424:53;;;6492:18;;;6512:22;;;6489:46;6486:72;;;6538:18;;:::i;:::-;6578:10;6574:2;6567:22;6613:2;6605:6;6598:18;6653:7;6648:2;6643;6639;6635:11;6631:20;6628:33;6625:53;;;6674:1;6671;6664:12;6625:53;6730:2;6725;6721;6717:11;6712:2;6704:6;6700:15;6687:46;6775:1;6753:15;;;6770:2;6749:24;6742:35;;;;-1:-1:-1;6757:6:1;5828:980;-1:-1:-1;;;;;5828:980:1:o;7154:184::-;7206:77;7203:1;7196:88;7303:4;7300:1;7293:15;7327:4;7324:1;7317:15;7343:125;7408:9;;;7429:10;;;7426:36;;;7442:18;;:::i;8176:184::-;8228:77;8225:1;8218:88;8325:4;8322:1;8315:15;8349:4;8346:1;8339:15;8715:128;8782:9;;;8803:11;;;8800:37;;;8817:18;;:::i;9454:184::-;9506:77;9503:1;9496:88;9603:4;9600:1;9593:15;9627:4;9624:1;9617:15;11333:195;11372:3;11403:66;11396:5;11393:77;11390:103;;11473:18;;:::i;:::-;-1:-1:-1;11520:1:1;11509:13;;11333:195::o;11874:625::-;12177:2;12166:9;12159:21;12140:4;12203:56;12255:2;12244:9;12240:18;12232:6;12203:56;:::i;:::-;12307:9;12299:6;12295:22;12290:2;12279:9;12275:18;12268:50;12341:44;12378:6;12370;12341:44;:::i;:::-;12327:58;;12433:9;12425:6;12421:22;12416:2;12405:9;12401:18;12394:50;12461:32;12486:6;12478;12461:32;:::i;12900:224::-;12969:58;13060:10;;;13048;;;13044:27;;13083:12;;;13080:38;;;13098:18;;:::i;13129:184::-;13181:77;13178:1;13171:88;13278:4;13275:1;13268:15;13302:4;13299:1;13292:15;13318:168;13391:9;;;13422;;13439:15;;;13433:22;;13419:37;13409:71;;13460:18;;:::i;15745:151::-;15835:4;15828:12;;;15814;;;15810:31;;15853:14;;15850:40;;;15870:18;;:::i;15901:225::-;16005:4;15984:12;;;15998;;;15980:31;16031:22;;;;16072:24;;;16062:58;;16100:18;;:::i;16485:274::-;16525:1;16551;16541:189;;16586:77;16583:1;16576:88;16687:4;16684:1;16677:15;16715:4;16712:1;16705:15;16541:189;-1:-1:-1;16744:9:1;;16485:274::o;19376:184::-;19428:77;19425:1;19418:88;19525:4;19522:1;19515:15;19549:4;19546:1;19539:15","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"guards","type":"address[]"},{"indexed":false,"internalType":"address[]","name":"notaries","type":"address[]"},{"indexed":false,"internalType":"bytes","name":"attestation","type":"bytes"}],"name":"AttestationAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"attestationIndex","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"attestation","type":"bytes"}],"name":"AttestationSaved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainDeactivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[{"internalType":"address","name":"_guard","type":"address"}],"name":"addGuard","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"address","name":"_notary","type":"address"}],"name":"addNotary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_destination","type":"uint32"},{"internalType":"address","name":"_agent","type":"address"}],"name":"agentAttestations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"allAgents","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allDomains","outputs":[{"internalType":"uint32[]","name":"domains_","type":"uint32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"amountAgents","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"amountDomains","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"uint256","name":"_agentIndex","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_destination","type":"uint32"},{"internalType":"address","name":"_agent","type":"address"},{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getAgentAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_destination","type":"uint32"},{"internalType":"uint32","name":"_nonce","type":"uint32"}],"name":"getAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_domainIndex","type":"uint256"}],"name":"getDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_destination","type":"uint32"},{"internalType":"address","name":"_agent","type":"address"}],"name":"getLatestAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_destination","type":"uint32"},{"internalType":"address","name":"_agent","type":"address"}],"name":"getLatestNonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_destination","type":"uint32"},{"internalType":"uint32","name":"_nonce","type":"uint32"}],"name":"getRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"name":"getSavedAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"address","name":"_account","type":"address"}],"name":"isActiveAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"isActiveAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"isActiveDomain","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_guard","type":"address"}],"name":"removeGuard","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"address","name":"_notary","type":"address"}],"name":"removeNotary","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"savedAttestations","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_attestation","type":"bytes"}],"name":"submitAttestation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"events":{"AgentRemoved(uint32,address)":{"notice":"Emitted when a new Agent is removed."},"AttestationAccepted(address[],address[],bytes)":{"notice":"Emitted when an attestation is submitted to AttestationHub."},"DomainActivated(uint32)":{"notice":"Emitted when the first agent is added for the domain"},"DomainDeactivated(uint32)":{"notice":"Emitted when the last agent is removed from the domain"}},"kind":"user","methods":{"agentAttestations(uint32,uint32,address)":{"notice":"Get the amount of (origin, destination) attestations saved for a given agent."},"allAgents(uint32)":{"notice":"Returns all active Agents for a given domain in an array. Note: will return the list of active Guards, if `_domain == 0`."},"allDomains()":{"notice":"Returns all domains having at least one active Notary in an array."},"amountAgents(uint32)":{"notice":"Returns the amount of active agents for the given domain. Note: will return the amount of active Guards, if `_domain == 0`."},"amountDomains()":{"notice":"Returns the amount of active domains."},"getAgent(uint32,uint256)":{"notice":"Returns i-th agent for a given domain."},"getAgentAttestation(uint32,uint32,address,uint256)":{"notice":"Get i-th (origin, destination) Attestation for a given agent. Will always contain exactly one agent signature."},"getAttestation(uint32,uint32,uint32)":{"notice":"Get Attestation for (origin, destination, nonce), if it was previously saved. Will contain at least one agent signature. Will contain a single guard signature, if it was previously saved. Will contain a single notary signature, if it was previously saved."},"getDomain(uint256)":{"notice":"Returns i-th domain from the list of active domains."},"getLatestAttestation(uint32,uint32,address)":{"notice":"Get latest attestation for (origin, destination) signed by given agent."},"getLatestNonce(uint32,uint32,address)":{"notice":"Get the latest known nonce for (origin, destination) signed by the given agent."},"getRoot(uint32,uint32,uint32)":{"notice":"Get merkle root for (origin, destination, nonce), if it was previously saved."},"getSavedAttestation(uint256)":{"notice":"Get i-th saved Attestation from the global list of \"all saved agents attestations\" Will always contain exactly one agent signature."},"isActiveAgent(address)":{"notice":"Returns true if the agent is active on any domain. Note: that includes both Guards and Notaries."},"isActiveAgent(uint32,address)":{"notice":"Returns true if the agent is active on the given domain. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary."},"isActiveDomain(uint32)":{"notice":"Returns true if there is at least one active notary for the domain Note: will return false for `_domain == 0`, even if there are active Guards."},"savedAttestations()":{"notice":"Get the total amount of saved attestations."},"submitAttestation(bytes)":{"notice":"Called by the external agent. Submits the signed attestation for handling."}},"version":1},"developerDoc":{"kind":"dev","methods":{"allAgents(uint32)":{"details":"This copies storage into memory, so can consume a lof of gas, if amount of agents is large (see EnumerableSet.values())"},"allDomains()":{"details":"This always excludes the zero domain, which is used for storing the guards."},"amountDomains()":{"details":"This always excludes the zero domain, which is used for storing the guards."},"getAgent(uint32,uint256)":{"details":"Will revert if index is out of range. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary."},"getDomain(uint256)":{"details":"Will revert if index is out of range. Note: this never returns the zero domain, which is used for storing the guards."},"getLatestNonce(uint32,uint32,address)":{"details":"Will return 0, if an agent hasn't submitted a single attestation yet."},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"submitAttestation(bytes)":{"details":"Reverts if either of this is true:      - Attestation payload is not properly formatted.      - Attestation signer is not a Notary.","params":{"_attestation":"Payload with Attestation data and signature (see Attestation.sol)"},"returns":{"_0":"TRUE if Attestation was handled correctly."}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"agentSigIndexes":{"details":"signatureIndex is the position of agent signature in `savedSignatures` list plus 1. The default value of 0 indicates that signature is not in `savedSignatures`. Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature). attDomains = (origin, destination) agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])"},"savedSignatures":{"details":"We save an signature only if the latest saved signature for that agent precedes the new one, i.e. has a lower nonce."},"signedRoots":{"details":"At the moment, we only save one merkle root per (origin, destination, nonce) tuple. Every conflicting root is discarded. attKey = (origin, destination, nonce) signedRoots: attKey =\u003e (root with signatures)"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"guards\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"notaries\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"AttestationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attestationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"AttestationSaved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainDeactivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guard\",\"type\":\"address\"}],\"name\":\"addGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_notary\",\"type\":\"address\"}],\"name\":\"addNotary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"agentAttestations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"allAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDomains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"domains_\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"amountAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountDomains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_agentIndex\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getAgentAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"}],\"name\":\"getAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domainIndex\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"getLatestAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"getLatestNonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_destination\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"}],\"name\":\"getRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getSavedAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"isActiveDomain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guard\",\"type\":\"address\"}],\"name\":\"removeGuard\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_notary\",\"type\":\"address\"}],\"name\":\"removeNotary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savedAttestations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_attestation\",\"type\":\"bytes\"}],\"name\":\"submitAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allAgents(uint32)\":{\"details\":\"This copies storage into memory, so can consume a lof of gas, if amount of agents is large (see EnumerableSet.values())\"},\"allDomains()\":{\"details\":\"This always excludes the zero domain, which is used for storing the guards.\"},\"amountDomains()\":{\"details\":\"This always excludes the zero domain, which is used for storing the guards.\"},\"getAgent(uint32,uint256)\":{\"details\":\"Will revert if index is out of range. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\"},\"getDomain(uint256)\":{\"details\":\"Will revert if index is out of range. Note: this never returns the zero domain, which is used for storing the guards.\"},\"getLatestNonce(uint32,uint32,address)\":{\"details\":\"Will return 0, if an agent hasn't submitted a single attestation yet.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"submitAttestation(bytes)\":{\"details\":\"Reverts if either of this is true:      - Attestation payload is not properly formatted.      - Attestation signer is not a Notary.\",\"params\":{\"_attestation\":\"Payload with Attestation data and signature (see Attestation.sol)\"},\"returns\":{\"_0\":\"TRUE if Attestation was handled correctly.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"agentSigIndexes\":{\"details\":\"signatureIndex is the position of agent signature in `savedSignatures` list plus 1. The default value of 0 indicates that signature is not in `savedSignatures`. Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature). attDomains = (origin, destination) agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\"},\"savedSignatures\":{\"details\":\"We save an signature only if the latest saved signature for that agent precedes the new one, i.e. has a lower nonce.\"},\"signedRoots\":{\"details\":\"At the moment, we only save one merkle root per (origin, destination, nonce) tuple. Every conflicting root is discarded. attKey = (origin, destination, nonce) signedRoots: attKey =\u003e (root with signatures)\"}},\"version\":1},\"userdoc\":{\"events\":{\"AgentRemoved(uint32,address)\":{\"notice\":\"Emitted when a new Agent is removed.\"},\"AttestationAccepted(address[],address[],bytes)\":{\"notice\":\"Emitted when an attestation is submitted to AttestationHub.\"},\"DomainActivated(uint32)\":{\"notice\":\"Emitted when the first agent is added for the domain\"},\"DomainDeactivated(uint32)\":{\"notice\":\"Emitted when the last agent is removed from the domain\"}},\"kind\":\"user\",\"methods\":{\"agentAttestations(uint32,uint32,address)\":{\"notice\":\"Get the amount of (origin, destination) attestations saved for a given agent.\"},\"allAgents(uint32)\":{\"notice\":\"Returns all active Agents for a given domain in an array. Note: will return the list of active Guards, if `_domain == 0`.\"},\"allDomains()\":{\"notice\":\"Returns all domains having at least one active Notary in an array.\"},\"amountAgents(uint32)\":{\"notice\":\"Returns the amount of active agents for the given domain. Note: will return the amount of active Guards, if `_domain == 0`.\"},\"amountDomains()\":{\"notice\":\"Returns the amount of active domains.\"},\"getAgent(uint32,uint256)\":{\"notice\":\"Returns i-th agent for a given domain.\"},\"getAgentAttestation(uint32,uint32,address,uint256)\":{\"notice\":\"Get i-th (origin, destination) Attestation for a given agent. Will always contain exactly one agent signature.\"},\"getAttestation(uint32,uint32,uint32)\":{\"notice\":\"Get Attestation for (origin, destination, nonce), if it was previously saved. Will contain at least one agent signature. Will contain a single guard signature, if it was previously saved. Will contain a single notary signature, if it was previously saved.\"},\"getDomain(uint256)\":{\"notice\":\"Returns i-th domain from the list of active domains.\"},\"getLatestAttestation(uint32,uint32,address)\":{\"notice\":\"Get latest attestation for (origin, destination) signed by given agent.\"},\"getLatestNonce(uint32,uint32,address)\":{\"notice\":\"Get the latest known nonce for (origin, destination) signed by the given agent.\"},\"getRoot(uint32,uint32,uint32)\":{\"notice\":\"Get merkle root for (origin, destination, nonce), if it was previously saved.\"},\"getSavedAttestation(uint256)\":{\"notice\":\"Get i-th saved Attestation from the global list of \\\"all saved agents attestations\\\" Will always contain exactly one agent signature.\"},\"isActiveAgent(address)\":{\"notice\":\"Returns true if the agent is active on any domain. Note: that includes both Guards and Notaries.\"},\"isActiveAgent(uint32,address)\":{\"notice\":\"Returns true if the agent is active on the given domain. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\"},\"isActiveDomain(uint32)\":{\"notice\":\"Returns true if there is at least one active notary for the domain Note: will return false for `_domain == 0`, even if there are active Guards.\"},\"savedAttestations()\":{\"notice\":\"Get the total amount of saved attestations.\"},\"submitAttestation(bytes)\":{\"notice\":\"Called by the external agent. Submits the signed attestation for handling.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AttestationCollector\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{"addGuard(address)":"6913a63c","addNotary(uint32,address)":"2af678b0","agentAttestations(uint32,uint32,address)":"9a47423c","allAgents(uint32)":"64ecb518","allDomains()":"6f225878","amountAgents(uint32)":"32254098","amountDomains()":"61b0b357","getAgent(uint32,uint256)":"1d82873b","getAgentAttestation(uint32,uint32,address,uint256)":"2dfbe02c","getAttestation(uint32,uint32,uint32)":"08f4c9a9","getDomain(uint256)":"1a7a98e2","getLatestAttestation(uint32,uint32,address)":"646674ab","getLatestNonce(uint32,uint32,address)":"6ba4d1d4","getRoot(uint32,uint32,uint32)":"7f9d6d2e","getSavedAttestation(uint256)":"038037a7","initialize()":"8129fc1c","isActiveAgent(address)":"65e1e466","isActiveAgent(uint32,address)":"0958117d","isActiveDomain(uint32)":"4f5dbc0d","owner()":"8da5cb5b","removeGuard(address)":"b6235016","removeNotary(uint32,address)":"4b82bad7","renounceOwnership()":"715018a6","savedAttestations()":"71e2db77","submitAttestation(bytes)":"f646a512","transferOwnership(address)":"f2fde38b"}},"solidity/AttestationCollector.sol:AttestationCollectorEvents":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint256","name":"attestationIndex","type":"uint256"},{"indexed":false,"internalType":"bytes","name":"attestation","type":"bytes"}],"name":"AttestationSaved","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"attestationIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"AttestationSaved\",\"type\":\"event\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AttestationCollectorEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:AttestationHub":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"account","type":"address"}],"name":"AgentRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"guards","type":"address[]"},{"indexed":false,"internalType":"address[]","name":"notaries","type":"address[]"},{"indexed":false,"internalType":"bytes","name":"attestation","type":"bytes"}],"name":"AttestationAccepted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"}],"name":"DomainDeactivated","type":"event"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"allAgents","outputs":[{"internalType":"address[]","name":"","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allDomains","outputs":[{"internalType":"uint32[]","name":"domains_","type":"uint32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"amountAgents","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"amountDomains","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"uint256","name":"_agentIndex","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_domainIndex","type":"uint256"}],"name":"getDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"},{"internalType":"address","name":"_account","type":"address"}],"name":"isActiveAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_account","type":"address"}],"name":"isActiveAgent","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_domain","type":"uint32"}],"name":"isActiveDomain","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_attestation","type":"bytes"}],"name":"submitAttestation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"events":{"AgentRemoved(uint32,address)":{"notice":"Emitted when a new Agent is removed."},"AttestationAccepted(address[],address[],bytes)":{"notice":"Emitted when an attestation is submitted to AttestationHub."},"DomainActivated(uint32)":{"notice":"Emitted when the first agent is added for the domain"},"DomainDeactivated(uint32)":{"notice":"Emitted when the last agent is removed from the domain"}},"kind":"user","methods":{"allAgents(uint32)":{"notice":"Returns all active Agents for a given domain in an array. Note: will return the list of active Guards, if `_domain == 0`."},"allDomains()":{"notice":"Returns all domains having at least one active Notary in an array."},"amountAgents(uint32)":{"notice":"Returns the amount of active agents for the given domain. Note: will return the amount of active Guards, if `_domain == 0`."},"amountDomains()":{"notice":"Returns the amount of active domains."},"getAgent(uint32,uint256)":{"notice":"Returns i-th agent for a given domain."},"getDomain(uint256)":{"notice":"Returns i-th domain from the list of active domains."},"isActiveAgent(address)":{"notice":"Returns true if the agent is active on any domain. Note: that includes both Guards and Notaries."},"isActiveAgent(uint32,address)":{"notice":"Returns true if the agent is active on the given domain. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary."},"isActiveDomain(uint32)":{"notice":"Returns true if there is at least one active notary for the domain Note: will return false for `_domain == 0`, even if there are active Guards."},"submitAttestation(bytes)":{"notice":"Called by the external agent. Submits the signed attestation for handling."}},"version":1},"developerDoc":{"kind":"dev","methods":{"allAgents(uint32)":{"details":"This copies storage into memory, so can consume a lof of gas, if amount of agents is large (see EnumerableSet.values())"},"allDomains()":{"details":"This always excludes the zero domain, which is used for storing the guards."},"amountDomains()":{"details":"This always excludes the zero domain, which is used for storing the guards."},"getAgent(uint32,uint256)":{"details":"Will revert if index is out of range. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary."},"getDomain(uint256)":{"details":"Will revert if index is out of range. Note: this never returns the zero domain, which is used for storing the guards."},"submitAttestation(bytes)":{"details":"Reverts if either of this is true:      - Attestation payload is not properly formatted.      - Attestation signer is not a Notary.","params":{"_attestation":"Payload with Attestation data and signature (see Attestation.sol)"},"returns":{"_0":"TRUE if Attestation was handled correctly."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AgentRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"guards\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"notaries\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"AttestationAccepted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainActivated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"DomainDeactivated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"allAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allDomains\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"domains_\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"amountAgents\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountDomains\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"_agentIndex\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_domainIndex\",\"type\":\"uint256\"}],\"name\":\"getDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"isActiveAgent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_domain\",\"type\":\"uint32\"}],\"name\":\"isActiveDomain\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_attestation\",\"type\":\"bytes\"}],\"name\":\"submitAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allAgents(uint32)\":{\"details\":\"This copies storage into memory, so can consume a lof of gas, if amount of agents is large (see EnumerableSet.values())\"},\"allDomains()\":{\"details\":\"This always excludes the zero domain, which is used for storing the guards.\"},\"amountDomains()\":{\"details\":\"This always excludes the zero domain, which is used for storing the guards.\"},\"getAgent(uint32,uint256)\":{\"details\":\"Will revert if index is out of range. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\"},\"getDomain(uint256)\":{\"details\":\"Will revert if index is out of range. Note: this never returns the zero domain, which is used for storing the guards.\"},\"submitAttestation(bytes)\":{\"details\":\"Reverts if either of this is true:      - Attestation payload is not properly formatted.      - Attestation signer is not a Notary.\",\"params\":{\"_attestation\":\"Payload with Attestation data and signature (see Attestation.sol)\"},\"returns\":{\"_0\":\"TRUE if Attestation was handled correctly.\"}}},\"version\":1},\"userdoc\":{\"events\":{\"AgentRemoved(uint32,address)\":{\"notice\":\"Emitted when a new Agent is removed.\"},\"AttestationAccepted(address[],address[],bytes)\":{\"notice\":\"Emitted when an attestation is submitted to AttestationHub.\"},\"DomainActivated(uint32)\":{\"notice\":\"Emitted when the first agent is added for the domain\"},\"DomainDeactivated(uint32)\":{\"notice\":\"Emitted when the last agent is removed from the domain\"}},\"kind\":\"user\",\"methods\":{\"allAgents(uint32)\":{\"notice\":\"Returns all active Agents for a given domain in an array. Note: will return the list of active Guards, if `_domain == 0`.\"},\"allDomains()\":{\"notice\":\"Returns all domains having at least one active Notary in an array.\"},\"amountAgents(uint32)\":{\"notice\":\"Returns the amount of active agents for the given domain. Note: will return the amount of active Guards, if `_domain == 0`.\"},\"amountDomains()\":{\"notice\":\"Returns the amount of active domains.\"},\"getAgent(uint32,uint256)\":{\"notice\":\"Returns i-th agent for a given domain.\"},\"getDomain(uint256)\":{\"notice\":\"Returns i-th domain from the list of active domains.\"},\"isActiveAgent(address)\":{\"notice\":\"Returns true if the agent is active on any domain. Note: that includes both Guards and Notaries.\"},\"isActiveAgent(uint32,address)\":{\"notice\":\"Returns true if the agent is active on the given domain. Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\"},\"isActiveDomain(uint32)\":{\"notice\":\"Returns true if there is at least one active notary for the domain Note: will return false for `_domain == 0`, even if there are active Guards.\"},\"submitAttestation(bytes)\":{\"notice\":\"Called by the external agent. Submits the signed attestation for handling.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AttestationHub\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{"allAgents(uint32)":"64ecb518","allDomains()":"6f225878","amountAgents(uint32)":"32254098","amountDomains()":"61b0b357","getAgent(uint32,uint256)":"1d82873b","getDomain(uint256)":"1a7a98e2","isActiveAgent(address)":"65e1e466","isActiveAgent(uint32,address)":"0958117d","isActiveDomain(uint32)":"4f5dbc0d","submitAttestation(bytes)":"f646a512"}},"solidity/AttestationCollector.sol:AttestationHubEvents":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"guards","type":"address[]"},{"indexed":false,"internalType":"address[]","name":"notaries","type":"address[]"},{"indexed":false,"internalType":"bytes","name":"attestation","type":"bytes"}],"name":"AttestationAccepted","type":"event"}],"userDoc":{"events":{"AttestationAccepted(address[],address[],bytes)":{"notice":"Emitted when an attestation is submitted to AttestationHub."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"AttestationAccepted(address[],address[],bytes)":{"params":{"attestation":"Raw payload with attestation data and notary signature","guards":"Guards who signed the attestation","notaries":"Notaries who signed the attestation"}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"guards\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"notaries\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"attestation\",\"type\":\"bytes\"}],\"name\":\"AttestationAccepted\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"AttestationAccepted(address[],address[],bytes)\":{\"params\":{\"attestation\":\"Raw payload with attestation data and notary signature\",\"guards\":\"Guards who signed the attestation\",\"notaries\":\"Notaries who signed the attestation\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"AttestationAccepted(address[],address[],bytes)\":{\"notice\":\"Emitted when an attestation is submitted to AttestationHub.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"AttestationHubEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:Auth":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220622de14533b7e59bdada8330d7427586f6d325e7b91fb17466b954ef859aaaba64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220622de14533b7e59bdada8330d7427586f6d325e7b91fb17466b954ef859aaaba64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"72083:1790:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;72083:1790:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"72083:1790:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"Auth\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:ByteString":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049e0f4fd253bf962a348498a81e6ba3bc2b7e28193fe74edba4f605eb9d1bc0b64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122049e0f4fd253bf962a348498a81e6ba3bc2b7e28193fe74edba4f605eb9d1bc0b64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"39998:7148:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;39998:7148:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"39998:7148:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SELECTOR_LENGTH":{"details":"Call payload memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes"},"SIGNATURE_LENGTH":{"details":"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SELECTOR_LENGTH\":{\"details\":\"Call payload memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes\"},\"SIGNATURE_LENGTH\":{\"details\":\"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"ByteString\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:ContextUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:ECDSA":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a85ce16cbe79e27466fbe52827606401702ff791acd85caca919a5de47821f0164736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a85ce16cbe79e27466fbe52827606401702ff791acd85caca919a5de47821f0164736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"63706:8375:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;63706:8375:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"63706:8375:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"ECDSA\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:EnumerableSet":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d5b2b4631748d5f30caaedf2f85c7a9acf976b44abe18374d5e256ca61197dff64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d5b2b4631748d5f30caaedf2f85c7a9acf976b44abe18374d5e256ca61197dff64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"80892:11454:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;80892:11454:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"80892:11454:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"EnumerableSet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:Initializable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:OwnableUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/AttestationCollector.sol:Strings":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205a921836e304773b0cc51888c96a1e87379edea4dbfd699e85fe86214a24e45f64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205a921836e304773b0cc51888c96a1e87379edea4dbfd699e85fe86214a24e45f64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"61469:2235:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;61469:2235:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"61469:2235:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"Strings\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:SynapseTypes":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbf7998c4a9ecbd0e6081a1002a28bc5c3912e6f525be970c07baf18445fb49864736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cbf7998c4a9ecbd0e6081a1002a28bc5c3912e6f525be970c07baf18445fb49864736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"35536:4460:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;35536:4460:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"35536:4460:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"SynapseTypes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationCollector.sol:TypedMemView":{"code":"0x6101f061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea264697066735822122016fad9ad86472b82fe78b21bba4e4bddd758c7dfd6eaa4a44c483fb75f3e1def64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea264697066735822122016fad9ad86472b82fe78b21bba4e4bddd758c7dfd6eaa4a44c483fb75f3e1def64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\nlibrary SynapseTypes {\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          0X00: BYTE STRINGS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * 1. RAW_BYTES refers to a generic byte string, that is not supposed to be parsed\n     * by the messaging contracts. RAW_BYTES is set to uint40(0) so that\n     * the \"default zero\" type would represent a generic byte string.\n     * 2. SIGNATURE refers to 65 bytes string that is an off-chain agent signature for some data.\n     * 3. CALL_PAYLOAD refers to the payload, that is supposed to be used for an external call, i.e.\n     * recipient.call(CALL_PAYLOAD). Its length is always (4 + 32 * N) bytes:\n     *      - First 4 bytes represent the function selector.\n     *      - 32 * N bytes represent N function arguments.\n     */\n    // prettier-ignore\n    uint40 internal constant RAW_BYTES                  = 0x00_00_00_00_00;\n    // prettier-ignore\n    uint40 internal constant SIGNATURE                  = 0x00_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant CALL_PAYLOAD               = 0x00_02_00_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X01: ATTESTATION                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant ATTESTATION                = 0x01_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant ATTESTATION_DATA           = 0x01_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X02: REPORT                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant REPORT                     = 0x02_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant REPORT_DATA                = 0x02_01_01_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         0X03: MESSAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant MESSAGE                    = 0x03_01_00_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_HEADER             = 0x03_01_01_00_00;\n    // prettier-ignore\n    uint40 internal constant MESSAGE_TIPS               = 0x03_01_02_00_00;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             0X04: SYSTEM                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // prettier-ignore\n    uint40 internal constant SYSTEM_CALL                = 0x04_00_00_00_00;\n}\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Call payload memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyType(bytes29 _view, uint40 _type) {\n        _view.assertType(_type);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a raw bytes payload.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.RAW_BYTES);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a signature payload.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.SIGNATURE);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for a call payload.\n     */\n    function castToCallPayload(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.CALL_PAYLOAD);\n    }\n\n    /**\n     * @notice Checks that a byte string is a call payload, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallPayload(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Call payload should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the payload should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         CALL PAYLOAD SLICING                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the call payload.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (uint256)\n    {\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided call payload.\n    function callSelector(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return\n            _view.slice({\n                _index: OFFSET_SELECTOR,\n                _len: SELECTOR_LENGTH,\n                newType: SynapseTypes.RAW_BYTES\n            });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided call payload.\n    function argumentsPayload(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.CALL_PAYLOAD)\n        returns (bytes29)\n    {\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: SynapseTypes.RAW_BYTES });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(bytes29 _view)\n        internal\n        pure\n        onlyType(_view, SynapseTypes.SIGNATURE)\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n}\n\nlibrary Attestation {\n    using ByteString for bytes;\n\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev AttestationData memory layout\n     * [000 .. 004): origin         uint32   4 bytes\n     * [004 .. 008): destination    uint32   4 bytes\n     * [008 .. 012): nonce          uint32   4 bytes\n     * [012 .. 044): root           bytes32 32 bytes\n     *\n     *      Attestation memory layout\n     * [000 .. 044): attData        bytes   44 bytes (see above)\n     * [044 .. 045): G = guardSigs  uint8    1 byte\n     * [045 .. 046): N = notarySigs uint8    1 byte\n     * [046 .. 111): guardSig[0]    bytes   65 bytes\n     *      ..\n     * [AAA .. BBB): guardSig[G-1]  bytes   65 bytes\n     * [BBB .. CCC): notarySig[0]   bytes   65 bytes\n     *      ..\n     * [DDD .. END): notarySig[N-1] bytes   65 bytes\n     */\n\n    uint256 internal constant OFFSET_ORIGIN = 0;\n    uint256 internal constant OFFSET_DESTINATION = 4;\n    uint256 internal constant OFFSET_NONCE = 8;\n    uint256 internal constant OFFSET_ROOT = 12;\n    uint256 internal constant ATTESTATION_DATA_LENGTH = 44;\n\n    uint256 internal constant OFFSET_AGENT_SIGS = ATTESTATION_DATA_LENGTH;\n    uint256 internal constant OFFSET_FIRST_SIGNATURE = OFFSET_AGENT_SIGS + 2;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    modifier onlyAttestation(bytes29 _view) {\n        _view.assertType(SynapseTypes.ATTESTATION);\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              FORMATTERS                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields\n     * @dev `_guardSignatures` and `_notarySignatures` payloads could be empty.\n     * They have to contain exactly 65 * N bytes, otherwise the execution will be reverted.\n     * @param _data                 Attestation Data (see above)\n     * @param _guardSignatures      Payload with all Guard signatures on `_data`\n     * @param _notarySignatures     Payload with all Notary signatures on `_data`\n     * @return Formatted attestation\n     **/\n    function formatAttestation(\n        bytes memory _data,\n        bytes memory _guardSignatures,\n        bytes memory _notarySignatures\n    ) internal view returns (bytes memory) {\n        return\n            formatAttestation({\n                _dataView: _data.castToRawBytes(),\n                _guardSigsView: _guardSignatures.castToRawBytes(),\n                _notarySigsView: _notarySignatures.castToRawBytes()\n            });\n    }\n\n    function formatAttestation(\n        bytes29 _dataView,\n        bytes29 _guardSigsView,\n        bytes29 _notarySigsView\n    ) internal view returns (bytes memory) {\n        uint8 guardSigs = _amountSignatures(_guardSigsView);\n        uint8 notarySigs = _amountSignatures(_notarySigsView);\n        // Pack (guardSigs, notarySigs) into a single 16-byte value\n        uint16 agentSigs = (uint16(guardSigs) \u003c\u003c 8) | notarySigs;\n        // We need to join: `_data`, `agentSigs`, `_guardSignatures`, `_notarySignatures`\n        bytes29[] memory allViews = new bytes29[](4);\n        allViews[0] = _dataView;\n        allViews[1] = abi.encodePacked(agentSigs).castToRawBytes();\n        allViews[2] = _guardSigsView;\n        allViews[3] = _notarySigsView;\n        return TypedMemView.join(allViews);\n    }\n\n    /**\n     * @notice Returns a formatted AttestationData payload with provided fields\n     * @param _origin       Domain of Origin's chain\n     * @param _destination  Domain of Destination's chain\n     * @param _root         New merkle root\n     * @param _nonce        Nonce of the merkle root\n     * @return Formatted attestation data\n     **/\n    function formatAttestationData(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce,\n        bytes32 _root\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_origin, _destination, _nonce, _root);\n    }\n\n    /**\n     * @notice Returns a properly typed bytes29 pointer for an attestation payload.\n     */\n    function castToAttestation(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref(SynapseTypes.ATTESTATION);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Attestation payload.\n     */\n    function isAttestation(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // (attData, guardSigs, notarySigs) need to exist\n        if (length \u003c OFFSET_FIRST_SIGNATURE) return false;\n        (uint256 guardSigs, uint256 notarySigs) = _agentSignatures(_view);\n        uint256 totalSigs = guardSigs + notarySigs;\n        // There should be at least one signature\n        if (totalSigs == 0) return false;\n        // Every signature has length of exactly `ByteString.SIGNATURE_LENGTH`\n        return length == OFFSET_FIRST_SIGNATURE + totalSigs * ByteString.SIGNATURE_LENGTH;\n    }\n\n    /**\n     * @notice Combines origin and destination domains into `attestationDomains`,\n     * a unique ID for every (origin, destination) pair. Could be used to identify\n     * Merkle trees on Origin, or Mirrors on Destination.\n     */\n    function attestationDomains(uint32 _origin, uint32 _destination)\n        internal\n        pure\n        returns (uint64)\n    {\n        return (uint64(_origin) \u003c\u003c 32) | _destination;\n    }\n\n    /**\n     * @notice Combines origin, destination domains and message nonce into `attestationKey`,\n     * a unique key for every (origin, destination, nonce) tuple. Could be used to identify\n     * any dispatched message.\n     */\n    function attestationKey(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) internal pure returns (uint96) {\n        return (uint96(_origin) \u003c\u003c 64) | (uint96(_destination) \u003c\u003c 32) | _nonce;\n    }\n\n    function unpackDomains(uint64 _attestationDomains)\n        internal\n        pure\n        returns (uint32 origin, uint32 destination)\n    {\n        // Shift out lower 32 bytes\n        origin = uint32(_attestationDomains \u003e\u003e 32);\n        // Use lower 32 bytes\n        destination = uint32(_attestationDomains \u0026 type(uint32).max);\n    }\n\n    function unpackKey(uint96 _attestationKey)\n        internal\n        pure\n        returns (uint64 domains, uint32 nonce)\n    {\n        // Shift out lower 32 bytes\n        domains = uint64(_attestationKey \u003e\u003e 32);\n        // Use lower 32 bytes\n        nonce = uint32(_attestationKey \u0026 type(uint32).max);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns domain of chain where the Origin contract is deployed\n     */\n    function attestedOrigin(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns domain of chain where the Destination contract is deployed\n     */\n    function attestedDestination(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint32)\n    {\n        return uint32(_view.indexUint({ _index: OFFSET_DESTINATION, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n     */\n    function attestedNonce(bytes29 _view) internal pure onlyAttestation(_view) returns (uint32) {\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination). See `attestationDomains()`.\n     */\n    function attestedDomains(bytes29 _view) internal pure onlyAttestation(_view) returns (uint64) {\n        return uint64(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 8 }));\n    }\n\n    /**\n     * @notice Returns a combined field for (origin, destination, nonce). See `attestationKey()`.\n     */\n    function attestedKey(bytes29 _view) internal pure onlyAttestation(_view) returns (uint96) {\n        return uint96(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 12 }));\n    }\n\n    /**\n     * @notice Returns a historical Merkle root from the Origin contract\n     */\n    function attestedRoot(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes32) {\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /**\n     * @notice Returns Attestation's Data, that is going to be signed by the Notary\n     */\n    function attestationData(bytes29 _view) internal pure onlyAttestation(_view) returns (bytes29) {\n        return\n            _view.slice({\n                _index: OFFSET_ORIGIN,\n                _len: ATTESTATION_DATA_LENGTH,\n                newType: SynapseTypes.ATTESTATION_DATA\n            });\n    }\n\n    /**\n     * @notice Returns the amount of guard and notary signatures present in the Attestation.\n     */\n    function agentSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        (guardSigs, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of guard signatures present in the Attestation.\n     */\n    function guardSignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 guardSigs)\n    {\n        (guardSigs, ) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns the amount of notary signatures present in the Attestation.\n     */\n    function notarySignatures(bytes29 _view)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (uint8 notarySigs)\n    {\n        (, notarySigs) = _agentSignatures(_view);\n    }\n\n    /**\n     * @notice Returns signature of the i-th Guard on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function guardSignature(bytes29 _view, uint256 _guardIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, ) = _agentSignatures(_view);\n        require(_guardIndex \u003c guardSigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE + _guardIndex * ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /**\n     * @notice Returns signature of the i-th Notary on AttestationData,\n     * @dev Will revert if index is out of range.\n     */\n    function notarySignature(bytes29 _view, uint256 _notaryIndex)\n        internal\n        pure\n        onlyAttestation(_view)\n        returns (bytes29)\n    {\n        (uint8 guardSigs, uint8 notarySigs) = _agentSignatures(_view);\n        require(_notaryIndex \u003c notarySigs, \"Out of range\");\n        return\n            _view.slice({\n                _index: OFFSET_FIRST_SIGNATURE +\n                    (_notaryIndex + guardSigs) *\n                    ByteString.SIGNATURE_LENGTH,\n                _len: ByteString.SIGNATURE_LENGTH,\n                newType: SynapseTypes.SIGNATURE\n            });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           PRIVATE HELPERS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns the amount of guard and notary signatures present in the Attestation.\n     * Doesn't check the pointer type - to be used in functions that perform the typecheck.\n     */\n    function _agentSignatures(bytes29 _view)\n        private\n        pure\n        returns (uint8 guardSigs, uint8 notarySigs)\n    {\n        // Read both amounts at once\n        uint16 combinedAmounts = uint16(_view.indexUint({ _index: OFFSET_AGENT_SIGS, _bytes: 2 }));\n        // First 8 bits is the amount of guard signatures\n        guardSigs = uint8(combinedAmounts \u003e\u003e 8);\n        // Last 8 bits is the amount of notary signatures\n        notarySigs = uint8(combinedAmounts \u0026 0xFF);\n    }\n\n    /**\n     * @dev Returns the amount of signatures in the \"signatures\" payload.\n     * Reverts, if payload length is not exactly 65 * N bytes.\n     * Reverts, if amount of signatures does not fit in `uint8`.\n     */\n    function _amountSignatures(bytes29 _sigsView) private pure returns (uint8 amount) {\n        uint256 length = _sigsView.len();\n        uint256 _amount = length / ByteString.SIGNATURE_LENGTH;\n        require(_amount * ByteString.SIGNATURE_LENGTH == length, \"!signaturesLength\");\n        require(_amount \u003c type(uint8).max, \"Too many signatures\");\n        amount = uint8(_amount);\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp \u003e\u003e= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i \u003e 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value \u0026 0xf];\n            value \u003e\u003e= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs \u0026 bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) \u003e\u003e 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 \u003c s \u003c secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) \u003e 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 \u0026\u0026 v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n\nlibrary Auth {\n    using ByteString for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @notice Returns an Ethereum Signed Message, created from a `_view`.\n     * @dev This produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     * See {recoverSigner}.\n     * @param _dataView Memory view over the data that needs to be signed\n     * @return digest   An Ethereum Signed Message for the given data\n     */\n    function toEthSignedMessageHash(bytes29 _dataView) internal pure returns (bytes32 digest) {\n        // Derive hash of the original data and use that for forming an Ethereum Signed Message\n        digest = ECDSA.toEthSignedMessageHash(_dataView.keccak());\n    }\n\n    /**\n     * @notice Recovers signer from digest and signature.\n     * @dev IMPORTANT: `_digest` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     * @param _digest           Digest that was signed\n     * @param _signatureView    Memory view over `signer` signature on `_digest`\n     * @return signer           Address that signed the data\n     */\n    function recoverSigner(bytes32 _digest, bytes29 _signatureView)\n        internal\n        pure\n        returns (address signer)\n    {\n        require(_signatureView.isSignature(), \"Not a signature\");\n        (bytes32 r, bytes32 s, uint8 v) = _signatureView.toRSV();\n        signer = ECDSA.recover({ hash: _digest, r: r, s: s, v: v });\n    }\n}\n\nabstract contract AttestationHubEvents {\n    /**\n     * @notice Emitted when an attestation is submitted to AttestationHub.\n     * @param guards        Guards who signed the attestation\n     * @param notaries      Notaries who signed the attestation\n     * @param attestation   Raw payload with attestation data and notary signature\n     */\n    event AttestationAccepted(address[] guards, address[] notaries, bytes attestation);\n}\n\nabstract contract AgentRegistryEvents {\n    /*\n     * @notice Emitted when a new Agent is added.\n     * @param domain    Domain where a Agent was added\n     * @param account   Address of the added agent\n     */\n    event AgentAdded(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when a new Agent is removed.\n     * @param domain    Domain where a Agent was removed\n     * @param account   Address of the removed agent\n     */\n    event AgentRemoved(uint32 indexed domain, address indexed account);\n\n    /**\n     * @notice Emitted when the first agent is added for the domain\n     * @param domain    Domain where the first Agent was added\n     */\n    event DomainActivated(uint32 indexed domain);\n\n    /**\n     * @notice Emitted when the last agent is removed from the domain\n     * @param domain    Domain where the last Agent was removed\n     */\n    event DomainDeactivated(uint32 indexed domain);\n}\n\nlibrary AgentSet {\n    /**\n     * @notice Information about an active Agent, optimized to fit in one word of storage.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param domain    Domain where Agent is active\n     * @param index     Agent position in _agents[domain] array, plus 1 because index 0\n     *                  means Agent is not active on any domain\n     */\n    struct AgentIndex {\n        uint32 domain;\n        uint224 index;\n    }\n\n    /**\n     * @notice Information about all active agents for all domains.\n     * @dev We are storing both Notaries (domain \u003e 0) and Guards (domain == 0) this way.\n     * @param _agents   List of active agents for each domain\n     * @param _indexes  Information about every active agent\n     */\n    struct DomainAddressSet {\n        // (domain =\u003e [list of agents for the domain])\n        mapping(uint32 =\u003e address[]) _agents;\n        // (agent =\u003e agentIndex)\n        mapping(address =\u003e AgentIndex) _indexes;\n    }\n\n    /**\n     * @notice Add an agent to a given domain's set of active agents. O(1)\n     * @dev Will not add the agent, if it is already active on another domain.\n     *\n     * Returns true if the agent was added to the domain, that is\n     * if it was not already active on any domain.\n     */\n    function add(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        if (contains(set, account)) return false;\n        set._agents[domain].push(account);\n        // The agent is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        set._indexes[account] = AgentIndex({\n            domain: domain,\n            index: uint224(set._agents[domain].length)\n        });\n        return true;\n    }\n\n    /**\n     * @notice Remove an agent from a given domain's set of active agents. O(1)\n     * @dev Will not remove the agent, if it is not active on the given domain.\n     *\n     * Returns true if the agent was removed from the domain, that is\n     * if it was active on that domain.\n     */\n    function remove(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal returns (bool) {\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Do nothing if agent is not active, or is active but on another domain\n        if (agentIndex.index == 0 || agentIndex.domain != domain) return false;\n        uint256 toDeleteIndex = agentIndex.index - 1;\n        // To delete an Agent from the array in O(1),\n        // we swap the Agent to delete with the last one in the array,\n        // and then remove the last Agent (sometimes called as 'swap and pop').\n        address[] storage agents = set._agents[domain];\n        uint256 lastIndex = agents.length - 1;\n        if (lastIndex != toDeleteIndex) {\n            address lastAgent = agents[lastIndex];\n            // Move the last Agent to the index where the Agent to delete is\n            agents[toDeleteIndex] = lastAgent;\n            // Update the index for the moved Agent (use deleted agent's value)\n            set._indexes[lastAgent].index = agentIndex.index;\n        }\n        // Delete the slot where the moved Agent was stored\n        agents.pop();\n        // Delete the index for the deleted slot\n        delete set._indexes[account];\n        return true;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain. O(1)\n     */\n    function contains(DomainAddressSet storage set, address account) internal view returns (bool) {\n        return set._indexes[account].index != 0;\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain. O(1)\n     */\n    function contains(\n        DomainAddressSet storage set,\n        uint32 domain,\n        address account\n    ) internal view returns (bool) {\n        // Read from storage just once\n        AgentIndex memory agentIndex = set._indexes[account];\n        // Check that agent domain matches, and that agent is active\n        return agentIndex.domain == domain \u0026\u0026 agentIndex.index != 0;\n    }\n\n    /**\n     * @notice Returns a number of active agents for the given domain. O(1)\n     */\n    function length(DomainAddressSet storage set, uint32 domain) internal view returns (uint256) {\n        return set._agents[domain].length;\n    }\n\n    /**\n     * @notice Returns the agent stored at position `index` in the given domain's set. O(1).\n     * @dev Note that there are no guarantees on the ordering of agents inside the\n     * array, and it may change when more agents are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(\n        DomainAddressSet storage set,\n        uint32 domain,\n        uint256 index\n    ) internal view returns (address) {\n        return set._agents[domain][index];\n    }\n\n    /**\n     * @notice Return the entire set of domain's agents in an array.\n     *\n     * @dev This operation will copy the entire storage to memory, which can be quite expensive.\n     * This is designed to mostly be used by view accessors that are queried without any gas fees.\n     * Developers should keep in mind that this function has an unbounded cost, and using it as part\n     * of a state-changing function may render the function uncallable if the set grows to a point\n     * where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(DomainAddressSet storage set, uint32 domain)\n        internal\n        view\n        returns (address[] memory)\n    {\n        return set._agents[domain];\n    }\n}\n\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 =\u003e uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastValue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastValue;\n                // Update the index for the moved value\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n\nabstract contract AgentRegistry is AgentRegistryEvents {\n    using AgentSet for AgentSet.DomainAddressSet;\n    using EnumerableSet for EnumerableSet.UintSet;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Refers to the current epoch. Whenever a full agent reset is required\n     * by BondingManager, a new epoch starts. This saves us from iterating over all\n     * agents and deleting them, which could be gas consuming.\n     * @dev Variable is private as the child contracts are not supposed to modify it.\n     * Use _currentEpoch() getter if needed.\n     */\n    uint256 private epoch;\n\n    /**\n     * @notice All active domains, i.e. domains having at least one active Notary.\n     * Note: guards are stored with domain = 0, but we don't want to mix\n     * \"domains with at least one active Notary\" and \"zero domain with at least one active Guard\",\n     * so we are NOT storing domain == 0 in this set.\n     */\n    // (epoch =\u003e [domains with at least one active Notary])\n    mapping(uint256 =\u003e EnumerableSet.UintSet) internal domains;\n\n    /**\n     * @notice DomainAddressSet implies that every agent is stored as a (domain, account) tuple.\n     * Guard is active on all domains =\u003e Guards are stored as (domain = 0, account).\n     * Notary is active on one (non-zero) domain =\u003e Notaries are stored as (domain \u003e 0, account).\n     */\n    // (epoch =\u003e [set of active agents for all domains])\n    mapping(uint256 =\u003e AgentSet.DomainAddressSet) internal agents;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              MODIFIERS                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Ensures that there is at least one active Notary for the given domain.\n     */\n    modifier haveActiveNotary(uint32 _domain) {\n        require(_isActiveDomain(_domain), \"No active notaries\");\n        _;\n    }\n\n    /**\n     * @notice Ensures that there is at least one active Guard.\n     */\n    modifier haveActiveGuard() {\n        // Guards are stored with `_domain == 0`\n        require(amountAgents({ _domain: 0 }) != 0, \"No active guards\");\n        _;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            EXTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns all active Agents for a given domain in an array.\n     * Note: will return the list of active Guards, if `_domain == 0`.\n     * @dev This copies storage into memory, so can consume a lof of gas, if\n     * amount of agents is large (see EnumerableSet.values())\n     */\n    function allAgents(uint32 _domain) external view returns (address[] memory) {\n        return agents[_currentEpoch()].values(_domain);\n    }\n\n    /**\n     * @notice Returns all domains having at least one active Notary in an array.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function allDomains() external view returns (uint32[] memory domains_) {\n        uint256[] memory values = domains[_currentEpoch()].values();\n        // Use assembly to perform uint256 -\u003e uint32 downcast\n        // See OZ's EnumerableSet.values()\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            domains_ := values\n        }\n    }\n\n    /**\n     * @notice Returns true if the agent is active on any domain.\n     * Note: that includes both Guards and Notaries.\n     */\n    function isActiveAgent(address _account) external view returns (bool) {\n        return _isActiveAgent(_account);\n    }\n\n    /**\n     * @notice Returns true if the agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function isActiveAgent(uint32 _domain, address _account) external view returns (bool) {\n        return _isActiveAgent(_domain, _account);\n    }\n\n    /**\n     * @notice Returns true if there is at least one active notary for the domain\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function isActiveDomain(uint32 _domain) external view returns (bool) {\n        return _isActiveDomain(_domain);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             PUBLIC VIEWS                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns the amount of active agents for the given domain.\n     * Note: will return the amount of active Guards, if `_domain == 0`.\n     */\n    function amountAgents(uint32 _domain) public view returns (uint256) {\n        return agents[_currentEpoch()].length(_domain);\n    }\n\n    /**\n     * @notice Returns the amount of active domains.\n     * @dev This always excludes the zero domain, which is used for storing the guards.\n     */\n    function amountDomains() public view returns (uint256) {\n        return domains[_currentEpoch()].length();\n    }\n\n    /**\n     * @notice Returns i-th agent for a given domain.\n     * @dev Will revert if index is out of range.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function getAgent(uint32 _domain, uint256 _agentIndex) public view returns (address) {\n        return agents[_currentEpoch()].at(_domain, _agentIndex);\n    }\n\n    /**\n     * @notice Returns i-th domain from the list of active domains.\n     * @dev Will revert if index is out of range.\n     * Note: this never returns the zero domain, which is used for storing the guards.\n     */\n    function getDomain(uint256 _domainIndex) public view returns (uint32) {\n        return uint32(domains[_currentEpoch()].at(_domainIndex));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Tries to add an agent to the domain. If added, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to add a Guard, _domain \u003e 0 to add a Notary.\n     */\n    function _addAgent(uint32 _domain, address _account) internal returns (bool wasAdded) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Add to the list of agents for the domain in the current epoch\n        wasAdded = agents[_epoch].add(_domain, _account);\n        if (wasAdded) {\n            emit AgentAdded(_domain, _account);\n            // Consider adding domain to the list of \"active domains\" only if a Notary was added\n            if (_domain != 0) {\n                // We can skip the \"already exists\" check here, as EnumerableSet.add() does that\n                if (domains[_epoch].add(_domain)) {\n                    // Emit the event if domain was added to the list of active domains\n                    emit DomainActivated(_domain);\n                }\n            }\n            // Trigger the hook after the work is done\n            _afterAgentAdded(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Tries to remove an agent from the domain. If removed, emits a corresponding event,\n     * updates the list of active domains if necessary, and triggers a corresponding hook.\n     * Note: use _domain == 0 to remove a Guard, _domain \u003e 0 to remove a Notary.\n     */\n    function _removeAgent(uint32 _domain, address _account) internal returns (bool wasRemoved) {\n        // Some Registries may want to ignore certain agents\n        if (_isIgnoredAgent(_domain, _account)) return false;\n        // Do the storage read just once\n        uint256 _epoch = _currentEpoch();\n        // Remove from the list of agents for the domain in the current epoch\n        wasRemoved = agents[_epoch].remove(_domain, _account);\n        if (wasRemoved) {\n            emit AgentRemoved(_domain, _account);\n            // Consider removing domain to the list of \"active domains\" only if a Notary was removed\n            if (_domain != 0 \u0026\u0026 amountAgents(_domain) == 0) {\n                // Remove domain for the \"active list\", if that was the last agent\n                domains[_epoch].remove(_domain);\n                emit DomainDeactivated(_domain);\n            }\n            // Trigger the hook after the work is done\n            _afterAgentRemoved(_domain, _account);\n        }\n    }\n\n    /**\n     * @dev Removes all active agents from all domains.\n     * Note: iterating manually over all agents in order to delete them all is super inefficient.\n     * Deleting sets (which contain mappings inside) is literally not possible.\n     * So we're switching to fresh sets instead.\n     */\n    function _resetAgents() internal {\n        ++epoch;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                HOOKS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    // solhint-disable no-empty-blocks\n\n    /**\n     * @notice Hook that is called right after a new agent was added for the domain.\n     */\n    function _afterAgentAdded(uint32 _domain, address _account) internal virtual {}\n\n    /**\n     * @notice Hook that is called right after an existing agent was removed from the domain.\n     */\n    function _afterAgentRemoved(uint32 _domain, address _account) internal virtual {}\n\n    // solhint-enable no-empty-blocks\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Returns current epoch, i.e. an index that is used to determine the currently\n     * used sets for active agents and domains.\n     */\n    function _currentEpoch() internal view returns (uint256) {\n        return epoch;\n    }\n\n    /**\n     * @dev Recovers a signer from digest and signature, and checks if they are\n     * active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _checkAgentAuth(\n        uint32 _domain,\n        bytes32 _digest,\n        bytes29 _signatureView\n    ) internal view returns (address agent) {\n        agent = Auth.recoverSigner(_digest, _signatureView);\n        require(_isActiveAgent(_domain, agent), \"Signer is not authorized\");\n    }\n\n    /**\n     * @dev Checks if agent is active on any of the domains.\n     * Note: this checks if agent is an active Guard or Notary.\n     */\n    function _isActiveAgent(address _account) internal view returns (bool) {\n        // Check the list of global agents in the current epoch\n        return agents[_currentEpoch()].contains(_account);\n    }\n\n    /**\n     * @dev Checks if agent is active on the given domain.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isActiveAgent(uint32 _domain, address _account) internal view returns (bool) {\n        // Check the list of the domain's agents in the current epoch\n        return agents[_currentEpoch()].contains(_domain, _account);\n    }\n\n    /**\n     * @dev Checks if there is at least one active Notary for the given domain.\n     * Note: will return false for `_domain == 0`, even if there are active Guards.\n     */\n    function _isActiveDomain(uint32 _domain) internal view returns (bool) {\n        return domains[_currentEpoch()].contains(_domain);\n    }\n\n    /**\n     * @dev Child contracts should override this function to prevent\n     * certain agents from being added and removed.\n     * For instance, Origin might want to ignore all agents from the local domain.\n     * Note: It is assumed that no agent can change its \"ignored\" status in any AgentRegistry.\n     * In other words, do not use any values that might change over time, when implementing.\n     * Otherwise, unexpected behavior might be expected. For instance, if an agent was added,\n     * and then it became \"ignored\", it would be not possible to remove such agent.\n     * Note: domain == 0 refers to a Guard, while _domain \u003e 0 refers to a Notary.\n     */\n    function _isIgnoredAgent(uint32 _domain, address _account) internal view virtual returns (bool);\n}\n\nabstract contract AttestationHub is AttestationHubEvents, AgentRegistry {\n    using Attestation for bytes;\n    using Attestation for bytes29;\n\n    // TODO: implement a way to store the submitted Attestations, so that\n    // the off-chain actors don't need to rely on eth_getLogs in order to query the latest ones.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          EXTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Called by the external agent. Submits the signed attestation for handling.\n     * @dev Reverts if either of this is true:\n     *      - Attestation payload is not properly formatted.\n     *      - Attestation signer is not a Notary.\n     * @param _attestation  Payload with Attestation data and signature (see Attestation.sol)\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function submitAttestation(bytes memory _attestation) external returns (bool) {\n        bytes29 attestationView = _attestation.castToAttestation();\n        // Verify the attestation signature and recover an active notary address\n        (address[] memory guards, address[] memory notaries) = _verifyAttestation(attestationView);\n        return _handleAttestation(guards, notaries, attestationView, _attestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @dev Child contract should implement logic for handling the Attestation.\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @param _attestation      Payload with Attestation data and signature\n     * @return TRUE if Attestation was handled correctly.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal virtual returns (bool);\n\n    /**\n     * @notice Checks if attestation signer is authorized.\n     * @dev Guard signers need to be active globally.\n     * Notary signers need to be active on destination domain.\n     * @param _attestationView  Memory view over the Attestation to check\n     * @return guards   Addresses of the Guards who signed the Attestation\n     * @return notaries Addresses of the Notaries who signed the Attestation\n     */\n    function _verifyAttestation(bytes29 _attestationView)\n        internal\n        view\n        returns (address[] memory guards, address[] memory notaries)\n    {\n        // Check if Attestation payload is properly formatted, i.e that it\n        // contains attestation data and at least one agent signature for that data\n        require(_attestationView.isAttestation(), \"Not an attestation\");\n        bytes32 digest = Auth.toEthSignedMessageHash(_attestationView.attestationData());\n        // Get amount of signatures, and initiate the returned arrays\n        (uint256 guardSigs, uint256 notarySigs) = _attestationView.agentSignatures();\n        guards = new address[](guardSigs);\n        notaries = new address[](notarySigs);\n        // Check if all Guard signatures are valid. Guards are stored with `_domain == 0`.\n        for (uint256 i = 0; i \u003c guardSigs; ++i) {\n            guards[i] = _checkAgentAuth({\n                _domain: 0,\n                _digest: digest,\n                _signatureView: _attestationView.guardSignature(i)\n            });\n        }\n        // Check if all Notary signatures are valid. Should be active on destination domain.\n        uint32 destination = _attestationView.attestedDestination();\n        for (uint256 i = 0; i \u003c notarySigs; ++i) {\n            notaries[i] = _checkAgentAuth({\n                _domain: destination,\n                _digest: digest,\n                _signatureView: _attestationView.notarySignature(i)\n            });\n        }\n    }\n}\n\nabstract contract AttestationCollectorEvents {\n    event AttestationSaved(uint256 indexed attestationIndex, bytes attestation);\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n// \n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n// \ncontract AttestationCollector is AttestationCollectorEvents, AttestationHub, OwnableUpgradeable {\n    using Attestation for bytes29;\n    using ByteString for bytes;\n    using ByteString for bytes29;\n\n    /**\n     * @notice Contains a merkle root and existing agent signatures for this root.\n     * @dev We are storing indexes for agent signatures. They are stored as\n     * \"position of signature in `savedSignatures` array plus 1\". The default value of 0\n     * means there is no agent signature for this root.\n     * Enforced invariant: for every saved root, al lest one of the indexes is non-zero,\n     * i.e. any root is saved with at least one agent (Guard/Notary) signature.\n     * Note: \"index plus 1\" is abstracted away from the off-chain agents.\n     * Events and getters containing `index` variable refer to conventional: 0 \u003c= index \u003c length\n     * @param root              Merkle root for some given `(origin, destination, nonce)`\n     * @param guardSigIndex     Guard signature's index in `savedSignatures` plus 1\n     * @param notarySigIndex    Notary signature's index in `savedSignatures` plus 1\n     */\n    struct SignedRoot {\n        bytes32 root;\n        uint128 guardSigIndex;\n        uint128 notarySigIndex;\n    }\n\n    /**\n     * @notice Contains an agent signature and attestation key if refers to.\n     * @dev We're storing saved merkle roots separately using {SignedRoot} struct.\n     * At the moment, no conflicting roots are saved.\n     * @param r             R-value of the signature payload\n     * @param s             S-value of the signature payload\n     * @param v             V-value of the signature payload\n     * @param isGuard       Whether the signer is Guard or Notary\n     * @param origin        Attestation origin domain\n     * @param destination   Attestation destination domain\n     * @param nonce         Attestation nonce\n     */\n    struct AgentSignature {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        bool isGuard;\n        uint32 origin;\n        uint32 destination;\n        uint32 nonce;\n        // 144 bits available\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               STORAGE                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Attested root for every (origin, destination, nonce) tuple.\n     * @dev At the moment, we only save one merkle root per (origin, destination, nonce) tuple.\n     * Every conflicting root is discarded.\n     *\n     * attKey = (origin, destination, nonce)\n     * signedRoots: attKey =\u003e (root with signatures)\n     */\n    mapping(uint96 =\u003e SignedRoot) internal signedRoots;\n\n    /**\n     * @notice All stored agent signatures.\n     * @dev We save an signature only if the latest saved signature for that agent\n     * precedes the new one, i.e. has a lower nonce.\n     */\n    AgentSignature[] internal savedSignatures;\n\n    /**\n     * @notice A list of signature indexes for every (origin, destination, agent) tuple.\n     * @dev signatureIndex is the position of agent signature in `savedSignatures` list plus 1.\n     * The default value of 0 indicates that signature is not in `savedSignatures`.\n     * Invariant: signature indexes in `agentSigIndexes` are non-zero (refer to saved signature).\n     *\n     * attDomains = (origin, destination)\n     * agentSigIndexes: attDomains =\u003e (agent =\u003e [signature indexes])\n     */\n    mapping(uint64 =\u003e mapping(address =\u003e uint256[])) internal agentSigIndexes;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             INITIALIZER                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function initialize() external initializer {\n        __Ownable_init_unchained();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ADDING AGENTS (MOCKS)                         ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n    // TODO (Chi): add/remove agents via system calls from local BondingManager\n\n    function addGuard(address _guard) external onlyOwner returns (bool) {\n        return _addAgent({ _domain: 0, _account: _guard });\n    }\n\n    function addNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _addAgent(_domain, _notary);\n    }\n\n    function removeGuard(address _guard) external onlyOwner returns (bool) {\n        return _removeAgent({ _domain: 0, _account: _guard });\n    }\n\n    function removeNotary(uint32 _domain, address _notary) external onlyOwner returns (bool) {\n        return _removeAgent(_domain, _notary);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                VIEWS                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Get the amount of (origin, destination) attestations saved for a given agent.\n     */\n    function agentAttestations(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint256) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        return agentSigIndexes[attDomains][_agent].length;\n    }\n\n    /**\n     * @notice Get the total amount of saved attestations.\n     */\n    function savedAttestations() external view returns (uint256) {\n        return savedSignatures.length;\n    }\n\n    /**\n     * @notice Get i-th (origin, destination) Attestation for a given agent.\n     * Will always contain exactly one agent signature.\n     */\n    function getAgentAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent,\n        uint256 _index\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        require(_index \u003c agentSigIndexes[attDomains][_agent].length, \"Out of range\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][_index];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get the latest known nonce for (origin, destination) signed by the given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function getLatestNonce(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (uint32) {\n        return _latestAgentNonce(Attestation.attestationDomains(_origin, _destination), _agent);\n    }\n\n    /**\n     * @notice Get latest attestation for (origin, destination) signed by given agent.\n     */\n    function getLatestAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        address _agent\n    ) external view returns (bytes memory) {\n        uint64 attDomains = Attestation.attestationDomains(_origin, _destination);\n        uint256 amount = agentSigIndexes[attDomains][_agent].length;\n        require(amount != 0, \"No attestations found\");\n        uint256 signatureIndex = agentSigIndexes[attDomains][_agent][amount - 1];\n        return _formatAgentAttestation(signatureIndex);\n    }\n\n    /**\n     * @notice Get Attestation for (origin, destination, nonce), if it was previously saved.\n     * Will contain at least one agent signature.\n     * Will contain a single guard signature, if it was previously saved.\n     * Will contain a single notary signature, if it was previously saved.\n     */\n    function getAttestation(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes memory) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        SignedRoot memory signedRoot = signedRoots[attKey];\n        require(signedRoot.root != bytes32(0), \"Unknown nonce\");\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: _origin,\n            _destination: _destination,\n            _nonce: _nonce,\n            _root: signedRoot.root\n        });\n        return\n            _formatDualAttestation({\n                _attestationData: attData,\n                _guardSignatureIndex: signedRoot.guardSigIndex,\n                _notarySignatureIndex: signedRoot.notarySigIndex\n            });\n    }\n\n    /**\n     * @notice Get merkle root for (origin, destination, nonce), if it was previously saved.\n     */\n    function getRoot(\n        uint32 _origin,\n        uint32 _destination,\n        uint32 _nonce\n    ) external view returns (bytes32) {\n        uint96 attKey = Attestation.attestationKey(_origin, _destination, _nonce);\n        return signedRoots[attKey].root;\n    }\n\n    /**\n     * @notice Get i-th saved Attestation from the global list of \"all saved agents attestations\"\n     * Will always contain exactly one agent signature.\n     */\n    function getSavedAttestation(uint256 _index) external view returns (bytes memory) {\n        require(_index \u003c savedSignatures.length, \"Out of range\");\n        return _formatAgentAttestation({ _signatureIndex: _index + 1 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          INTERNAL FUNCTIONS                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Saves the attestation data, if it doesn't contradict the existing data.\n     * Saves all agent signatures that are not outdated.\n     * @dev Guards and Notaries signatures and roles have been checked in AttestationHub.\n     *\n     * @param _guards           Guard addresses (signatures\u0026roles already verified)\n     * @param _notaries         Notary addresses (signatures\u0026roles already verified)\n     * @param _attestationView  Memory view over the Attestation for convenience\n     * @return stored   TRUE if Attestation was stored.\n     */\n    function _handleAttestation(\n        address[] memory _guards,\n        address[] memory _notaries,\n        bytes29 _attestationView,\n        bytes memory _attestation\n    ) internal override returns (bool stored) {\n        uint96 attKey = _attestationView.attestedKey();\n        bytes32 root = _attestationView.attestedRoot();\n        // TODO (Chi): to enforce \"non-zero saved root\" invariant by\n        // checking if root is non-zero in Attestation.isAttestation()\n        require(root != bytes32(0), \"Root is zero\");\n        // Check what we have saved for this `attKey` previously\n        SignedRoot memory existingRoot = signedRoots[attKey];\n        if (existingRoot.root == bytes32(0)) {\n            // Case 1: no root was saved for `attKey`.\n            // Meaning no sig indexes were saved as well.\n            // Attestation has at least one signature (enforced in Attestation.isAttestation).\n            existingRoot.root = root;\n        } else if (existingRoot.root != root) {\n            // Case 2: another root was saved for `attKey`.\n            // At the moment we don't do anything here\n            // TODO (Chi): actually do something\n            return false;\n        }\n        // Case 3: the same root was saved for `attKey`.\n        // Need to go through attestation signatures and store the ones we don't have.\n        // Track if at least one new signature was linked to the attested root\n        // Save all new guard signatures\n        bool linked;\n        (stored, linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: true,\n            _agents: _guards\n        });\n        // Save all new notary signatures\n        (bool _stored, bool _linked) = _handleSignatures({\n            _attestationView: _attestationView,\n            _existingRoot: existingRoot,\n            _isGuard: false,\n            _agents: _notaries\n        });\n        // Check if at least one agent signature was stored / linked\n        stored = stored || _stored;\n        linked = linked || _linked;\n        // Emit event only if at least one signature was stored\n        if (stored) {\n            emit AttestationAccepted(_guards, _notaries, _attestation);\n        }\n        // Update storage records if at least one signature was linked\n        if (linked) {\n            signedRoots[attKey] = existingRoot;\n        }\n    }\n\n    /**\n     * @notice Saves not-outdated signatures for either all guard or notary signers\n     * form the attestation.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _handleSignatures(\n        bytes29 _attestationView,\n        SignedRoot memory _existingRoot,\n        bool _isGuard,\n        address[] memory _agents\n    ) internal returns (bool signatureStored, bool signatureLinked) {\n        uint256 amount = _agents.length;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            uint256 savedSigIndex = _insertAttestation({\n                _attestationView: _attestationView,\n                _agentIndex: i,\n                _isGuard: _isGuard,\n                _agent: _agents[i]\n            });\n            // Check if the signature was saved\n            if (savedSigIndex != 0) {\n                signatureStored = true;\n                // TODO (Chi): link every saved signature to have fallback signatures\n                if (_isGuard \u0026\u0026 _existingRoot.guardSigIndex == 0) {\n                    // Link a guard signature only if no guard signatures have been linked before\n                    _existingRoot.guardSigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                } else if (!_isGuard \u0026\u0026 _existingRoot.notarySigIndex == 0) {\n                    // Link a notary signature only if no notary signatures have been linked before\n                    _existingRoot.notarySigIndex = uint128(savedSigIndex);\n                    signatureLinked = true;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Saves signature of a given attestation signer, if it is not outdated.\n     * Signature is considered outdated, if the same signer has already submitted\n     * an attestation with an equal or bigger nonce.\n     */\n    function _insertAttestation(\n        bytes29 _attestationView,\n        uint256 _agentIndex,\n        bool _isGuard,\n        address _agent\n    ) internal returns (uint256 signatureIndex) {\n        uint64 attDomains = _attestationView.attestedDomains();\n        uint32 nonce = _attestationView.attestedNonce();\n        // Don't store outdated agent attestation\n        if (nonce \u003c= _latestAgentNonce(attDomains, _agent)) return 0;\n        // Get the memory view over the agent's signature\n        bytes29 signature = (\n            _isGuard\n                ? _attestationView.guardSignature(_agentIndex)\n                : _attestationView.notarySignature(_agentIndex)\n        );\n        // Second agent signature will be left empty\n        bytes29 emptySig = bytes(\"\").castToSignature();\n        // Construct the signature struct to save\n        AgentSignature memory agentSig;\n        (agentSig.r, agentSig.s, agentSig.v) = signature.toRSV();\n        agentSig.isGuard = _isGuard;\n        (agentSig.origin, agentSig.destination) = Attestation.unpackDomains(attDomains);\n        agentSig.nonce = nonce;\n        savedSignatures.push(agentSig);\n        // The signature is stored at length-1, but we add 1 to all indexes\n        // and use 0 as a sentinel value\n        signatureIndex = uint128(savedSignatures.length);\n        agentSigIndexes[attDomains][_agent].push(signatureIndex);\n        // Construct attestation with a single signature of a given agent\n        // Here we pass views over the existing byte arrays to reduce amount of copying into memory\n        bytes memory agentAttestation = Attestation.formatAttestation({\n            _dataView: _attestationView.attestationData(),\n            _guardSigsView: _isGuard ? signature : emptySig,\n            _notarySigsView: _isGuard ? emptySig : signature\n        });\n        // Use the actual signature position in `savedSignatures` for the event\n        emit AttestationSaved(signatureIndex - 1, agentAttestation);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            INTERNAL VIEWS                            ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a previously saved attestation.\n     * @dev The default index value of 0 means there is no saved agent signature.\n     * This is abstracted away from the off-chain agents.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _getSignature(uint256 _signatureIndex) internal view returns (bytes memory signature) {\n        if (_signatureIndex != 0) {\n            AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n            signature = ByteString.formatSignature({ r: agentSig.r, s: agentSig.s, v: agentSig.v });\n        }\n    }\n\n    /**\n     * @notice Forms a \"single-agent\" attestation using a previously saved signature.\n     * @param _signatureIndex   Signature position in `savedSignatures` plus 1\n     */\n    function _formatAgentAttestation(uint256 _signatureIndex) internal view returns (bytes memory) {\n        // Invariant: we always save \"index in the array plus 1\" as `_signatureIndex`\n        assert(_signatureIndex != 0);\n        // Read saved agent signature\n        AgentSignature memory agentSig = savedSignatures[_signatureIndex - 1];\n        uint96 attKey = Attestation.attestationKey({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce\n        });\n        bytes32 root = signedRoots[attKey].root;\n        // Invariant: Every saved signature refers to saved root\n        assert(root != bytes32(0));\n        // Reconstruct attestation data\n        bytes memory attData = Attestation.formatAttestationData({\n            _origin: agentSig.origin,\n            _destination: agentSig.destination,\n            _nonce: agentSig.nonce,\n            _root: root\n        });\n        // Reconstruct agent signature on `attData`\n        bytes memory signature = ByteString.formatSignature({\n            r: agentSig.r,\n            s: agentSig.s,\n            v: agentSig.v\n        });\n        // Format attestation using a single signature\n        return\n            Attestation.formatAttestation({\n                _data: attData,\n                _guardSignatures: agentSig.isGuard ? signature : bytes(\"\"),\n                _notarySignatures: agentSig.isGuard ? bytes(\"\") : signature\n            });\n    }\n\n    /**\n     * @notice Forms an attestation with one guard signature (if present)\n     * and one notary signature (if present).\n     */\n    function _formatDualAttestation(\n        bytes memory _attestationData,\n        uint256 _guardSignatureIndex,\n        uint256 _notarySignatureIndex\n    ) internal view returns (bytes memory) {\n        return\n            Attestation.formatAttestation({\n                _data: _attestationData,\n                _guardSignatures: _getSignature(_guardSignatureIndex),\n                _notarySignatures: _getSignature(_notarySignatureIndex)\n            });\n    }\n\n    /**\n     * @notice Returns the latest known nonce that was used in an attestation\n     * by a given agent.\n     * @dev Will return 0, if an agent hasn't submitted a single attestation yet.\n     */\n    function _latestAgentNonce(uint64 _attDomains, address _agent)\n        internal\n        view\n        returns (uint32 nonce)\n    {\n        uint256 length = agentSigIndexes[_attDomains][_agent].length;\n        if (length \u003e 0) {\n            uint256 sigIndex = agentSigIndexes[_attDomains][_agent][length - 1];\n            nonce = savedSignatures[sigIndex - 1].nonce;\n        }\n    }\n\n    function _isIgnoredAgent(uint32, address) internal pure override returns (bool) {\n        // AttestationCollector doesn't ignore anything\n        return false;\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"26:35508:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;26:35508:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"26:35508:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2952:38;;2988:2;2952:38;;;;;168:25:1;;;156:2;141:18;2952:38:0;;;;;;;;3209:46;;3119:2;3209:46;;3346:57;;;:::i;3267:56::-;;;:::i;3469:59::-;;3512:16;3469:59;;3039:37;;3074:2;3039:37;;2540:94;;;;;;;;388:66:1;376:79;;;358:98;;346:2;331:18;2540:94:0;204:258:1;3346:57:0;3031:2;3303:20;3031:2;3119;3303:20;:::i;:::-;3383;;;;:::i;:::-;3346:57;:::o;3267:56::-;3303:20;3074:2;3119;467:279:1;532:9;;;553:10;;;550:190;;;596:77;593:1;586:88;697:4;694:1;687:15;725:4;722:1;715:15;550:190;467:279;;;;:::o","abiDefinition":[{"inputs":[],"name":"BITS_EMPTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LOW_96_BITS_MASK","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NULL","outputs":[{"internalType":"bytes29","name":"","type":"bytes29"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"BITS_TYPE":{"details":"Memory layout for bytes29 [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BITS_EMPTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOW_96_BITS_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"BITS_TYPE\":{\"details\":\"Memory layout for bytes29 [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationCollector.sol\":\"TypedMemView\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationCollector.sol\":{\"keccak256\":\"0x3d60c01df624c934792530627e1aa0cf2d3951972edb28c94bd9c8d8f2ae0509\",\"urls\":[\"bzz-raw://9a14f4796ac9a7a414bc718e8c73343aa5e8a7cfad1ea3d9ae7f39e30bbc2296\",\"dweb:/ipfs/QmSVBfva5CqCC8TTPq4i6Uy1u4K4Cz83emcNCsNVhjgUdQ\"]}},\"version\":1}"},"hashes":{"BITS_EMPTY()":"97b8ad4a","BITS_LEN()":"eb740628","BITS_LOC()":"fb734584","BITS_TYPE()":"10153fce","LOW_96_BITS_MASK()":"b602d173","NULL()":"f26be3fc","SHIFT_LEN()":"1136e7ea","SHIFT_LOC()":"1bfe17ce","SHIFT_TYPE()":"13090c5a"}}}
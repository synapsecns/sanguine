{"solidity/BondingManager.sol:AddressUpgradeable":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a6e2190b02dbc01c5a7f88d0a57baa3af1a3e93e7844218c79ce3656ca5475f64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208a6e2190b02dbc01c5a7f88d0a57baa3af1a3e93e7844218c79ce3656ca5475f64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"38502:7122:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;38502:7122:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"38502:7122:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManager.sol:AgentManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"},{"inputs":[],"name":"SYNAPSE_DOMAIN","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"destination","outputs":[{"internalType":"contract ISystemRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"contract ISystemRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"registrySlash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract InterfaceSystemRouter","name":"systemRouter_","type":"address"}],"name":"setSystemRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"slashStatus","outputs":[{"internalType":"bool","name":"isSlashed","type":"bool"},{"internalType":"address","name":"prover","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"systemRouter","outputs":[{"internalType":"contract InterfaceSystemRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"registrySlash(uint32,address,address)":{"notice":"Local SystemRegistry should call this function to indicate that the agent is proven to commit fraud in the SystemRegistry."},"setSystemRouter(address)":{"notice":"Sets System Router address in for a contract."},"slashStatus(address)":{"notice":"Returns whether the agent has been slashed."},"systemRouter()":{"notice":"Returns current System Router."}},"version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"status":"Status for the given agent: (flag, domain, index)."}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"owner()":{"details":"Returns the address of the current owner."},"registrySlash(uint32,address,address)":{"details":"On Synapse Chain this initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof in SystemRegistry"}},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"setSystemRouter(address)":{"details":"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__GAP":{"details":"gap for upgrade safety"},"slashStatus":{"params":{"agent":"Agent address"},"returns":{"isSlashed":"   Whether the agent has been slashed","prover":"      Address that presented the proof of fraud committed by the agent"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SYNAPSE_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"registrySlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"systemRouter_\",\"type\":\"address\"}],\"name\":\"setSystemRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slashStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSlashed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemRouter\",\"outputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registrySlash(uint32,address,address)\":{\"details\":\"On Synapse Chain this initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof in SystemRegistry\"}},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"setSystemRouter(address)\":{\"details\":\"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__GAP\":{\"details\":\"gap for upgrade safety\"},\"slashStatus\":{\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"isSlashed\":\"   Whether the agent has been slashed\",\"prover\":\"      Address that presented the proof of fraud committed by the agent\"}}},\"version\":1},\"userdoc\":{\"events\":{\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"registrySlash(uint32,address,address)\":{\"notice\":\"Local SystemRegistry should call this function to indicate that the agent is proven to commit fraud in the SystemRegistry.\"},\"setSystemRouter(address)\":{\"notice\":\"Sets System Router address in for a contract.\"},\"slashStatus(address)\":{\"notice\":\"Returns whether the agent has been slashed.\"},\"systemRouter()\":{\"notice\":\"Returns current System Router.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"AgentManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"SYNAPSE_DOMAIN()":"bf61e67e","agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","destination()":"b269681d","getAgent(uint256)":"2de5aaf7","localDomain()":"8d3638f4","origin()":"938b5f32","owner()":"8da5cb5b","registrySlash(uint32,address,address)":"f750faa3","renounceOwnership()":"715018a6","setSystemRouter(address)":"fbde22f7","slashStatus(address)":"c02b89ff","systemRouter()":"529d1549","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"solidity/BondingManager.sol:AgentManagerEvents":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"}],"userDoc":{"events":{"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"RootUpdated(bytes32)":{"params":{"newRoot":"New agent merkle root"}},"StatusUpdated(uint8,uint32,address)":{"details":"Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree. Unknown flag is the default (zero) value and is used to represent agents that never interacted with the BondingManager contract. Fraudulent flag is the value for the agent who has been proven to commit fraud, but their status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact that the update of the status requires a merkle proof of the old status, and happens in a separate transaction because of that.","params":{"agent":"Agent address","domain":"Domain assigned to the agent (ZERO for Guards)","flag":"Flag defining agent status:"}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"RootUpdated(bytes32)\":{\"params\":{\"newRoot\":\"New agent merkle root\"}},\"StatusUpdated(uint8,uint32,address)\":{\"details\":\"Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree. Unknown flag is the default (zero) value and is used to represent agents that never interacted with the BondingManager contract. Fraudulent flag is the value for the agent who has been proven to commit fraud, but their status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact that the update of the status requires a merkle proof of the old status, and happens in a separate transaction because of that.\",\"params\":{\"agent\":\"Agent address\",\"domain\":\"Domain assigned to the agent (ZERO for Guards)\",\"flag\":\"Flag defining agent status:\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"AgentManagerEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManager.sol:BondingManager":{"code":"","runtime-code":"","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"74416:12592:0:-:0;;;75496:140;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;37223:341;;;;;;;;;;;;-1:-1:-1;;;37223:341:0;;;;;;;;33001:20;;;;;37279:22;;37269:32;;;;37319:13;;37311:47;;;;-1:-1:-1;;;37311:47:0;;501:2:1;37311:47:0;;;483:21:1;540:2;520:18;;;513:30;579:23;559:18;;;552:51;620:18;;37311:47:0;;;;;;;;;37533:24;37547:8;37533:24;:::i;:::-;37525:32;;-1:-1:-1;75582:17:0::2;61037:11:::0;;:29;;56223:2;61037:29;;60964:109;75582:17:::2;75574:55;;;::::0;-1:-1:-1;;;75574:55:0;;1153:2:1;75574:55:0::2;::::0;::::2;1135:21:1::0;1192:2;1172:18;;;1165:30;1231:27;1211:18;;;1204:55;1276:18;;75574:55:0::2;951:349:1::0;75574:55:0::2;75496:140:::0;74416:12592;;14:280:1;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;184:9;178:16;234:10;227:5;223:22;216:5;213:33;203:61;;260:1;257;250:12;203:61;283:5;14:280;-1:-1:-1;;;14:280:1:o;649:297::-;767:12;;814:4;803:16;;;797:23;;767:12;832:16;;829:111;;;926:1;922:6;912;906:4;902:17;899:1;895:25;891:38;884:5;880:50;871:59;;829:111;;649:297;;;:::o;951:349::-;74416:12592:0;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"74416:12592:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;84148:116;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;78241:999;;;;;;:::i;:::-;;:::i;:::-;;76451:1740;;;;;;:::i;:::-;;:::i;65411:400::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;83430:228::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;83290:100::-;83369:7;:14;83290:100;;;4583:25:1;;;4571:2;4556:18;83290:100:0;4437:177:1;84314:457:0;;;;;;:::i;:::-;;:::i;82979:101::-;83058:10;:15;82979:101;;83708:390;;;;;;:::i;:::-;;:::i;75642:376::-;;;;;;:::i;:::-;;:::i;79290:1088::-;;;;;;:::i;:::-;;:::i;56938:41::-;;;;;;;;;;;;5699:42:1;5687:55;;;5669:74;;5657:2;5642:18;56938:41:0;5493:256:1;37570:401:0;37741:28;;;;;;;;37754:7;37741:28;;37763:5;37741:28;;;;37570:401;;;;37741:28;37570:401;:::i;59805:57::-;;;:::i;32743:35::-;;;;;;;;6540:10:1;6528:23;;;6510:42;;6498:2;6483:18;32743:35:0;6366:192:1;53811:85:0;53883:6;;;;53811:85;;63111:29;;;;;;;;;63147:34;;;;;;;;;56183:42;;56223:2;56183:42;;63237:50;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;7241:14:1;;7234:22;7216:41;;7305:42;7293:55;;;7288:2;7273:18;;7266:83;7189:18;63237:50:0;7048:307:1;83130:110:0;;;;;;:::i;:::-;;:::i;81933:672::-;;;;;;:::i;:::-;;:::i;54693:198::-;;;;;;:::i;:::-;;:::i;64357:680::-;;;;;;:::i;:::-;;:::i;80744:1139::-;;;;;;:::i;:::-;;:::i;59486:126::-;;;;;;:::i;:::-;;:::i;84148:116::-;84189:22;84230:27;84239:1;84242:7;:14;;;;84230:8;:27::i;:::-;84223:34;;84148:116;:::o;78241:999::-;53883:6;;54023:23;53883:6;52316:10;54023:23;54015:68;;;;-1:-1:-1;;;54015:68:0;;9081:2:1;54015:68:0;;;9063:21:1;;;9100:18;;;9093:30;9159:34;9139:18;;;9132:62;9211:18;;54015:68:0;;;;;;;;;78406:25:::1;78434:19;78447:5;78434:12;:19::i;:::-;78406:47:::0;-1:-1:-1;78567:16:0::1;78552:11:::0;;:31:::1;::::0;::::1;;;;;;:::i;:::-;;:58;;;;;78604:6;78587:23;;:6;:13;;;:23;;;78552:58;78544:103;;;::::0;-1:-1:-1;;;78544:103:0;;9442:2:1;78544:103:0::1;::::0;::::1;9424:21:1::0;;;9461:18;;;9454:30;9520:34;9500:18;;;9493:62;9572:18;;78544:103:0::1;9240:356:1::0;78544:103:0::1;78998:16;79017:43;79028:16;79046:6;79054:5;79017:10;:43::i;:::-;78998:62;;79142:91;79154:8;79164:5;79171:54;;;;;;;;79183:19;79171:54;;;;;;;;:::i;:::-;;;;;79204:6;79171:54;;;;;;79212:6;:12;;;79171:54;;;;::::0;79227:5:::1;79142:11;:91::i;:::-;78341:899;;78241:999:::0;;;:::o;76451:1740::-;53883:6;;54023:23;53883:6;52316:10;54023:23;54015:68;;;;-1:-1:-1;;;54015:68:0;;9081:2:1;54015:68:0;;;9063:21:1;;;9100:18;;;9093:30;9159:34;9139:18;;;9132:62;9211:18;;54015:68:0;8879:356:1;54015:68:0;76603:25:::1;76631:19;76644:5;76631:12;:19::i;:::-;76603:47:::0;-1:-1:-1;76696:12:0::1;::::0;;76823:11;;:32:::1;::::0;::::1;;;;;;:::i;:::-;::::0;76819:1203:::1;;77004:7;:14:::0;77021:16:::1;-1:-1:-1::0;76996:65:0::1;;;::::0;-1:-1:-1;;;76996:65:0;;9803:2:1;76996:65:0::1;::::0;::::1;9785:21:1::0;9842:2;9822:18;;;9815:30;9881:21;9861:18;;;9854:49;9920:18;;76996:65:0::1;9601:343:1::0;76996:65:0::1;77090:7;:14:::0;;77208:19:::1;::::0;::::1;::::0;;-1:-1:-1;77208:19:0;;;;;;::::1;::::0;;;::::1;;::::0;::::1;;::::0;;77090:14;-1:-1:-1;76819:1203:0::1;;;77263:17;77248:11:::0;;:32:::1;::::0;::::1;;;;;;:::i;:::-;;:59;;;;;77301:6;77284:23;;:6;:13;;;:23;;;77248:59;77244:778;;;77472:6;:12;;;77464:20;;77832:44;77843:17;77862:6;77870:5;77832:10;:44::i;:::-;77821:55;;77244:778;;;77977:34;::::0;-1:-1:-1;;;77977:34:0;;10151:2:1;77977:34:0::1;::::0;::::1;10133:21:1::0;10190:2;10170:18;;;10163:30;10229:26;10209:18;;;10202:54;10273:18;;77977:34:0::1;9949:348:1::0;77244:778:0::1;78103:81;78115:8;78125:5;78132:44;;;;;;;;78144:16;78132:44;;;;;;;;:::i;:::-;;;;;78162:6;78132:44;;;;;;78170:5;78132:44;;;;::::0;78178:5:::1;78103:11;:81::i;:::-;76542:1649;;;76451:1740:::0;;;:::o;65411:400::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;65516:19:0;65529:5;65516:12;:19::i;:::-;65680:18;;;;;;;:11;:18;;;;;:28;65507;;-1:-1:-1;65680:28:0;;:64;;;;-1:-1:-1;65727:17:0;65712:11;;:32;;;;;;;;:::i;:::-;;;65680:64;65676:129;;;65774:20;65760:34;;65676:129;65411:400;;;:::o;83430:228::-;-1:-1:-1;;;;;;;;83486:13:0;-1:-1:-1;;;;;;;;;;;;;;;83550:7:0;:14;83542:22;;83538:114;;;83588:7;83596:5;83588:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;83625:16;;;:9;:16;;;;;;;;83616:25;;;;;;;;;;83588:14;;-1:-1:-1;83625:16:0;83616:25;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;83538:114:0;83430:228;;;:::o;84314:457::-;84444:7;:14;84388:22;;84476:23;;;84468:48;;;;-1:-1:-1;;;84468:48:0;;10693:2:1;84468:48:0;;;10675:21:1;10732:2;10712:18;;;10705:30;10771:14;10751:18;;;10744:42;10803:18;;84468:48:0;10491:336:1;84468:48:0;84551:11;84530:18;84542:6;84530:9;:18;:::i;:::-;:32;84526:95;;;84587:23;84601:9;84587:11;:23;:::i;:::-;84578:32;;84526:95;84652:6;84638:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;84638:21:0;;84630:29;;84674:9;84669:96;84693:6;84689:1;:10;84669:96;;;84731:23;84740:13;84752:1;84740:9;:13;:::i;:::-;84731:8;:23::i;:::-;84720:5;84726:1;84720:8;;;;;;;;:::i;:::-;;;;;;;;;;:34;84701:3;;;:::i;:::-;;;84669:96;;;;84412:359;84314:457;;;;:::o;83708:390::-;83764:22;83798;83823:10;:8;:10::i;:::-;83798:35;;83843:25;83871:19;83884:5;83871:12;:19::i;:::-;83843:47;-1:-1:-1;83955:13:0;;83971:11;;:32;;;;;;;;:::i;:::-;;:64;;84023:6;:12;;;83971:64;;;;;84006:7;:14;83971:64;83955:80;;84052:39;84078:5;84085;84052:25;:39::i;:::-;84045:46;83708:390;-1:-1:-1;;;;;83708:390:0:o;75642:376::-;48553:19;48575:25;48598:1;48575:22;:25::i;:::-;48553:47;;48614:14;48610:65;;;48644:13;:20;;;;;;;;48610:65;75748:42:::1;75768:7;75777:12;75748:19;:42::i;:::-;75800:16;:14;:16::i;:::-;75987:7;:24:::0;;::::1;::::0;::::1;::::0;;76008:1:::1;75987:24:::0;;;;;::::1;::::0;;;::::1;::::0;;48695:99;;;;48745:5;48729:21;;;;;;48769:14;;-1:-1:-1;11636:36:1;;48769:14:0;;11624:2:1;11609:18;48769:14:0;;;;;;;48695:99;48543:257;75642:376;;:::o;79290:1088::-;53883:6;;54023:23;53883:6;52316:10;54023:23;54015:68;;;;-1:-1:-1;;;54015:68:0;;9081:2:1;54015:68:0;;;9063:21:1;;;9100:18;;;9093:30;9159:34;9139:18;;;9132:62;9211:18;;54015:68:0;8879:356:1;54015:68:0;79455:25:::1;79483:19;79496:5;79483:12;:19::i;:::-;79455:47:::0;-1:-1:-1;79702:19:0::1;79687:11:::0;;:34:::1;::::0;::::1;;;;;;:::i;:::-;;:61;;;;;79742:6;79725:23;;:6;:13;;;:23;;;79687:61;79679:106;;;::::0;-1:-1:-1;;;79679:106:0;;11885:2:1;79679:106:0::1;::::0;::::1;11867:21:1::0;;;11904:18;;;11897:30;11963:34;11943:18;;;11936:62;12015:18;;79679:106:0::1;11683:356:1::0;79679:106:0::1;80135:16;80154:46;80165:19;80186:6;80194:5;80154:10;:46::i;:::-;80135:65;;80282:89;80294:8;80304:5;80311:52;;;;;;;;80323:17;80311:52;;;;;;;;:::i;59805:57::-:0;53883:6;;54023:23;53883:6;52316:10;54023:23;54015:68;;;;-1:-1:-1;;;54015:68:0;;9081:2:1;54015:68:0;;;9063:21:1;;;9100:18;;;9093:30;9159:34;9139:18;;;9132:62;9211:18;;54015:68:0;8879:356:1;54015:68:0;59805:57::o;83130:110::-;83187:12;83218:15;83227:5;83218:8;:15::i;:::-;83211:22;83130:110;-1:-1:-1;;83130:110:0:o;81933:672::-;58035:21;:19;:21::i;:::-;56428:37;82184:12;59049:47:::1;56428:37:::0;82184:12;59049:20:::1;:47::i;:::-;56595:6:::2;82216:42:::0;::::2;;82208:72;;;::::0;-1:-1:-1;;;82208:72:0;;12246:2:1;82208:72:0::2;::::0;::::2;12228:21:1::0;12285:2;12265:18;;;12258:30;12324:19;12304:18;;;12297:47;12361:18;;82208:72:0::2;12044:341:1::0;82208:72:0::2;82434:40;82452:6;82460:5;82467:6;82434:17;:40::i;:::-;82538:60;82554:20:::0;82576:6;82584:5;82591:6;82538:15:::2;:60::i;:::-;58066:1:::1;;81933:672:::0;;;;;;:::o;54693:198::-;53883:6;;54023:23;53883:6;52316:10;54023:23;54015:68;;;;-1:-1:-1;;;54015:68:0;;9081:2:1;54015:68:0;;;9063:21:1;;;9100:18;;;9093:30;9159:34;9139:18;;;9132:62;9211:18;;54015:68:0;8879:356:1;54015:68:0;54781:22:::1;::::0;::::1;54773:73;;;::::0;-1:-1:-1;;;54773:73:0;;12592:2:1;54773:73:0::1;::::0;::::1;12574:21:1::0;12631:2;12611:18;;;12604:30;12670:34;12650:18;;;12643:62;12741:8;12721:18;;;12714:36;12767:19;;54773:73:0::1;12390:402:1::0;54773:73:0::1;54856:28;54875:8;54856:18;:28::i;:::-;54693:198:::0;:::o;64357:680::-;64527:40;64545:6;64553:5;64560:6;64527:17;:40::i;:::-;64682:6;;;;64660:10;:29;64656:288;;64705:51;56355:24;56349:31;56344:36;;:1;:36;;64734:6;64742:5;64749:6;64705:15;:51::i;64656:288::-;64799:11;;;;64777:10;:34;64773:171;;64827:46;56278:19;56272:26;;64773:171;64904:29;;-1:-1:-1;;;64904:29:0;;12999:2:1;64904:29:0;;;12981:21:1;13038:2;13018:18;;;13011:30;13077:21;13057:18;;;13050:49;13116:18;;64904:29:0;12797:343:1;80744:1139:0;80928:18;;;;;;;:11;:18;;;;;:28;;;80920:63;;;;-1:-1:-1;;;80920:63:0;;13347:2:1;80920:63:0;;;13329:21:1;13386:2;13366:18;;;13359:30;13425:24;13405:18;;;13398:52;13467:18;;80920:63:0;13145:346:1;80920:63:0;81068:25;81096:19;81109:5;81096:12;:19::i;:::-;81068:47;-1:-1:-1;81162:16:0;81147:11;;:31;;;;;;;;:::i;:::-;;:69;;;-1:-1:-1;81197:19:0;81182:11;;:34;;;;;;;;:::i;:::-;;81147:69;81146:98;;;;;81238:6;81221:23;;:6;:13;;;:23;;;81146:98;81125:176;;;;-1:-1:-1;;;81125:176:0;;13698:2:1;81125:176:0;;;13680:21:1;13737:2;13717:18;;;13710:30;13776:33;13756:18;;;13749:61;13827:18;;81125:176:0;13496:355:1;81125:176:0;81648:16;81667:38;81678:6;:11;;;81691:6;81699:5;81667:10;:38::i;:::-;81648:57;;81787:89;81799:8;81809:5;81816:52;;;;;;;;81828:17;81816:52;;;;;;;;:::i;59486:126::-;53883:6;;54023:23;53883:6;52316:10;54023:23;54015:68;;;;-1:-1:-1;;;54015:68:0;;9081:2:1;54015:68:0;;;9063:21:1;;;9100:18;;;9093:30;9159:34;9139:18;;;9132:62;9211:18;;54015:68:0;8879:356:1;54015:68:0;59577:12:::1;:28:::0;;;::::1;;::::0;;;::::1;::::0;;;::::1;::::0;;59486:126::o;86196:129::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;86302:16:0;;;;;;;:9;:16;;;;;;;86295:23;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;86196:129;-1:-1:-1;;86196:129:0:o;68143:170::-;68232:7;68285:4;68291:6;68299:5;68268:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;68258:48;;;;;;68251:55;;68143:170;;;;;;:::o;85244:584::-;85448:16;85467:51;85478:9;:14;;;85494:9;:16;;;85512:5;85467:10;:51::i;:::-;85448:70;;85600:15;85618:61;85636:9;:15;;;85618:61;;85653:8;85663:5;85670:8;85618:10;:17;;:61;;;;;;;:::i;:::-;85689:16;;;;;;;:9;:16;;;;;:28;;;;85600:79;;-1:-1:-1;85708:9:0;;85689:16;;:28;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;85689:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;85762:16;;;85746:14;;85732:54;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;85801:20;;4583:25:1;;;85801:20:0;;4571:2:1;4556:18;85801:20:0;;;;;;;85373:455;;85244:584;;;;:::o;86802:204::-;86858:12;86886:10;;86882:72;;86919:24;86928:7;86936:5;86928:14;;;;;;;;:::i;:::-;;;;;;;;;;;;;86919:8;:24::i;25053:1913::-;25140:22;25343:14;25360:62;25378:6;:13;25370:5;:21;:51;;25411:9;:5;25419:1;25411:9;:::i;:::-;25360;:62::i;25370:51::-;25394:6;:13;25360:9;:62::i;:::-;25343:79;;25454:6;25440:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;25440:21:0;-1:-1:-1;25493:13:0;;25432:29;;-1:-1:-1;25471:19:0;25666:1294;25690:6;25686:1;:10;25666:1294;;;25789:11;25777:5;25785:1;25777:9;:23;25776:58;;25832:1;25776:58;;;25804:6;25811:5;25819:1;25811:9;25804:17;;;;;;;;:::i;:::-;;;;;;;25776:58;25765:5;25771:1;25765:8;;;;;;;;:::i;:::-;;;;;;:69;;;;;26196:17;26191:596;26231:11;26219:9;:23;26191:596;;;26278:18;26299:13;:9;26311:1;26299:13;:::i;:::-;26278:34;;26330:17;26350:6;26357:9;26350:17;;;;;;;;:::i;:::-;;;;;;;26330:37;;26435:18;26469:11;26456:10;:24;:58;;26512:1;26456:58;;;26483:6;26490:10;26483:18;;;;;;;;:::i;:::-;;;;;;;26456:58;26435:79;;26730:42;26750:9;26761:10;26730:19;:42::i;:::-;26705:6;26725:1;26712:9;:14;;26705:22;;;;;;;;:::i;:::-;;;;;;:67;;;;;26260:527;;;26257:1;26244:14;;;;;:::i;:::-;;;26191:596;;;-1:-1:-1;26884:1:0;26864:15;:11;26884:1;26864:15;:::i;:::-;26948:1;26938:11;;;;;26863:22;;;-1:-1:-1;25698:3:0;;;:::i;:::-;;;25666:1294;;;;25164:1802;;25053:1913;;;;:::o;50729:808::-;50793:4;51126:13;;;;;;;51122:409;;;51180:7;:12;;51191:1;51180:12;:61;;;;-1:-1:-1;51235:4:0;39784:19;:23;51180:61;51155:166;;;;-1:-1:-1;;;51155:166:0;;14977:2:1;51155:166:0;;;14959:21:1;15016:2;14996:18;;;14989:30;15055:34;15035:18;;;15028:62;15126:16;15106:18;;;15099:44;15160:19;;51155:166:0;14775:410:1;51155:166:0;-1:-1:-1;51342:5:0;;50729:808;-1:-1:-1;50729:808:0:o;51122:409::-;51386:12;;:22;;;;:12;;:22;51378:81;;;;-1:-1:-1;;;51378:81:0;;14977:2:1;51378:81:0;;;14959:21:1;15016:2;14996:18;;;14989:30;15055:34;15035:18;;;15028:62;15126:16;15106:18;;;15099:44;15160:19;;51378:81:0;14775:410:1;51378:81:0;-1:-1:-1;51473:12:0;:22;;;;;;;;;;;;;;;-1:-1:-1;;50729:808:0:o;63780:179::-;50140:13;;;;;;;50132:69;;;;-1:-1:-1;;;50132:69:0;;15392:2:1;50132:69:0;;;15374:21:1;15431:2;15411:18;;;15404:30;15470:34;15450:18;;;15443:62;15541:13;15521:18;;;15514:41;15572:19;;50132:69:0;15190:407:1;50132:69:0;63900:6:::1;:16:::0;;::::1;::::0;;::::1;::::0;;;::::1;;::::0;;;63926:11:::1;:26:::0;;;;;::::1;::::0;::::1;;::::0;;63780:179::o;53523:95::-;50140:13;;;;;;;50132:69;;;;-1:-1:-1;;;50132:69:0;;15392:2:1;50132:69:0;;;15374:21:1;15431:2;15411:18;;;15404:30;15470:34;15450:18;;;15443:62;15541:13;15521:18;;;15514:41;15572:19;;50132:69:0;15190:407:1;50132:69:0;53585:26:::1;:24;:26::i;86414:307::-:0;86470:12;86494:25;86522:19;86535:5;86522:12;:19::i;:::-;86494:47;-1:-1:-1;86570:17:0;86555:11;;:32;;;;;;;;:::i;:::-;;86551:115;;86610:45;86621:6;:11;;;86634:6;:13;;;86649:5;86610:10;:45::i;86551:115::-;86484:237;86414:307;;;:::o;61079:123::-;61164:12;;;;61142:10;:35;61134:61;;;;-1:-1:-1;;;61134:61:0;;15804:2:1;61134:61:0;;;15786:21:1;15843:2;15823:18;;;15816:30;15882:15;15862:18;;;15855:43;15915:18;;61134:61:0;15602:337:1;61208:165:0;61312:35;61327:11;61340:6;61312:14;:35::i;:::-;61304:62;;;;-1:-1:-1;;;61304:62:0;;16146:2:1;61304:62:0;;;16128:21:1;16185:2;16165:18;;;16158:30;16224:16;16204:18;;;16197:44;16258:18;;61304:62:0;15944:338:1;61304:62:0;61208:165;;:::o;66567:672::-;66724:18;;;;;;;:11;:18;;;;;:28;;;66723:29;66715:57;;;;-1:-1:-1;;;66715:57:0;;16489:2:1;66715:57:0;;;16471:21:1;16528:2;16508:18;;;16501:30;16567:17;16547:18;;;16540:45;16602:18;;66715:57:0;16287:339:1;66715:57:0;66857:25;66885:19;66898:5;66885:12;:19::i;:::-;66857:47;-1:-1:-1;66951:16:0;66936:11;;:31;;;;;;;;:::i;:::-;;:69;;;-1:-1:-1;66986:19:0;66971:11;;:34;;;;;;;;:::i;:::-;;66936:69;66935:98;;;;;67027:6;67010:23;;:6;:13;;;:23;;;66935:98;66914:176;;;;-1:-1:-1;;;66914:176:0;;16833:2:1;66914:176:0;;;16815:21:1;16872:2;16852:18;;;16845:30;16911:33;16891:18;;;16884:61;16962:18;;66914:176:0;16631:355:1;66914:176:0;67121:46;;;;;;;;67145:4;67121:46;;;;;;;;;;;;;67100:18;;;-1:-1:-1;67100:18:0;;;:11;:18;;;;;;;:67;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;67182:50;;;;;;;;;;67196:20;;67182:50;:::i;:::-;;;;;;;;66649:590;66567:672;;;:::o;67386:370::-;56344:36;67546:26;;:31;67542:84;;67579:11;;:47;;;;;17221:10:1;17209:23;;67579:47:0;;;17191:42:1;67579:11:0;17330:15:1;;;17310:18;;;17303:43;17382:15;;;17362:18;;;17355:43;67579:11:0;;;;:24;;17164:18:1;;67579:47:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;67542:84;56267:1;67679:21;;:26;67675:74;;67707:6;;:42;;;;;17221:10:1;17209:23;;67707:42:0;;;17191::1;67707:6:0;17330:15:1;;;17310:18;;;17303:43;17382:15;;;17362:18;;;17355:43;67707:6:0;;;;:19;;17164:18:1;;67707:42:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;67675:74;67386:370;;;;:::o;55045:187::-;55137:6;;;;55153:17;;;;;;;;;;;55185:40;;55137:6;;;55153:17;55137:6;;55185:40;;55118:16;;55185:40;55108:124;55045:187;:::o;18005:604::-;18348:9;;18187:15;;18291:53;18301:5;18308:8;18318:6;4585:2;18291:9;:53::i;:::-;:66;18283:94;;;;-1:-1:-1;;;18283:94:0;;17611:2:1;18283:94:0;;;17593:21:1;17650:2;17630:18;;;17623:30;17689:17;17669:18;;;17662:45;17724:18;;18283:94:0;17409:339:1;18283:94:0;18490:53;18500:5;18507:8;18517:6;4585:2;18490:9;:53::i;:::-;18583:19;;;;-1:-1:-1;18480:63:0;;18005:604;-1:-1:-1;;;;18005:604:0:o;27049:199::-;27106:14;27149:1;27160:82;27176:5;27167:6;:14;27160:82;;;27197:8;;;:::i;:::-;;-1:-1:-1;27230:1:0;27219:12;27160:82;;21510:287;21591:14;21621:23;;:51;;;;-1:-1:-1;21648:24:0;;21621:51;21617:174;;;-1:-1:-1;21695:1:0;21688:8;;21617:174;-1:-1:-1;21744:35:0;;;;;;;17910:19:1;;;;17945:12;;;17938:28;;;;21744:35:0;;;;;;;;;17982:12:1;;;;21744:35:0;;21734:46;;;;;;21510:287::o;53624:111::-;50140:13;;;;;;;50132:69;;;;-1:-1:-1;;;50132:69:0;;15392:2:1;50132:69:0;;;15374:21:1;15431:2;15411:18;;;15404:30;15470:34;15450:18;;;15443:62;15541:13;15521:18;;;15514:41;15572:19;;50132:69:0;15190:407:1;50132:69:0;53696:32:::1;52316:10:::0;53696:18:::1;:32::i;62080:158::-:0;62168:4;62204:22;62219:6;62204:14;:22::i;:::-;62191:35;;;:40;;;62080:158;-1:-1:-1;;62080:158:0:o;19363:775::-;19603:12;;19498:13;;19633:18;;;;19625:45;;;;-1:-1:-1;;;19625:45:0;;18207:2:1;19625:45:0;;;18189:21:1;18246:2;18226:18;;;18219:30;18285:16;18265:18;;;18258:44;18319:18;;19625:45:0;18005:338:1;19625:45:0;19688:4;19680:12;;19774:9;19769:177;19793:8;19789:1;:12;19769:177;;;19899:36;19909:5;19916;19922:1;19916:8;;;;;;;;:::i;:::-;;;;;;;19926:5;19933:1;19899:9;:36::i;:::-;19891:44;-1:-1:-1;19803:3:0;;;:::i;:::-;;;19769:177;;;-1:-1:-1;20034:8:0;20017:115;20048:6;20044:1;:10;20017:115;;;20083:38;20093:5;20108:1;20112:5;20119:1;20083:9;:38::i;:::-;20075:46;-1:-1:-1;20056:3:0;;;:::i;:::-;;;20017:115;;;;19517:621;19363:775;;;;;;:::o;62568:119::-;62636:7;62673:6;62667:13;;;;;;;;:::i;:::-;62662:18;;:1;:18;;62655:25;;62568:119;;;:::o;20520:526::-;20656:14;20861:1;20834:23;;;20833:29;:34;;20829:211;;20916:24;20926:4;20932:7;20916:9;:24::i;:::-;20909:31;;;;20829:211;21005:24;21015:7;21024:4;21005:9;:24::i;20829:211::-;20520:526;;;;;;:::o;14:632:1:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:169;465:6;462:1;459:13;451:169;;;526:13;;514:26;;595:15;;;;560:12;;;;487:1;480:9;451:169;;;-1:-1:-1;637:3:1;;14:632;-1:-1:-1;;;;;;14:632:1:o;651:163::-;718:20;;778:10;767:22;;757:33;;747:61;;804:1;801;794:12;819:154;905:42;898:5;894:54;887:5;884:65;874:93;;963:1;960;953:12;978:184;1030:77;1027:1;1020:88;1127:4;1124:1;1117:15;1151:4;1148:1;1141:15;1167:1381;1268:6;1276;1284;1337:2;1325:9;1316:7;1312:23;1308:32;1305:52;;;1353:1;1350;1343:12;1305:52;1376:28;1394:9;1376:28;:::i;:::-;1366:38;;1423:2;1475;1464:9;1460:18;1447:32;1488:31;1513:5;1488:31;:::i;:::-;1538:5;-1:-1:-1;1594:2:1;1579:18;;1566:32;1617:18;1647:14;;;1644:34;;;1674:1;1671;1664:12;1644:34;1712:6;1701:9;1697:22;1687:32;;1757:7;1750:4;1746:2;1742:13;1738:27;1728:55;;1779:1;1776;1769:12;1728:55;1815:2;1802:16;1837:2;1833;1830:10;1827:36;;;1843:18;;:::i;:::-;1889:2;1886:1;1882:10;1921:2;1915:9;1980:66;1975:2;1971;1967:11;1963:84;1955:6;1951:97;2098:6;2086:10;2083:22;2078:2;2066:10;2063:18;2060:46;2057:72;;;2109:18;;:::i;:::-;2145:2;2138:22;2195:18;;;2229:15;;;;-1:-1:-1;2271:11:1;;;2267:20;;;2299:19;;;2296:39;;;2331:1;2328;2321:12;2296:39;2355:11;;;;2375:142;2391:6;2386:3;2383:15;2375:142;;;2457:17;;2445:30;;2408:12;;;;2495;;;;2375:142;;;2536:6;2526:16;;;;;;;;1167:1381;;;;;:::o;2553:247::-;2612:6;2665:2;2653:9;2644:7;2640:23;2636:32;2633:52;;;2681:1;2678;2671:12;2633:52;2720:9;2707:23;2739:31;2764:5;2739:31;:::i;2805:184::-;2857:77;2854:1;2847:88;2954:4;2951:1;2944:15;2978:4;2975:1;2968:15;2994:294;3075:1;3068:5;3065:12;3055:200;;3111:77;3108:1;3101:88;3212:4;3209:1;3202:15;3240:4;3237:1;3230:15;3055:200;3264:18;;2994:294::o;3293:315::-;3358:44;3398:3;3390:5;3384:12;3358:44;:::i;:::-;3448:4;3437:16;;;3431:23;3473:10;3515:21;;;3499:14;;;3492:45;;;;3590:4;3579:16;;;3573:23;3569:32;3553:14;;3546:56;3293:315::o;3613:254::-;3801:2;3786:18;;3813:48;3790:9;3843:6;3813:48;:::i;3872:180::-;3931:6;3984:2;3972:9;3963:7;3959:23;3955:32;3952:52;;;4000:1;3997;3990:12;3952:52;-1:-1:-1;4023:23:1;;3872:180;-1:-1:-1;3872:180:1:o;4057:375::-;4316:42;4304:55;;4286:74;;4273:3;4258:19;;4369:57;4422:2;4407:18;;4399:6;4369:57;:::i;4619:248::-;4687:6;4695;4748:2;4736:9;4727:7;4723:23;4719:32;4716:52;;;4764:1;4761;4754:12;4716:52;-1:-1:-1;;4787:23:1;;;4857:2;4842:18;;;4829:32;;-1:-1:-1;4619:248:1:o;5054:434::-;5168:6;5176;5229:2;5217:9;5208:7;5204:23;5200:32;5197:52;;;5245:1;5242;5235:12;5197:52;5284:9;5271:23;5303:31;5328:5;5303:31;:::i;:::-;5353:5;-1:-1:-1;5410:2:1;5395:18;;5382:32;5423:33;5382:32;5423:33;:::i;:::-;5475:7;5465:17;;;5054:434;;;;;:::o;5754:607::-;5866:4;5895:2;5924;5913:9;5906:21;5956:6;5950:13;5999:6;5994:2;5983:9;5979:18;5972:34;6024:1;6034:140;6048:6;6045:1;6042:13;6034:140;;;6143:14;;;6139:23;;6133:30;6109:17;;;6128:2;6105:26;6098:66;6063:10;;6034:140;;;6038:3;6223:1;6218:2;6209:6;6198:9;6194:22;6190:31;6183:42;6352:2;6282:66;6277:2;6269:6;6265:15;6261:88;6250:9;6246:104;6242:113;6234:121;;;;5754:607;;;;:::o;7360:767::-;7476:6;7484;7492;7500;7508;7516;7569:3;7557:9;7548:7;7544:23;7540:33;7537:53;;;7586:1;7583;7576:12;7537:53;7622:9;7609:23;7599:33;;7651:37;7684:2;7673:9;7669:18;7651:37;:::i;:::-;7641:47;;7738:2;7727:9;7723:18;7710:32;7771:1;7764:5;7761:12;7751:40;;7787:1;7784;7777:12;7751:40;7810:5;-1:-1:-1;7834:37:1;7867:2;7852:18;;7834:37;:::i;:::-;7824:47;;7923:3;7912:9;7908:19;7895:33;7937;7962:7;7937:33;:::i;:::-;7989:7;-1:-1:-1;8048:3:1;8033:19;;8020:33;8062;8020;8062;:::i;:::-;8114:7;8104:17;;;7360:767;;;;;;;;:::o;8132:460::-;8208:6;8216;8224;8277:2;8265:9;8256:7;8252:23;8248:32;8245:52;;;8293:1;8290;8283:12;8245:52;8316:28;8334:9;8316:28;:::i;:::-;8306:38;;8394:2;8383:9;8379:18;8366:32;8407:31;8432:5;8407:31;:::i;:::-;8457:5;-1:-1:-1;8514:2:1;8499:18;;8486:32;8527:33;8486:32;8527:33;:::i;:::-;8579:7;8569:17;;;8132:460;;;;;:::o;10302:184::-;10354:77;10351:1;10344:88;10451:4;10448:1;10441:15;10475:4;10472:1;10465:15;10832:184;10884:77;10881:1;10874:88;10981:4;10978:1;10971:15;11005:4;11002:1;10995:15;11021:125;11086:9;;;11107:10;;;11104:36;;;11120:18;;:::i;11151:128::-;11218:9;;;11239:11;;;11236:37;;;11253:18;;:::i;11284:195::-;11323:3;11354:66;11347:5;11344:77;11341:103;;11424:18;;:::i;:::-;-1:-1:-1;11471:1:1;11460:13;;11284:195::o;13856:703::-;14031:3;14070:1;14062:6;14059:13;14049:201;;14106:77;14103:1;14096:88;14207:4;14204:1;14197:15;14235:4;14232:1;14225:15;14049:201;-1:-1:-1;14275:3:1;14271:16;;;;14259:29;;14325:3;14321:16;;;;14339:66;14317:89;14313:1;14304:11;;14297:110;14444:2;14440:15;14457:66;14436:88;14432:1;14423:11;;14416:109;14550:2;14541:12;;13856:703::o;14564:206::-;14708:2;14693:18;;14720:44;14697:9;14746:6;14720:44;:::i","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"},{"inputs":[],"name":"SYNAPSE_DOMAIN","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"addAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentLeaf","outputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeSlashing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"destination","outputs":[{"internalType":"contract ISystemRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"indexFrom","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"getProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"contract ISystemRegistry","name":"origin_","type":"address"},{"internalType":"contract ISystemRegistry","name":"destination_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"initiateUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"leafsAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"contract ISystemRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"registrySlash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"uint32","name":"callOrigin","type":"uint32"},{"internalType":"enum SystemEntity","name":"systemCaller","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"remoteRegistrySlash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract InterfaceSystemRouter","name":"systemRouter_","type":"address"}],"name":"setSystemRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"slashStatus","outputs":[{"internalType":"bool","name":"isSlashed","type":"bool"},{"internalType":"address","name":"prover","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"systemRouter","outputs":[{"internalType":"contract InterfaceSystemRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{"addAgent(uint32,address,bytes32[])":{"notice":"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting)."},"agentLeaf(address)":{"notice":"Returns a leaf representing the current status of agent in the Agent Merkle Tree."},"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"allLeafs()":{"notice":"Returns a full list of leafs from the Agent Merkle Tree."},"completeSlashing(uint32,address,bytes32[])":{"notice":"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root."},"completeUnstaking(uint32,address,bytes32[])":{"notice":"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"getLeafs(uint256,uint256)":{"notice":"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount)."},"getProof(address)":{"notice":"Returns a proof of inclusion of the agent in the Agent Merkle Tree."},"initiateUnstaking(uint32,address,bytes32[])":{"notice":"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains."},"leafsAmount()":{"notice":"Returns a total amount of leafs representing known agents."},"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"registrySlash(uint32,address,address)":{"notice":"Local SystemRegistry should call this function to indicate that the agent is proven to commit fraud in the SystemRegistry."},"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)":{"notice":"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud in the SystemRegistry on the origin chain."},"setSystemRouter(address)":{"notice":"Sets System Router address in for a contract."},"slashStatus(address)":{"notice":"Returns whether the agent has been slashed."},"systemRouter()":{"notice":"Returns current System Router."}},"notice":"BondingManager keeps track of all existing _agents. Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.","version":1},"developerDoc":{"kind":"dev","methods":{"addAgent(uint32,address,bytes32[])":{"details":"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent will be active","proof":"Merkle proof of the Inactive/Resting status for the agent"}},"agentLeaf(address)":{"details":"Will return an empty leaf, if agent is not added to the tree yet.","params":{"agent":"Agent address"},"returns":{"leaf":"    Agent leaf in the Agent Merkle Tree"}},"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"status":"Status for the given agent: (flag, domain, index)."}},"allLeafs()":{"details":"This might consume a lot of gas, do not use this on-chain."},"completeSlashing(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the active/unstaking status for the agent"}},"completeUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the unstaking status for the agent"}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"getLeafs(uint256,uint256)":{"details":"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount"},"getProof(address)":{"details":"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.","params":{"agent":"Agent address"},"returns":{"proof":"   Merkle proof for the agent"}},"initiateUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","proof":"Merkle proof of the Active status for the agent"}},"leafsAmount()":{"details":"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry."},"owner()":{"details":"Returns the address of the current owner."},"registrySlash(uint32,address,address)":{"details":"On Synapse Chain this initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof in SystemRegistry"}},"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)":{"details":"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof in SystemRegistry"}},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"setSystemRouter(address)":{"details":"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SYNAPSE_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"origin_\",\"type\":\"address\"},{\"internalType\":\"contract ISystemRegistry\",\"name\":\"destination_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initiateUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"contract ISystemRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"registrySlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callOrigin\",\"type\":\"uint32\"},{\"internalType\":\"enum SystemEntity\",\"name\":\"systemCaller\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"remoteRegistrySlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"systemRouter_\",\"type\":\"address\"}],\"name\":\"setSystemRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"slashStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSlashed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemRouter\",\"outputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"details\":\"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent will be active\",\"proof\":\"Merkle proof of the Inactive/Resting status for the agent\"}},\"agentLeaf(address)\":{\"details\":\"Will return an empty leaf, if agent is not added to the tree yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"leaf\":\"    Agent leaf in the Agent Merkle Tree\"}},\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"allLeafs()\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the active/unstaking status for the agent\"}},\"completeUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the unstaking status for the agent\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getLeafs(uint256,uint256)\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\"},\"getProof(address)\":{\"details\":\"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"proof\":\"   Merkle proof for the agent\"}},\"initiateUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"proof\":\"Merkle proof of the Active status for the agent\"}},\"leafsAmount()\":{\"details\":\"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registrySlash(uint32,address,address)\":{\"details\":\"On Synapse Chain this initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof in SystemRegistry\"}},\"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)\":{\"details\":\"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof in SystemRegistry\"}},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"setSystemRouter(address)\":{\"details\":\"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"notice\":\"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting).\"},\"agentLeaf(address)\":{\"notice\":\"Returns a leaf representing the current status of agent in the Agent Merkle Tree.\"},\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"allLeafs()\":{\"notice\":\"Returns a full list of leafs from the Agent Merkle Tree.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"notice\":\"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root.\"},\"completeUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getLeafs(uint256,uint256)\":{\"notice\":\"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount).\"},\"getProof(address)\":{\"notice\":\"Returns a proof of inclusion of the agent in the Agent Merkle Tree.\"},\"initiateUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains.\"},\"leafsAmount()\":{\"notice\":\"Returns a total amount of leafs representing known agents.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"registrySlash(uint32,address,address)\":{\"notice\":\"Local SystemRegistry should call this function to indicate that the agent is proven to commit fraud in the SystemRegistry.\"},\"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)\":{\"notice\":\"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud in the SystemRegistry on the origin chain.\"},\"setSystemRouter(address)\":{\"notice\":\"Sets System Router address in for a contract.\"},\"slashStatus(address)\":{\"notice\":\"Returns whether the agent has been slashed.\"},\"systemRouter()\":{\"notice\":\"Returns current System Router.\"}},\"notice\":\"BondingManager keeps track of all existing _agents. Used on the Synapse Chain, serves as the \\\"source of truth\\\" for LightManagers on remote chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"BondingManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"SYNAPSE_DOMAIN()":"bf61e67e","addAgent(uint32,address,bytes32[])":"237a85a5","agentLeaf(address)":"c99dcb9e","agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","allLeafs()":"12db2ef6","completeSlashing(uint32,address,bytes32[])":"fbc5265e","completeUnstaking(uint32,address,bytes32[])":"4c3e1c1f","destination()":"b269681d","getAgent(uint256)":"2de5aaf7","getLeafs(uint256,uint256)":"33d1b2e8","getProof(address)":"3eea79d1","initialize(address,address)":"485cc955","initiateUnstaking(uint32,address,bytes32[])":"130c5673","leafsAmount()":"33c3a8f3","localDomain()":"8d3638f4","origin()":"938b5f32","owner()":"8da5cb5b","registrySlash(uint32,address,address)":"f750faa3","remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)":"d49063d0","renounceOwnership()":"715018a6","setSystemRouter(address)":"fbde22f7","slashStatus(address)":"c02b89ff","systemRouter()":"529d1549","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"solidity/BondingManager.sol:ContextUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManager.sol:DomainContext":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"}},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"DomainContext\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"localDomain()":"8d3638f4"}},"solidity/BondingManager.sol:IAgentManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"registrySlash","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"slashStatus","outputs":[{"internalType":"bool","name":"isSlashed","type":"bool"},{"internalType":"address","name":"prover","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"registrySlash(uint32,address,address)":{"notice":"Local SystemRegistry should call this function to indicate that the agent is proven to commit fraud in the SystemRegistry."},"slashStatus(address)":{"notice":"Returns whether the agent has been slashed."}},"version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"_0":"Status for the given agent: (flag, domain, index)."}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"registrySlash(uint32,address,address)":{"details":"On Synapse Chain this initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof in SystemRegistry"}},"slashStatus(address)":{"params":{"agent":"Agent address"},"returns":{"isSlashed":"   Whether the agent has been slashed","prover":"      Address that presented the proof of fraud committed by the agent"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"registrySlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"slashStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isSlashed\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"_0\":\"Status for the given agent: (flag, domain, index).\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"registrySlash(uint32,address,address)\":{\"details\":\"On Synapse Chain this initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof in SystemRegistry\"}},\"slashStatus(address)\":{\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"isSlashed\":\"   Whether the agent has been slashed\",\"prover\":\"      Address that presented the proof of fraud committed by the agent\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"registrySlash(uint32,address,address)\":{\"notice\":\"Local SystemRegistry should call this function to indicate that the agent is proven to commit fraud in the SystemRegistry.\"},\"slashStatus(address)\":{\"notice\":\"Returns whether the agent has been slashed.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"IAgentManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","getAgent(uint256)":"2de5aaf7","registrySlash(uint32,address,address)":"f750faa3","slashStatus(address)":"c02b89ff"}},"solidity/BondingManager.sol:ISystemContract":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"contract InterfaceSystemRouter","name":"systemRouter_","type":"address"}],"name":"setSystemRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"systemRouter","outputs":[{"internalType":"contract InterfaceSystemRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"setSystemRouter(address)":{"notice":"Sets System Router address in for a contract."},"systemRouter()":{"notice":"Returns current System Router."}},"version":1},"developerDoc":{"kind":"dev","methods":{"setSystemRouter(address)":{"details":"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"systemRouter_\",\"type\":\"address\"}],\"name\":\"setSystemRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemRouter\",\"outputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"setSystemRouter(address)\":{\"details\":\"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"setSystemRouter(address)\":{\"notice\":\"Sets System Router address in for a contract.\"},\"systemRouter()\":{\"notice\":\"Returns current System Router.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"ISystemContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"setSystemRouter(address)":"fbde22f7","systemRouter()":"529d1549"}},"solidity/BondingManager.sol:ISystemRegistry":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"managerSlash","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"managerSlash(uint32,address,address)":{"notice":"Local AgentManager should call this function to indicate that the agent has been slashed, either on local or remote chain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"params":{"agent":"Agent address"},"returns":{"_0":"Status for the given agent: (flag, domain, index)."}},"managerSlash(uint32,address,address)":{"params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Account that supplied proof leading to agent slashing"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"managerSlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"_0\":\"Status for the given agent: (flag, domain, index).\"}},\"managerSlash(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Account that supplied proof leading to agent slashing\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"managerSlash(uint32,address,address)\":{\"notice\":\"Local AgentManager should call this function to indicate that the agent has been slashed, either on local or remote chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"ISystemRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"agentStatus(address)":"28f3fac9","managerSlash(uint32,address,address)":"5f7bd144"}},"solidity/BondingManager.sol:Initializable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManager.sol:InterfaceBondingManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"addAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentLeaf","outputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeSlashing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"indexFrom","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"getProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"initiateUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"leafsAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"uint32","name":"callOrigin","type":"uint32"},{"internalType":"enum SystemEntity","name":"systemCaller","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"remoteRegistrySlash","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"addAgent(uint32,address,bytes32[])":{"notice":"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting)."},"agentLeaf(address)":{"notice":"Returns a leaf representing the current status of agent in the Agent Merkle Tree."},"allLeafs()":{"notice":"Returns a full list of leafs from the Agent Merkle Tree."},"completeSlashing(uint32,address,bytes32[])":{"notice":"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root."},"completeUnstaking(uint32,address,bytes32[])":{"notice":"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains."},"getLeafs(uint256,uint256)":{"notice":"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount)."},"getProof(address)":{"notice":"Returns a proof of inclusion of the agent in the Agent Merkle Tree."},"initiateUnstaking(uint32,address,bytes32[])":{"notice":"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains."},"leafsAmount()":{"notice":"Returns a total amount of leafs representing known agents."},"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)":{"notice":"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud in the SystemRegistry on the origin chain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"addAgent(uint32,address,bytes32[])":{"details":"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent will be active","proof":"Merkle proof of the Inactive/Resting status for the agent"}},"agentLeaf(address)":{"details":"Will return an empty leaf, if agent is not added to the tree yet.","params":{"agent":"Agent address"},"returns":{"leaf":"    Agent leaf in the Agent Merkle Tree"}},"allLeafs()":{"details":"This might consume a lot of gas, do not use this on-chain."},"completeSlashing(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the active/unstaking status for the agent"}},"completeUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the unstaking status for the agent"}},"getLeafs(uint256,uint256)":{"details":"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount"},"getProof(address)":{"details":"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.","params":{"agent":"Agent address"},"returns":{"proof":"   Merkle proof for the agent"}},"initiateUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","proof":"Merkle proof of the Active status for the agent"}},"leafsAmount()":{"details":"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry."},"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)":{"details":"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof in SystemRegistry"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initiateUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"callOrigin\",\"type\":\"uint32\"},{\"internalType\":\"enum SystemEntity\",\"name\":\"systemCaller\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"remoteRegistrySlash\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"details\":\"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent will be active\",\"proof\":\"Merkle proof of the Inactive/Resting status for the agent\"}},\"agentLeaf(address)\":{\"details\":\"Will return an empty leaf, if agent is not added to the tree yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"leaf\":\"    Agent leaf in the Agent Merkle Tree\"}},\"allLeafs()\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the active/unstaking status for the agent\"}},\"completeUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the unstaking status for the agent\"}},\"getLeafs(uint256,uint256)\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\"},\"getProof(address)\":{\"details\":\"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"proof\":\"   Merkle proof for the agent\"}},\"initiateUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"proof\":\"Merkle proof of the Active status for the agent\"}},\"leafsAmount()\":{\"details\":\"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry.\"},\"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)\":{\"details\":\"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof in SystemRegistry\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"notice\":\"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting).\"},\"agentLeaf(address)\":{\"notice\":\"Returns a leaf representing the current status of agent in the Agent Merkle Tree.\"},\"allLeafs()\":{\"notice\":\"Returns a full list of leafs from the Agent Merkle Tree.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"notice\":\"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root.\"},\"completeUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains.\"},\"getLeafs(uint256,uint256)\":{\"notice\":\"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount).\"},\"getProof(address)\":{\"notice\":\"Returns a proof of inclusion of the agent in the Agent Merkle Tree.\"},\"initiateUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains.\"},\"leafsAmount()\":{\"notice\":\"Returns a total amount of leafs representing known agents.\"},\"remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)\":{\"notice\":\"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud in the SystemRegistry on the origin chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"InterfaceBondingManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"addAgent(uint32,address,bytes32[])":"237a85a5","agentLeaf(address)":"c99dcb9e","allLeafs()":"12db2ef6","completeSlashing(uint32,address,bytes32[])":"fbc5265e","completeUnstaking(uint32,address,bytes32[])":"4c3e1c1f","getLeafs(uint256,uint256)":"33d1b2e8","getProof(address)":"3eea79d1","initiateUnstaking(uint32,address,bytes32[])":"130c5673","leafsAmount()":"33c3a8f3","remoteRegistrySlash(uint256,uint32,uint8,uint32,address,address)":"d49063d0"}},"solidity/BondingManager.sol:InterfaceSystemRouter":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"origin","type":"uint32"},{"internalType":"uint32","name":"nonce","type":"uint32"},{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"bytes","name":"body","type":"bytes"}],"name":"receiveSystemMessage","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"destination","type":"uint32"},{"internalType":"uint32","name":"optimisticPeriod","type":"uint32"},{"internalType":"enum SystemEntity","name":"recipient","type":"uint8"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"systemCall","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"receiveSystemMessage(uint32,uint32,uint256,bytes)":{"notice":"Message recipient needs to implement this function in order to receive cross-chain messages."},"systemCall(uint32,uint32,uint8,bytes)":{"notice":"Call a System Contract on the remote chain with a given calldata. This is done by sending a system message to the System Router on the destination chain. Note: knowledge of recipient address is not required, routing will be done by the System Router."}},"version":1},"developerDoc":{"kind":"dev","methods":{"receiveSystemMessage(uint32,uint32,uint256,bytes)":{"details":"Message recipient needs to ensure that merkle proof for the message is at least as old as the optimistic period that the recipient is using. Note: as this point it is checked that the \"message optimistic period\" has passed, however the period value itself could be anything, and thus could differ from the one that the recipient would like to enforce.","params":{"body":"Body of the system message","nonce":"Message nonce on the origin domain","origin":"Domain where message originated","proofMaturity":"Message's merkle proof age in seconds"}},"systemCall(uint32,uint32,uint8,bytes)":{"details":"Only System contracts are allowed to call this function. System Entities should expose functions for cross-chain system calls using this template:  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter  - `*args` is used to denote the non-security function arguments (that could be of any type). Note: such function should be protected with onlySystemRouter modifierAssuming `payload = abi.encodeWithSelector(foo.selector, *args)`, following call will be made on destination chain:  - `recipient.foo(proofMaturity, origin, sender, *args)` This allows recipient to check: - `uint256 proofMaturity`: system message's merkle proof age in seconds - `uint32 origin`: domain where a system call originated - `SystemEntity `sender`: system entity who initiated the call on origin chain","params":{"destination":"Domain of destination chain","optimisticPeriod":"Optimistic period for the message","payload":"Calldata payload without security arguments","recipient":"System entity to be called on destination chain"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"body\",\"type\":\"bytes\"}],\"name\":\"receiveSystemMessage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"optimisticPeriod\",\"type\":\"uint32\"},{\"internalType\":\"enum SystemEntity\",\"name\":\"recipient\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"systemCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"receiveSystemMessage(uint32,uint32,uint256,bytes)\":{\"details\":\"Message recipient needs to ensure that merkle proof for the message is at least as old as the optimistic period that the recipient is using. Note: as this point it is checked that the \\\"message optimistic period\\\" has passed, however the period value itself could be anything, and thus could differ from the one that the recipient would like to enforce.\",\"params\":{\"body\":\"Body of the system message\",\"nonce\":\"Message nonce on the origin domain\",\"origin\":\"Domain where message originated\",\"proofMaturity\":\"Message's merkle proof age in seconds\"}},\"systemCall(uint32,uint32,uint8,bytes)\":{\"details\":\"Only System contracts are allowed to call this function. System Entities should expose functions for cross-chain system calls using this template:  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`  - `(proofMaturity, origin, sender)` are later referenced as \\\"security arguments\\\" filled by SystemRouter  - `*args` is used to denote the non-security function arguments (that could be of any type). Note: such function should be protected with onlySystemRouter modifierAssuming `payload = abi.encodeWithSelector(foo.selector, *args)`, following call will be made on destination chain:  - `recipient.foo(proofMaturity, origin, sender, *args)` This allows recipient to check: - `uint256 proofMaturity`: system message's merkle proof age in seconds - `uint32 origin`: domain where a system call originated - `SystemEntity `sender`: system entity who initiated the call on origin chain\",\"params\":{\"destination\":\"Domain of destination chain\",\"optimisticPeriod\":\"Optimistic period for the message\",\"payload\":\"Calldata payload without security arguments\",\"recipient\":\"System entity to be called on destination chain\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"receiveSystemMessage(uint32,uint32,uint256,bytes)\":{\"notice\":\"Message recipient needs to implement this function in order to receive cross-chain messages.\"},\"systemCall(uint32,uint32,uint8,bytes)\":{\"notice\":\"Call a System Contract on the remote chain with a given calldata. This is done by sending a system message to the System Router on the destination chain. Note: knowledge of recipient address is not required, routing will be done by the System Router.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"InterfaceSystemRouter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"receiveSystemMessage(uint32,uint32,uint256,bytes)":"91a46d44","systemCall(uint32,uint32,uint8,bytes)":"bf65bc46"}},"solidity/BondingManager.sol:MerkleLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a741322c8f60942897fadaaa0f6166b70a141a94efac93a94493eac34d32168964736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a741322c8f60942897fadaaa0f6166b70a141a94efac93a94493eac34d32168964736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"11496:10303:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;11496:10303:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"11496:10303:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"MerkleLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManager.sol:MerkleList":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aaeb1665a929c363619c34cde2cdf40312bb17331a18e9c125967839ad231ce364736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220aaeb1665a929c363619c34cde2cdf40312bb17331a18e9c125967839ad231ce364736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"21801:5449:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;21801:5449:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"21801:5449:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"MerkleList\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManager.sol:OwnableUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/BondingManager.sol:SystemContract":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"SYNAPSE_DOMAIN","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract InterfaceSystemRouter","name":"systemRouter_","type":"address"}],"name":"setSystemRouter","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"systemRouter","outputs":[{"internalType":"contract InterfaceSystemRouter","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"setSystemRouter(address)":{"notice":"Sets System Router address in for a contract."},"systemRouter()":{"notice":"Returns current System Router."}},"notice":"Shared utilities between Synapse System Contracts: Origin, Destination, etc.","version":1},"developerDoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"setSystemRouter(address)":{"details":"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__GAP":{"details":"gap for upgrade safety"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SYNAPSE_DOMAIN\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"systemRouter_\",\"type\":\"address\"}],\"name\":\"setSystemRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"systemRouter\",\"outputs\":[{\"internalType\":\"contract InterfaceSystemRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"setSystemRouter(address)\":{\"details\":\"This function should be protected. System Router is granted the ability to pass the cross-chain system messages to the contract.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__GAP\":{\"details\":\"gap for upgrade safety\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"setSystemRouter(address)\":{\"notice\":\"Sets System Router address in for a contract.\"},\"systemRouter()\":{\"notice\":\"Returns current System Router.\"}},\"notice\":\"Shared utilities between Synapse System Contracts: Origin, Destination, etc.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"SystemContract\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"SYNAPSE_DOMAIN()":"bf61e67e","localDomain()":"8d3638f4","owner()":"8da5cb5b","renounceOwnership()":"715018a6","setSystemRouter(address)":"fbde22f7","systemRouter()":"529d1549","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"solidity/BondingManager.sol:Versioned":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ══════════════════════════════ SYSTEM CONTRACT ══════════════════════════════\n\n/// @dev Potential senders/recipients of a system message\nenum SystemEntity {\n    Origin,\n    Destination,\n    AgentManager\n}\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n/// @notice Struct representing information about an agent in dispute.\n/// Note: counterpart for Guard is Notary, counterpart for Notary is Guard.\n/// @param flag         Dispute status\n/// @param counterpart  Agent address who the agent is in dispute with\nstruct DisputeStatus {\n    DisputeFlag flag;\n    address counterpart;\n}\n// 88 bits available for tight packing\n\n/// @notice Struct representing information about a slashed agent.\nstruct SlashStatus {\n    bool isSlashed;\n    address prover;\n}\n// 88 bits available for tight packing\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notary           Notary who signed the latest agent root\n// TODO: replace notary with its index\nstruct DestinationStatus {\n    uint48 snapRootTime;\n    uint48 agentRootTime;\n    address notary;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,address,address,address,tips): 4+4+32+32+20+20+20+tips_length\nuint256 constant RECEIPT_LENGTH = 132 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Local SystemRegistry should call this function to indicate that the agent\n     * is proven to commit fraud in the SystemRegistry.\n     * @dev On Synapse Chain this initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function registrySlash(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns whether the agent has been slashed.\n     * @param agent         Agent address\n     * @return isSlashed    Whether the agent has been slashed\n     * @return prover       Address that presented the proof of fraud committed by the agent\n     */\n    function slashStatus(address agent) external view returns (bool isSlashed, address prover);\n}\n\ninterface ISystemRegistry {\n    /**\n     * @notice Local AgentManager should call this function to indicate that the agent\n     * has been slashed, either on local or remote chain.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Account that supplied proof leading to agent slashing\n     */\n    function managerSlash(uint32 domain, address agent, address prover) external;\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n}\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\nabstract contract DomainContext {\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    /**\n     * @notice Ensures that a domain matches the local domain.\n     */\n    modifier onlyLocalDomain(uint32 domain) {\n        _assertLocalDomain(domain);\n        _;\n    }\n\n    constructor(uint32 domain) {\n        localDomain = domain;\n    }\n\n    function _assertLocalDomain(uint32 domain) internal view {\n        require(domain == localDomain, \"!localDomain\");\n    }\n}\n\ninterface InterfaceSystemRouter {\n    /**\n     * @notice Message recipient needs to implement this function in order to\n     * receive cross-chain messages.\n     * @dev Message recipient needs to ensure that merkle proof for the message\n     * is at least as old as the optimistic period that the recipient is using.\n     * Note: as this point it is checked that the \"message optimistic period\" has passed,\n     * however the period value itself could be anything, and thus could differ from the one\n     * that the recipient would like to enforce.\n     * @param origin            Domain where message originated\n     * @param nonce             Message nonce on the origin domain\n     * @param proofMaturity     Message's merkle proof age in seconds\n     * @param body              Body of the system message\n     */\n    function receiveSystemMessage(uint32 origin, uint32 nonce, uint256 proofMaturity, bytes memory body) external;\n\n    /**\n     * @notice Call a System Contract on the remote chain with a given calldata.\n     * This is done by sending a system message to the System Router on the destination chain.\n     * Note: knowledge of recipient address is not required, routing will be done by the System Router.\n     * @dev Only System contracts are allowed to call this function.\n     * System Entities should expose functions for cross-chain system calls using this template:\n     *  - `function foo(uint256 proofMaturity, uint32 origin, SystemEntity sender, *args)`\n     *  - `(proofMaturity, origin, sender)` are later referenced as \"security arguments\" filled by SystemRouter\n     *  - `*args` is used to denote the non-security function arguments (that could be of any type).\n     * Note: such function should be protected with onlySystemRouter modifier\n     * @dev Assuming `payload = abi.encodeWithSelector(foo.selector, *args)`,\n     * following call will be made on destination chain:\n     *  - `recipient.foo(proofMaturity, origin, sender, *args)`\n     * This allows recipient to check:\n     * - `uint256 proofMaturity`: system message's merkle proof age in seconds\n     * - `uint32 origin`: domain where a system call originated\n     * - `SystemEntity `sender`: system entity who initiated the call on origin chain\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for the message\n     * @param recipient             System entity to be called on destination chain\n     * @param payload               Calldata payload without security arguments\n     */\n    function systemCall(uint32 destination, uint32 optimisticPeriod, SystemEntity recipient, bytes memory payload)\n        external;\n}\n\ninterface ISystemContract {\n    /**\n     * @notice Sets System Router address in for a contract.\n     * @dev This function should be protected. System Router is granted the ability\n     * to pass the cross-chain system messages to the contract.\n     */\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external;\n\n    /**\n     * @notice Returns current System Router.\n     */\n    function systemRouter() external view returns (InterfaceSystemRouter);\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        require(_length \u003c= 32, \"String length over 32\");\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Shared utilities between Synapse System Contracts: Origin, Destination, etc.\n */\nabstract contract SystemContract is DomainContext, Versioned, OwnableUpgradeable, ISystemContract {\n    // ═════════════════════════════════════════════════ CONSTANTS ═════════════════════════════════════════════════════\n\n    // domain of the Synapse Chain\n    // For MVP this is Optimism chainId\n    // TODO: replace the placeholder with actual value\n    uint32 public constant SYNAPSE_DOMAIN = 10;\n\n    uint256 internal constant ORIGIN = 1 \u003c\u003c uint8(SystemEntity.Origin);\n    uint256 internal constant DESTINATION = 1 \u003c\u003c uint8(SystemEntity.Destination);\n    uint256 internal constant AGENT_MANAGER = 1 \u003c\u003c uint8(SystemEntity.AgentManager);\n\n    // TODO: reevaluate optimistic period for staking/unstaking bonds\n    uint32 internal constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    InterfaceSystemRouter public systemRouter;\n\n    /// @dev gap for upgrade safety\n    uint256[49] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ═════════════════════════════════════════════════ MODIFIERS ═════════════════════════════════════════════════════\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on all chains (either local or remote).\n     * Note: any function protected by this modifier should have first three params as:\n     * - uint256 proofMaturity\n     * - uint32 origin\n     * - SystemEntity sender\n     * Make sure to check domain/sender, if a function should be only called\n     * from a given domain / by a given sender.\n     * Make sure to check that a needed amount of time has passed since\n     * root submission for the cross-chain calls.\n     */\n    modifier onlySystemRouter() {\n        _assertSystemRouter();\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * System Contracts on Synapse chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     */\n    modifier onlySynapseChain(uint32 callOrigin) {\n        _assertSynapseChain(callOrigin);\n        _;\n    }\n\n    /**\n     * @dev Modifier for functions that are supposed to be called only from\n     * a set of System Contracts on any chain.\n     * Note: has to be used alongside with `onlySystemRouter`\n     * See `onlySystemRouter` for details about the functions protected by such modifiers.\n     * Note: check constants section for existing mask constants\n     * E.g. to restrict the set of callers to three allowed system callers:\n     *  onlyCallers(MASK_0 | MASK_1 | MASK_2, systemCaller)\n     */\n    modifier onlyCallers(uint256 allowedMask, SystemEntity systemCaller) {\n        _assertEntityAllowed(allowedMask, systemCaller);\n        _;\n    }\n\n    // ════════════════════════════════════════════════ OWNER ONLY ═════════════════════════════════════════════════════\n\n    // solhint-disable-next-line ordering\n    function setSystemRouter(InterfaceSystemRouter systemRouter_) external onlyOwner {\n        systemRouter = systemRouter_;\n    }\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n\n    // ═══════════════════════════════════════════ SYSTEM CALL SHORTCUTS ═══════════════════════════════════════════════\n\n    /// @dev Perform a System Call to a AgentManager on a given domain\n    /// with the given optimistic period and data.\n    function _callAgentManager(uint32 domain, uint32 optimisticPeriod, bytes memory payload) internal {\n        systemRouter.systemCall({\n            destination: domain,\n            optimisticPeriod: optimisticPeriod,\n            recipient: SystemEntity.AgentManager,\n            payload: payload\n        });\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    function _onSynapseChain() internal view returns (bool) {\n        return localDomain == SYNAPSE_DOMAIN;\n    }\n\n    function _assertSystemRouter() internal view {\n        require(msg.sender == address(systemRouter), \"!systemRouter\");\n    }\n\n    function _assertEntityAllowed(uint256 allowedMask, SystemEntity caller) internal pure {\n        require(_entityAllowed(allowedMask, caller), \"!allowedCaller\");\n    }\n\n    function _assertSynapseChain(uint32 domain) internal pure {\n        require(domain == SYNAPSE_DOMAIN, \"!synapseDomain\");\n    }\n\n    /**\n     * @notice Checks if a given entity is allowed to call a function using a systemMask\n     * @param systemMask  a mask of allowed entities\n     * @param entity  a system entity to check\n     * @return true if entity is allowed to call a function\n     *\n     * @dev this function works by converting the enum value to a non-zero bit mask\n     * we then use a bitwise AND operation to check if permission bits allow the entity\n     * to perform this operation, more details can be found here:\n     * https://en.wikipedia.org/wiki/Bitwise_operation#AND\n     */\n    function _entityAllowed(uint256 systemMask, SystemEntity entity) internal pure returns (bool) {\n        return systemMask \u0026 _getSystemMask(entity) != 0;\n    }\n\n    /**\n     * @notice Returns a mask for a given system entity\n     * @param entity  System entity\n     * @return a non-zero mask for a given system entity\n     *\n     * Converts an enum value into a non-zero bit mask used for a bitwise AND check\n     * E.g. for Origin (0) returns 1, for Destination (1) returns 2\n     */\n    function _getSystemMask(SystemEntity entity) internal pure returns (uint256) {\n        return 1 \u003c\u003c uint8(entity);\n    }\n}\n\nabstract contract AgentManager is SystemContract, AgentManagerEvents, IAgentManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    ISystemRegistry public origin;\n\n    ISystemRegistry public destination;\n\n    // agent =\u003e (bool isSlashed, address prover)\n    mapping(address =\u003e SlashStatus) public slashStatus;\n\n    /// @dev gap for upgrade safety\n    uint256[47] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(ISystemRegistry origin_, ISystemRegistry destination_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function registrySlash(uint32 domain, address agent, address prover) external {\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // On all chains both Origin and Destination/Summit could slash agents\n        if (msg.sender == address(origin)) {\n            _notifySlashing(DESTINATION, domain, agent, prover);\n        } else if (msg.sender == address(destination)) {\n            _notifySlashing(ORIGIN, domain, agent, prover);\n        } else {\n            revert(\"Unauthorized caller\");\n        }\n        // Call \"after slash\" hook\n        _afterRegistrySlash(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) external view returns (AgentStatus memory status) {\n        status = _agentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed,\n        // return the Fraudulent flag instead\n        if (slashStatus[agent].isSlashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed on one of the Registries,\n    /// and the remaining Registries were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterRegistrySlash(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Checks and initiates the slashing of an agent.\n    /// Should be called, after one of registries confirmed fraud committed by the agent.\n    function _initiateSlashing(uint32 domain, address agent, address prover) internal {\n        // Check that Agent hasn't been already slashed\n        require(!slashStatus[agent].isSlashed, \"Already slashed\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be initiated\"\n        );\n        slashStatus[agent] = SlashStatus({isSlashed: true, prover: prover});\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n    }\n\n    /// @dev Notifies a given set of local registries about the slashed agent.\n    /// Set is defined by a bitmask, eg: DESTINATION | ORIGIN\n    function _notifySlashing(uint256 registryMask, uint32 domain, address agent, address prover) internal {\n        // Notify Destination, if requested\n        if (registryMask \u0026 DESTINATION != 0) destination.managerSlash(domain, agent, prover);\n        // Notify Origin, if requested\n        if (registryMask \u0026 ORIGIN != 0) origin.managerSlash(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    function _agentStatus(address agent) internal view virtual returns (AgentStatus memory);\n}\n\ninterface InterfaceBondingManager {\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud in the SystemRegistry on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * @param domain    Domain where the slashed agent was active\n     * @param agent     Address of the slashed Agent\n     * @param prover    Address that initially provided fraud proof in SystemRegistry\n     */\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\n/// @notice BondingManager keeps track of all existing _agents.\n/// Used on the Synapse Chain, serves as the \"source of truth\" for LightManagers on remote chains.\ncontract BondingManager is Versioned, AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) DomainContext(domain) Versioned(\"0.0.3\") {\n        require(_onSynapseChain(), \"Only deployed on SynChain\");\n    }\n\n    function initialize(ISystemRegistry origin_, ISystemRegistry destination_) external initializer {\n        __AgentManager_init(origin_, destination_);\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the added agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list\n            require(_agents.length \u003c type(uint32).max, \"Agents list if full\");\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert(\"Agent could not be added\");\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        require(status.flag == AgentFlag.Active \u0026\u0026 status.domain == domain, \"Unstaking could not be initiated\");\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check current status of the unstaking agent\n        AgentStatus memory status = _agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        require(status.flag == AgentFlag.Unstaking \u0026\u0026 status.domain == domain, \"Unstaking could not be completed\");\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check that slashing was initiated by one of the System Registries\n        require(slashStatus[agent].isSlashed, \"Slashing not initiated\");\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _agentStatus(agent);\n        require(\n            (status.flag == AgentFlag.Active || status.flag == AgentFlag.Unstaking) \u0026\u0026 status.domain == domain,\n            \"Slashing could not be completed\"\n        );\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(status.flag, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteRegistrySlash(\n        uint256 proofMaturity,\n        uint32 callOrigin,\n        SystemEntity systemCaller,\n        uint32 domain,\n        address agent,\n        address prover\n    ) external onlySystemRouter onlyCallers(AGENT_MANAGER, systemCaller) {\n        require(proofMaturity \u003e= BONDING_OPTIMISTIC_PERIOD, \"!optimisticPeriod\");\n        // TODO: do we need to save this?\n        callOrigin;\n        // Check that Agent hasn't been already slashed and initiate the slashing\n        _initiateSlashing(domain, agent, prover);\n        // Notify local registries about the slashing\n        _notifySlashing(DESTINATION | ORIGIN, domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n            status = _agentMap[agent];\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        AgentStatus memory status = _agentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleList.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        require(indexFrom \u003c amountTotal, \"Out of range\");\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _agentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        AgentStatus memory status = _agentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"notice":"Version getter for contracts. Doesn't use any storage slots, meaning it will never cause any troubles with the upgradeable contracts. For instance, this contract can be added or removed from the inheritance chain without shifting the storage layout.","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"_data":{"details":"Bytes representation of the \"version string\". Strings with length over 32 are not supported!"},"_length":{"details":"Length of the \"version string\""}},"title":"Versioned","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_data\":{\"details\":\"Bytes representation of the \\\"version string\\\". Strings with length over 32 are not supported!\"},\"_length\":{\"details\":\"Length of the \\\"version string\\\"\"}},\"title\":\"Versioned\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Version getter for contracts. Doesn't use any storage slots, meaning it will never cause any troubles with the upgradeable contracts. For instance, this contract can be added or removed from the inheritance chain without shifting the storage layout.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManager.sol\":\"Versioned\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManager.sol\":{\"keccak256\":\"0x7519a13c68e773327f20167ae00b2dede51bd21eba360d9ad3987414d43a9860\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9eda21535b820278105247fe6737207610f7502295a452faf25223b451c314ce\",\"dweb:/ipfs/QmSdcGRpKfoY4Vmug6GVjCfAXDDvGecvYkyQP9ByX6EcQ1\"]}},\"version\":1}"},"hashes":{"version()":"54fd4d50"}}}
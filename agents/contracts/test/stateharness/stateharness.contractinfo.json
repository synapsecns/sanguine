{"solidity/StateHarness.t.sol:ByteString":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122068ae8f69ea97e3b5853a64d48fa86f8b6fd0e2a8e5e4fc1b5be7c2ff421fcb3464736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122068ae8f69ea97e3b5853a64d48fa86f8b6fd0e2a8e5e4fc1b5be7c2ff421fcb3464736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\n// \nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n// \n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref({ newType: 0 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              SIGNATURE                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 _view) internal pure returns (Signature) {\n        require(isSignature(_view), \"Not a signature\");\n        return Signature.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature _signature) internal pure returns (bytes29) {\n        return Signature.unwrap(_signature);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature _signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_signature);\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               CALLDATA                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory _payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 _view) internal pure returns (CallData) {\n        require(isCallData(_view), \"Not a calldata\");\n        return CallData.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData _callData) internal pure returns (bytes29) {\n        return CallData.unwrap(_callData);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           CALLDATA SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData _callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.slice({ _index: OFFSET_SELECTOR, _len: SELECTOR_LENGTH, newType: 0 });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: 0 });\n    }\n}\n\n// \n// Here we define common constants to enable their easier reusing later.\n/// @dev See Attestation.sol: (bytes32,uint8,uint32,uint40,uint40): 32+1+4+5+5\nuint256 constant ATTESTATION_LENGTH = 47;\n\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n\n/// @dev Maximum amount of states in a single snapshot\nuint256 constant SNAPSHOT_MAX_STATES = 32;\n\n/// @dev Root for an empty Origin Merkle Tree.\nbytes32 constant EMPTY_ROOT = hex\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\";\n\n/// @dev Depth of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_DEPTH = 32;\n\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n/**\n * @dev Custom address used for sending and receiving system messages.\n *  - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n *  - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n *  - As a result: only SystemRouter messages will have this value as both sender and recipient.\n * Note: all bits except for lower 20 bytes are set to 1.\n * Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\n */\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// \n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing {\n    StateLib.unwrap,\n    StateLib.equalToOrigin,\n    StateLib.hash,\n    StateLib.subLeafs,\n    StateLib.toSummitState,\n    StateLib.root,\n    StateLib.origin,\n    StateLib.nonce,\n    StateLib.blockNumber,\n    StateLib.timestamp\n} for State global;\n\n/// @dev Struct representing State, as it is stored in the Origin contract.\nstruct OriginState {\n    bytes32 root;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 176 bits left for tight packing\n}\n\n/// @dev Attach library functions to OriginState\nusing { StateLib.formatOriginState } for OriginState global;\n\n/// @dev Struct representing State, as it is stored in the Summit contract.\nstruct SummitState {\n    bytes32 root;\n    uint32 origin;\n    uint32 nonce;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 112 bits left for tight packing\n}\n\n/// @dev Attach library functions to SummitState\nusing { StateLib.formatSummitState } for SummitState global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every dispatched message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was dispatched in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was dispatched.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of dispatched messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last dispatched message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last dispatched message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                STATE                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param _root         New merkle root\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _blockNumber  Block number when root was saved in Origin\n     * @param _timestamp    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     **/\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory _payload) internal pure returns (State) {\n        return castToState(_payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 _view) internal pure returns (State) {\n        require(isState(_view), \"Not a state\");\n        return State.wrap(_view);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State _state) internal pure returns (bytes29) {\n        return State.unwrap(_state);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _originState  State struct as it is stored in Origin contract\n     * @return Formatted state\n     */\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) internal pure returns (bytes memory) {\n        return\n            formatState({\n                _root: _originState.root,\n                _origin: _origin,\n                _nonce: _nonce,\n                _blockNumber: _originState.blockNumber,\n                _timestamp: _originState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Origin contract.\n    /// Current block number and timestamp are used.\n    function originState(bytes32 currentRoot) internal view returns (OriginState memory state) {\n        state.root = currentRoot;\n        state.blockNumber = uint40(block.number);\n        state.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that a state and its Origin representation are equal.\n    function equalToOrigin(State _state, OriginState memory _originState)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            _state.root() == _originState.root \u0026\u0026\n            _state.blockNumber() == _originState.blockNumber \u0026\u0026\n            _state.timestamp() == _originState.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _summitState  State struct as it is stored in Summit contract\n     * @return Formatted state\n     */\n    function formatSummitState(SummitState memory _summitState)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatState({\n                _root: _summitState.root,\n                _origin: _summitState.origin,\n                _nonce: _summitState.nonce,\n                _blockNumber: _summitState.blockNumber,\n                _timestamp: _summitState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Summit contract.\n    function toSummitState(State _state) internal pure returns (SummitState memory state) {\n        state.root = _state.root();\n        state.origin = _state.origin();\n        state.nonce = _state.nonce();\n        state.blockNumber = _state.blockNumber();\n        state.timestamp = _state.timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE HASHING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function hash(State _state) internal pure returns (bytes32) {\n        (bytes32 _leftLeaf, bytes32 _rightLeaf) = _state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(_leftLeaf, _rightLeaf));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State _state) internal pure returns (bytes32 _leftLeaf, bytes32 _rightLeaf) {\n        bytes29 _view = _state.unwrap();\n        // Left leaf is (root, origin)\n        _leftLeaf = _view.prefix({ _len: OFFSET_NONCE, newType: 0 }).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        _rightLeaf = _view.sliceFrom({ _index: OFFSET_NONCE, newType: 0 }).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 _root, uint32 _origin) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_root, _origin));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_nonce, _blockNumber, _timestamp));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE SLICING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State _state) internal pure returns (bytes32) {\n        bytes29 _view = _state.unwrap();\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_BLOCK_NUMBER, _bytes: 5 }));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_TIMESTAMP, _bytes: 5 }));\n    }\n}\n\n// \n/**\n * @notice Exposes State methods for testing against golang.\n */\ncontract StateHarness {\n    using StateLib for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToState(bytes memory _payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        State _state = StateLib.castToState(_payload);\n        return _state.unwrap().clone();\n    }\n\n    function hash(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().hash();\n    }\n\n    function subLeafs(bytes memory _payload) public pure returns (bytes32, bytes32) {\n        return _payload.castToState().subLeafs();\n    }\n\n    function leftLeaf(bytes32 _root, uint32 _origin) public pure returns (bytes32) {\n        return StateLib.leftLeaf(_root, _origin);\n    }\n\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes32) {\n        return StateLib.rightLeaf(_nonce, _blockNumber, _timestamp);\n    }\n\n    function root(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().root();\n    }\n\n    function origin(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().origin();\n    }\n\n    function nonce(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().nonce();\n    }\n\n    function blockNumber(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().blockNumber();\n    }\n\n    function timestamp(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) public pure returns (bytes memory) {\n        return _originState.formatOriginState(_origin, _nonce);\n    }\n\n    function originState(bytes32 _root) public view returns (OriginState memory state) {\n        return StateLib.originState(_root);\n    }\n\n    function equalToOrigin(bytes memory _payload, OriginState memory _originState)\n        public\n        pure\n        returns (bool)\n    {\n        return _payload.castToState().equalToOrigin(_originState);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitState(SummitState memory _summitState) public pure returns (bytes memory) {\n        return _summitState.formatSummitState();\n    }\n\n    function toSummitState(bytes memory _payload) public pure returns (SummitState memory state) {\n        return _payload.castToState().toSummitState();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           STATE FORMATTERS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes memory) {\n        return StateLib.formatState(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    function isState(bytes memory _payload) public pure returns (bool) {\n        return _payload.ref(0).isState();\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"36133:8192:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;36133:8192:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"36133:8192:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SELECTOR_LENGTH":{"details":"Calldata memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes"},"SIGNATURE_LENGTH":{"details":"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SELECTOR_LENGTH\":{\"details\":\"Calldata memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes\"},\"SIGNATURE_LENGTH\":{\"details\":\"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/StateHarness.t.sol\":\"ByteString\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/StateHarness.t.sol\":{\"keccak256\":\"0x3d6aa5b2be1522343ba11e542ffbab1ed85a55744b6217ed3826291458ec711d\",\"urls\":[\"bzz-raw://4d042df57a077a2e1a8a6c29db8d01d34a44a0abc442718cfcb49e975e0ccd9f\",\"dweb:/ipfs/QmbCSgSpNf59Tq4KWLHfotGj7DtdBTatonEGVLWJykFEnm\"]}},\"version\":1}"},"hashes":{}},"solidity/StateHarness.t.sol:StateHarness":{"code":"0x608060405234801561001057600080fd5b5061192f806100206000396000f3fe608060405234801561001057600080fd5b506004361061011b5760003560e01c80639677fe8d116100b2578063c2e9e20811610081578063e8643e2511610066578063e8643e2514610326578063e948e60014610339578063edaa471d1461034c57600080fd5b8063c2e9e20814610300578063cb3eb0e11461031357600080fd5b80639677fe8d146102445780639aaa1826146102b2578063aa1e84de146102da578063aae6d884146102ed57600080fd5b8063461e44d3116100ee578063461e44d3146101d55780634e765004146101e8578063503d0bed146102105780635fed02611461023157600080fd5b80631c9aa222146101205780631efcb7141461014e5780633047b5ea14610192578063365b4b67146101b5575b600080fd5b61013361012e3660046113cc565b61035f565b60405164ffffffffff90911681526020015b60405180910390f35b61016161015c366004611401565b61037e565b604080518251815260208084015164ffffffffff908116918301919091529282015190921690820152606001610145565b6101a56101a036600461149c565b6103c4565b6040519015158152602001610145565b6101c86101c33660046114ff565b6103e6565b60405161014591906115c1565b6101c86101e33660046115d4565b61047c565b6101fb6101f63660046113cc565b610487565b60405163ffffffff9091168152602001610145565b61022361021e36600461165b565b6104a0565b604051908152602001610145565b6101c861023f3660046113cc565b61052d565b6102576102523660046113cc565b61054b565b6040516101459190600060a08201905082518252602083015163ffffffff80821660208501528060408601511660408501525050606083015164ffffffffff8082166060850152806080860151166080850152505092915050565b6102c56102c03660046113cc565b61058d565b60408051928352602083019190915201610145565b6102236102e83660046113cc565b6105b0565b6101a56102fb3660046113cc565b6105c9565b61022361030e3660046113cc565b6105f5565b6101fb6103213660046113cc565b61060e565b6101c861033436600461169e565b610627565b6101336103473660046113cc565b610634565b61022361035a3660046116d9565b61064d565b600061037861036d83610659565b62ffffff191661066c565b92915050565b604080516060810182526000808252602082018190529181019190915261037882604080516060810182529182524364ffffffffff908116602084015242169082015290565b60006103df826103d385610659565b62ffffff191690610682565b9392505050565b60408051602081018790527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b82168385015286901b1660448201527fffffffffff00000000000000000000000000000000000000000000000000000060d885811b8216604884015284901b16604d8201528151808203603201815260529091019091526060905b9695505050505050565b6060610378826106f3565b600061037861049583610659565b62ffffff19166107a1565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b166020808301919091527fffffffffff00000000000000000000000000000000000000000000000000000060d886811b8216602485015285901b1660298301528251808303600e018152602e90920190925280519101206000905b949350505050565b6060600061053a83610659565b90506103df62ffffff1982166107b7565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261037861058283610659565b62ffffff191661080a565b6000806105a761059c84610659565b62ffffff19166108b5565b91509150915091565b60006103786105be83610659565b62ffffff19166108f9565b60006103786105d8838361093d565b62ffffff191660181c6bffffffffffffffffffffffff1660321490565b600061037861060383610659565b62ffffff1916610961565b600061037861061c83610659565b62ffffff1916610976565b606061052584848461098c565b600061037861064283610659565b62ffffff1916610a2b565b60006103df8383610a41565b600061037861066783610aa2565b610aae565b600062ffffff1982166103df81602d6005610b3a565b805160009061069662ffffff198516610961565b1480156106c25750602082015164ffffffffff166106b962ffffff198516610a2b565b64ffffffffff16145b80156103df5750604082015164ffffffffff166106e462ffffff19851661066c565b64ffffffffff16149392505050565b60606103788260000151836020015184604001518560600151866080015160408051602081019690965260e094851b7fffffffff00000000000000000000000000000000000000000000000000000000908116878301529390941b909216604485015260d890811b7fffffffffff000000000000000000000000000000000000000000000000000000908116604886015291901b16604d830152805160328184030181526052909201905290565b600062ffffff1982166103df8160246004610b3a565b60606000806107d48460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060405191508192506107f98483602001610b6a565b508181016020016040529052919050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261084462ffffff198316610961565b815261085562ffffff198316610976565b63ffffffff16602082015261086f62ffffff1983166107a1565b63ffffffff16604082015261088962ffffff198316610a2b565b64ffffffffff1660608201526108a462ffffff19831661066c565b64ffffffffff166080820152919050565b60008062ffffff1983166108d96108ce82602485610d51565b62ffffff1916610d60565b92506108f16108ce62ffffff19831660246000610dae565b915050915091565b6000808061090c62ffffff1985166108b5565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120949350505050565b81516000906020840161095864ffffffffff85168284610dec565b95945050505050565b600062ffffff1982166103df81836020610e33565b600062ffffff1982166103df8160206004610b3a565b82516020808501516040808701518151938401949094527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b82168584015286901b1660448401527fffffffffff00000000000000000000000000000000000000000000000000000060d892831b811660488501529390911b909216604d820152815180820360320181526052909101909152606090610525565b600062ffffff1982166103df8160286005610b3a565b60008282604051602001610a8492919091825260e01b7fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b60405160208183030381529060405280519060200120905092915050565b6000610378828261093d565b6000610acb8260181c6bffffffffffffffffffffffff1660321490565b610b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f74206120737461746500000000000000000000000000000000000000000060448201526064015b60405180910390fd5b5090565b6000610b4782602061172b565b610b52906008611744565b60ff16610b60858585610e33565b901c949350505050565b600062ffffff1980841603610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f636f7079546f3a204e756c6c20706f696e7465722064657265660000000000006044820152606401610b2d565b610be483610fe1565b610c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f7079546f3a20496e76616c696420706f696e7465722064657265660000006044820152606401610b2d565b6000610c648460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000610c7f8561101d565b6bffffffffffffffffffffffff169050600080604051915085821115610ca55760206060fd5b8386858560045afa905080610d16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6964656e746974793a206f7574206f66206761730000000000000000000000006044820152606401610b2d565b610d46610d2288611044565b70ffffffffff000000000000000000000000606091821b168817901b851760181b90565b979650505050505050565b60006105258460008585611068565b600080610d6c8361101d565b6bffffffffffffffffffffffff1690506000610d968460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b6000610525848485610dce8860181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16610de69190611767565b85611068565b600080610df9838561177a565b9050604051811115610e09575060005b80600003610e1e5762ffffff199150506103df565b5050606092831b9190911790911b1760181b90565b60008160ff16600003610e48575060006103df565b610e608460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16610e7b60ff84168561177a565b1115610efe57610ecb610e8d8561101d565b6bffffffffffffffffffffffff16610eb38660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff166110d3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d91906115c1565b60208260ff161115610f6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e6465783a206d6f7265207468616e203332206279746573000000000000006044820152606401610b2d565b600882026000610f7b8661101d565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b6000610fec82611044565b64ffffffffff1664ffffffffff0361100657506000919050565b600061101183611141565b60405110199392505050565b60008061102c6060601861177a565b9290921c6bffffffffffffffffffffffff1692915050565b600080606061105481601861177a565b61105e919061177a565b9290921c92915050565b6000806110748661101d565b6bffffffffffffffffffffffff16905061108d86611141565b84611098878461177a565b6110a2919061177a565b11156110b55762ffffff19915050610525565b6110bf858261177a565b90506104728364ffffffffff168286610dec565b606060006110e08661117a565b91505060006110ee8661117a565b91505060006110fc8661117a565b915050600061110a8661117a565b91505083838383604051602001611124949392919061178d565b604051602081830303815290604052945050505050949350505050565b600061115b8260181c6bffffffffffffffffffffffff1690565b6111648361101d565b016bffffffffffffffffffffffff169050919050565b600080601f5b600f8160ff1611156111ed576000611199826008611744565b60ff1685901c90506111aa81611264565b61ffff16841793508160ff166010146111c557601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611180565b50600f5b60ff8160ff16101561125e57600061120a826008611744565b60ff1685901c905061121b81611264565b61ffff16831792508160ff1660001461123657601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016111f1565b50915091565b600061127660048360ff16901c611296565b60ff1661ffff919091161760081b61128d82611296565b60ff1617919050565b6040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152600091600f841691829081106112e3576112e36118ca565b016020015160f81c9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261133257600080fd5b813567ffffffffffffffff8082111561134d5761134d6112f2565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611393576113936112f2565b816040528381528660208588010111156113ac57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156113de57600080fd5b813567ffffffffffffffff8111156113f557600080fd5b61052584828501611321565b60006020828403121561141357600080fd5b5035919050565b803564ffffffffff8116811461142f57600080fd5b919050565b60006060828403121561144657600080fd5b6040516060810181811067ffffffffffffffff82111715611469576114696112f2565b6040528235815290508061147f6020840161141a565b60208201526114906040840161141a565b60408201525092915050565b600080608083850312156114af57600080fd5b823567ffffffffffffffff8111156114c657600080fd5b6114d285828601611321565b9250506114e28460208501611434565b90509250929050565b803563ffffffff8116811461142f57600080fd5b600080600080600060a0868803121561151757600080fd5b85359450611527602087016114eb565b9350611535604087016114eb565b92506115436060870161141a565b91506115516080870161141a565b90509295509295909350565b6000815180845260005b8181101561158357602081850181015186830182015201611567565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006103df602083018461155d565b600060a082840312156115e657600080fd5b60405160a0810181811067ffffffffffffffff82111715611609576116096112f2565b6040528235815261161c602084016114eb565b602082015261162d604084016114eb565b604082015261163e6060840161141a565b606082015261164f6080840161141a565b60808201529392505050565b60008060006060848603121561167057600080fd5b611679846114eb565b92506116876020850161141a565b91506116956040850161141a565b90509250925092565b600080600060a084860312156116b357600080fd5b6116bd8585611434565b92506116cb606085016114eb565b9150611695608085016114eb565b600080604083850312156116ec57600080fd5b823591506114e2602084016114eb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60ff8281168282160390811115610378576103786116fc565b60ff8181168382160290811690818114611760576117606116fc565b5092915050565b81810381811115610378576103786116fc565b80820180821115610378576103786116fc565b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686581527f20766965772e20536c696365206973206174203078000000000000000000000060208201527fffffffffffff000000000000000000000000000000000000000000000000000060d086811b821660358401527f2077697468206c656e6774682030780000000000000000000000000000000000603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060508501527f7800000000000000000000000000000000000000000000000000000000000000607085015285821b83166071850152607784015283901b1660868201527f2e00000000000000000000000000000000000000000000000000000000000000608c8201526000608d8201610472565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220239ac01aadb57c4f1144ddc1982b4f06e9af0cc72f1691782b7fa1ebb4e5566064736f6c63430008110033","runtime-code":"0x608060405234801561001057600080fd5b506004361061011b5760003560e01c80639677fe8d116100b2578063c2e9e20811610081578063e8643e2511610066578063e8643e2514610326578063e948e60014610339578063edaa471d1461034c57600080fd5b8063c2e9e20814610300578063cb3eb0e11461031357600080fd5b80639677fe8d146102445780639aaa1826146102b2578063aa1e84de146102da578063aae6d884146102ed57600080fd5b8063461e44d3116100ee578063461e44d3146101d55780634e765004146101e8578063503d0bed146102105780635fed02611461023157600080fd5b80631c9aa222146101205780631efcb7141461014e5780633047b5ea14610192578063365b4b67146101b5575b600080fd5b61013361012e3660046113cc565b61035f565b60405164ffffffffff90911681526020015b60405180910390f35b61016161015c366004611401565b61037e565b604080518251815260208084015164ffffffffff908116918301919091529282015190921690820152606001610145565b6101a56101a036600461149c565b6103c4565b6040519015158152602001610145565b6101c86101c33660046114ff565b6103e6565b60405161014591906115c1565b6101c86101e33660046115d4565b61047c565b6101fb6101f63660046113cc565b610487565b60405163ffffffff9091168152602001610145565b61022361021e36600461165b565b6104a0565b604051908152602001610145565b6101c861023f3660046113cc565b61052d565b6102576102523660046113cc565b61054b565b6040516101459190600060a08201905082518252602083015163ffffffff80821660208501528060408601511660408501525050606083015164ffffffffff8082166060850152806080860151166080850152505092915050565b6102c56102c03660046113cc565b61058d565b60408051928352602083019190915201610145565b6102236102e83660046113cc565b6105b0565b6101a56102fb3660046113cc565b6105c9565b61022361030e3660046113cc565b6105f5565b6101fb6103213660046113cc565b61060e565b6101c861033436600461169e565b610627565b6101336103473660046113cc565b610634565b61022361035a3660046116d9565b61064d565b600061037861036d83610659565b62ffffff191661066c565b92915050565b604080516060810182526000808252602082018190529181019190915261037882604080516060810182529182524364ffffffffff908116602084015242169082015290565b60006103df826103d385610659565b62ffffff191690610682565b9392505050565b60408051602081018790527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b82168385015286901b1660448201527fffffffffff00000000000000000000000000000000000000000000000000000060d885811b8216604884015284901b16604d8201528151808203603201815260529091019091526060905b9695505050505050565b6060610378826106f3565b600061037861049583610659565b62ffffff19166107a1565b604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b166020808301919091527fffffffffff00000000000000000000000000000000000000000000000000000060d886811b8216602485015285901b1660298301528251808303600e018152602e90920190925280519101206000905b949350505050565b6060600061053a83610659565b90506103df62ffffff1982166107b7565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261037861058283610659565b62ffffff191661080a565b6000806105a761059c84610659565b62ffffff19166108b5565b91509150915091565b60006103786105be83610659565b62ffffff19166108f9565b60006103786105d8838361093d565b62ffffff191660181c6bffffffffffffffffffffffff1660321490565b600061037861060383610659565b62ffffff1916610961565b600061037861061c83610659565b62ffffff1916610976565b606061052584848461098c565b600061037861064283610659565b62ffffff1916610a2b565b60006103df8383610a41565b600061037861066783610aa2565b610aae565b600062ffffff1982166103df81602d6005610b3a565b805160009061069662ffffff198516610961565b1480156106c25750602082015164ffffffffff166106b962ffffff198516610a2b565b64ffffffffff16145b80156103df5750604082015164ffffffffff166106e462ffffff19851661066c565b64ffffffffff16149392505050565b60606103788260000151836020015184604001518560600151866080015160408051602081019690965260e094851b7fffffffff00000000000000000000000000000000000000000000000000000000908116878301529390941b909216604485015260d890811b7fffffffffff000000000000000000000000000000000000000000000000000000908116604886015291901b16604d830152805160328184030181526052909201905290565b600062ffffff1982166103df8160246004610b3a565b60606000806107d48460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060405191508192506107f98483602001610b6a565b508181016020016040529052919050565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261084462ffffff198316610961565b815261085562ffffff198316610976565b63ffffffff16602082015261086f62ffffff1983166107a1565b63ffffffff16604082015261088962ffffff198316610a2b565b64ffffffffff1660608201526108a462ffffff19831661066c565b64ffffffffff166080820152919050565b60008062ffffff1983166108d96108ce82602485610d51565b62ffffff1916610d60565b92506108f16108ce62ffffff19831660246000610dae565b915050915091565b6000808061090c62ffffff1985166108b5565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120949350505050565b81516000906020840161095864ffffffffff85168284610dec565b95945050505050565b600062ffffff1982166103df81836020610e33565b600062ffffff1982166103df8160206004610b3a565b82516020808501516040808701518151938401949094527fffffffff0000000000000000000000000000000000000000000000000000000060e087811b82168584015286901b1660448401527fffffffffff00000000000000000000000000000000000000000000000000000060d892831b811660488501529390911b909216604d820152815180820360320181526052909101909152606090610525565b600062ffffff1982166103df8160286005610b3a565b60008282604051602001610a8492919091825260e01b7fffffffff0000000000000000000000000000000000000000000000000000000016602082015260240190565b60405160208183030381529060405280519060200120905092915050565b6000610378828261093d565b6000610acb8260181c6bffffffffffffffffffffffff1660321490565b610b36576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f74206120737461746500000000000000000000000000000000000000000060448201526064015b60405180910390fd5b5090565b6000610b4782602061172b565b610b52906008611744565b60ff16610b60858585610e33565b901c949350505050565b600062ffffff1980841603610bdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f636f7079546f3a204e756c6c20706f696e7465722064657265660000000000006044820152606401610b2d565b610be483610fe1565b610c4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f7079546f3a20496e76616c696420706f696e7465722064657265660000006044820152606401610b2d565b6000610c648460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000610c7f8561101d565b6bffffffffffffffffffffffff169050600080604051915085821115610ca55760206060fd5b8386858560045afa905080610d16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6964656e746974793a206f7574206f66206761730000000000000000000000006044820152606401610b2d565b610d46610d2288611044565b70ffffffffff000000000000000000000000606091821b168817901b851760181b90565b979650505050505050565b60006105258460008585611068565b600080610d6c8361101d565b6bffffffffffffffffffffffff1690506000610d968460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b6000610525848485610dce8860181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16610de69190611767565b85611068565b600080610df9838561177a565b9050604051811115610e09575060005b80600003610e1e5762ffffff199150506103df565b5050606092831b9190911790911b1760181b90565b60008160ff16600003610e48575060006103df565b610e608460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16610e7b60ff84168561177a565b1115610efe57610ecb610e8d8561101d565b6bffffffffffffffffffffffff16610eb38660181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16858560ff166110d3565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d91906115c1565b60208260ff161115610f6c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f496e6465783a206d6f7265207468616e203332206279746573000000000000006044820152606401610b2d565b600882026000610f7b8661101d565b6bffffffffffffffffffffffff16905060007f80000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84011d91909501511695945050505050565b6000610fec82611044565b64ffffffffff1664ffffffffff0361100657506000919050565b600061101183611141565b60405110199392505050565b60008061102c6060601861177a565b9290921c6bffffffffffffffffffffffff1692915050565b600080606061105481601861177a565b61105e919061177a565b9290921c92915050565b6000806110748661101d565b6bffffffffffffffffffffffff16905061108d86611141565b84611098878461177a565b6110a2919061177a565b11156110b55762ffffff19915050610525565b6110bf858261177a565b90506104728364ffffffffff168286610dec565b606060006110e08661117a565b91505060006110ee8661117a565b91505060006110fc8661117a565b915050600061110a8661117a565b91505083838383604051602001611124949392919061178d565b604051602081830303815290604052945050505050949350505050565b600061115b8260181c6bffffffffffffffffffffffff1690565b6111648361101d565b016bffffffffffffffffffffffff169050919050565b600080601f5b600f8160ff1611156111ed576000611199826008611744565b60ff1685901c90506111aa81611264565b61ffff16841793508160ff166010146111c557601084901b93505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01611180565b50600f5b60ff8160ff16101561125e57600061120a826008611744565b60ff1685901c905061121b81611264565b61ffff16831792508160ff1660001461123657601083901b92505b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff016111f1565b50915091565b600061127660048360ff16901c611296565b60ff1661ffff919091161760081b61128d82611296565b60ff1617919050565b6040805180820190915260108082527f30313233343536373839616263646566000000000000000000000000000000006020830152600091600f841691829081106112e3576112e36118ca565b016020015160f81c9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261133257600080fd5b813567ffffffffffffffff8082111561134d5761134d6112f2565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611393576113936112f2565b816040528381528660208588010111156113ac57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156113de57600080fd5b813567ffffffffffffffff8111156113f557600080fd5b61052584828501611321565b60006020828403121561141357600080fd5b5035919050565b803564ffffffffff8116811461142f57600080fd5b919050565b60006060828403121561144657600080fd5b6040516060810181811067ffffffffffffffff82111715611469576114696112f2565b6040528235815290508061147f6020840161141a565b60208201526114906040840161141a565b60408201525092915050565b600080608083850312156114af57600080fd5b823567ffffffffffffffff8111156114c657600080fd5b6114d285828601611321565b9250506114e28460208501611434565b90509250929050565b803563ffffffff8116811461142f57600080fd5b600080600080600060a0868803121561151757600080fd5b85359450611527602087016114eb565b9350611535604087016114eb565b92506115436060870161141a565b91506115516080870161141a565b90509295509295909350565b6000815180845260005b8181101561158357602081850181015186830182015201611567565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6020815260006103df602083018461155d565b600060a082840312156115e657600080fd5b60405160a0810181811067ffffffffffffffff82111715611609576116096112f2565b6040528235815261161c602084016114eb565b602082015261162d604084016114eb565b604082015261163e6060840161141a565b606082015261164f6080840161141a565b60808201529392505050565b60008060006060848603121561167057600080fd5b611679846114eb565b92506116876020850161141a565b91506116956040850161141a565b90509250925092565b600080600060a084860312156116b357600080fd5b6116bd8585611434565b92506116cb606085016114eb565b9150611695608085016114eb565b600080604083850312156116ec57600080fd5b823591506114e2602084016114eb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60ff8281168282160390811115610378576103786116fc565b60ff8181168382160290811690818114611760576117606116fc565b5092915050565b81810381811115610378576103786116fc565b80820180821115610378576103786116fc565b7f54797065644d656d566965772f696e646578202d204f76657272616e2074686581527f20766965772e20536c696365206973206174203078000000000000000000000060208201527fffffffffffff000000000000000000000000000000000000000000000000000060d086811b821660358401527f2077697468206c656e6774682030780000000000000000000000000000000000603b840181905286821b8316604a8501527f2e20417474656d7074656420746f20696e646578206174206f6666736574203060508501527f7800000000000000000000000000000000000000000000000000000000000000607085015285821b83166071850152607784015283901b1660868201527f2e00000000000000000000000000000000000000000000000000000000000000608c8201526000608d8201610472565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fdfea2646970667358221220239ac01aadb57c4f1144ddc1982b4f06e9af0cc72f1691782b7fa1ebb4e5566064736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\n// \nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n// \n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref({ newType: 0 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              SIGNATURE                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 _view) internal pure returns (Signature) {\n        require(isSignature(_view), \"Not a signature\");\n        return Signature.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature _signature) internal pure returns (bytes29) {\n        return Signature.unwrap(_signature);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature _signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_signature);\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               CALLDATA                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory _payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 _view) internal pure returns (CallData) {\n        require(isCallData(_view), \"Not a calldata\");\n        return CallData.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData _callData) internal pure returns (bytes29) {\n        return CallData.unwrap(_callData);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           CALLDATA SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData _callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.slice({ _index: OFFSET_SELECTOR, _len: SELECTOR_LENGTH, newType: 0 });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: 0 });\n    }\n}\n\n// \n// Here we define common constants to enable their easier reusing later.\n/// @dev See Attestation.sol: (bytes32,uint8,uint32,uint40,uint40): 32+1+4+5+5\nuint256 constant ATTESTATION_LENGTH = 47;\n\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n\n/// @dev Maximum amount of states in a single snapshot\nuint256 constant SNAPSHOT_MAX_STATES = 32;\n\n/// @dev Root for an empty Origin Merkle Tree.\nbytes32 constant EMPTY_ROOT = hex\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\";\n\n/// @dev Depth of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_DEPTH = 32;\n\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n/**\n * @dev Custom address used for sending and receiving system messages.\n *  - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n *  - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n *  - As a result: only SystemRouter messages will have this value as both sender and recipient.\n * Note: all bits except for lower 20 bytes are set to 1.\n * Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\n */\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// \n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing {\n    StateLib.unwrap,\n    StateLib.equalToOrigin,\n    StateLib.hash,\n    StateLib.subLeafs,\n    StateLib.toSummitState,\n    StateLib.root,\n    StateLib.origin,\n    StateLib.nonce,\n    StateLib.blockNumber,\n    StateLib.timestamp\n} for State global;\n\n/// @dev Struct representing State, as it is stored in the Origin contract.\nstruct OriginState {\n    bytes32 root;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 176 bits left for tight packing\n}\n\n/// @dev Attach library functions to OriginState\nusing { StateLib.formatOriginState } for OriginState global;\n\n/// @dev Struct representing State, as it is stored in the Summit contract.\nstruct SummitState {\n    bytes32 root;\n    uint32 origin;\n    uint32 nonce;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 112 bits left for tight packing\n}\n\n/// @dev Attach library functions to SummitState\nusing { StateLib.formatSummitState } for SummitState global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every dispatched message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was dispatched in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was dispatched.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of dispatched messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last dispatched message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last dispatched message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                STATE                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param _root         New merkle root\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _blockNumber  Block number when root was saved in Origin\n     * @param _timestamp    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     **/\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory _payload) internal pure returns (State) {\n        return castToState(_payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 _view) internal pure returns (State) {\n        require(isState(_view), \"Not a state\");\n        return State.wrap(_view);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State _state) internal pure returns (bytes29) {\n        return State.unwrap(_state);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _originState  State struct as it is stored in Origin contract\n     * @return Formatted state\n     */\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) internal pure returns (bytes memory) {\n        return\n            formatState({\n                _root: _originState.root,\n                _origin: _origin,\n                _nonce: _nonce,\n                _blockNumber: _originState.blockNumber,\n                _timestamp: _originState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Origin contract.\n    /// Current block number and timestamp are used.\n    function originState(bytes32 currentRoot) internal view returns (OriginState memory state) {\n        state.root = currentRoot;\n        state.blockNumber = uint40(block.number);\n        state.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that a state and its Origin representation are equal.\n    function equalToOrigin(State _state, OriginState memory _originState)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            _state.root() == _originState.root \u0026\u0026\n            _state.blockNumber() == _originState.blockNumber \u0026\u0026\n            _state.timestamp() == _originState.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _summitState  State struct as it is stored in Summit contract\n     * @return Formatted state\n     */\n    function formatSummitState(SummitState memory _summitState)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatState({\n                _root: _summitState.root,\n                _origin: _summitState.origin,\n                _nonce: _summitState.nonce,\n                _blockNumber: _summitState.blockNumber,\n                _timestamp: _summitState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Summit contract.\n    function toSummitState(State _state) internal pure returns (SummitState memory state) {\n        state.root = _state.root();\n        state.origin = _state.origin();\n        state.nonce = _state.nonce();\n        state.blockNumber = _state.blockNumber();\n        state.timestamp = _state.timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE HASHING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function hash(State _state) internal pure returns (bytes32) {\n        (bytes32 _leftLeaf, bytes32 _rightLeaf) = _state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(_leftLeaf, _rightLeaf));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State _state) internal pure returns (bytes32 _leftLeaf, bytes32 _rightLeaf) {\n        bytes29 _view = _state.unwrap();\n        // Left leaf is (root, origin)\n        _leftLeaf = _view.prefix({ _len: OFFSET_NONCE, newType: 0 }).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        _rightLeaf = _view.sliceFrom({ _index: OFFSET_NONCE, newType: 0 }).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 _root, uint32 _origin) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_root, _origin));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_nonce, _blockNumber, _timestamp));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE SLICING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State _state) internal pure returns (bytes32) {\n        bytes29 _view = _state.unwrap();\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_BLOCK_NUMBER, _bytes: 5 }));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_TIMESTAMP, _bytes: 5 }));\n    }\n}\n\n// \n/**\n * @notice Exposes State methods for testing against golang.\n */\ncontract StateHarness {\n    using StateLib for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToState(bytes memory _payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        State _state = StateLib.castToState(_payload);\n        return _state.unwrap().clone();\n    }\n\n    function hash(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().hash();\n    }\n\n    function subLeafs(bytes memory _payload) public pure returns (bytes32, bytes32) {\n        return _payload.castToState().subLeafs();\n    }\n\n    function leftLeaf(bytes32 _root, uint32 _origin) public pure returns (bytes32) {\n        return StateLib.leftLeaf(_root, _origin);\n    }\n\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes32) {\n        return StateLib.rightLeaf(_nonce, _blockNumber, _timestamp);\n    }\n\n    function root(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().root();\n    }\n\n    function origin(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().origin();\n    }\n\n    function nonce(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().nonce();\n    }\n\n    function blockNumber(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().blockNumber();\n    }\n\n    function timestamp(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) public pure returns (bytes memory) {\n        return _originState.formatOriginState(_origin, _nonce);\n    }\n\n    function originState(bytes32 _root) public view returns (OriginState memory state) {\n        return StateLib.originState(_root);\n    }\n\n    function equalToOrigin(bytes memory _payload, OriginState memory _originState)\n        public\n        pure\n        returns (bool)\n    {\n        return _payload.castToState().equalToOrigin(_originState);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitState(SummitState memory _summitState) public pure returns (bytes memory) {\n        return _summitState.formatSummitState();\n    }\n\n    function toSummitState(bytes memory _payload) public pure returns (SummitState memory state) {\n        return _payload.castToState().toSummitState();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           STATE FORMATTERS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes memory) {\n        return StateLib.formatState(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    function isState(bytes memory _payload) public pure returns (bool) {\n        return _payload.ref(0).isState();\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"58627:5259:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"58627:5259:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;60820:129;;;;;;:::i;:::-;;:::i;:::-;;;1484:12:1;1472:25;;;1454:44;;1442:2;1427:18;60820:129:0;;;;;;;;61728:134;;;;;;:::i;:::-;;:::i;:::-;;;;1916:13:1;;1898:32;;1977:4;1965:17;;;1959:24;2002:12;2052:21;;;2030:20;;;2023:51;;;;2122:17;;;2116:24;2112:33;;;2090:20;;;2083:63;1886:2;1871:18;61728:134:0;1694:458:1;61868:208:0;;;;;;:::i;:::-;;:::i;:::-;;;3498:14:1;;3491:22;3473:41;;3461:2;3446:18;61868:208:0;3333:187:1;63480:282:0;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;62622:151::-;;;;;;:::i;:::-;;:::i;60554:121::-;;;;;;:::i;:::-;;:::i;:::-;;;5785:10:1;5773:23;;;5755:42;;5743:2;5728:18;60554:121:0;5611:192:1;60083:210:0;;;;;;:::i;:::-;;:::i;:::-;;;6287:25:1;;;6275:2;6260:18;60083:210:0;6141:177:1;59328:338:0;;;;;;:::i;:::-;;:::i;62779:155::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;6473:4:1;6515:3;6504:9;6500:19;6492:27;;6552:6;6546:13;6535:9;6528:32;6607:4;6599:6;6595:17;6589:24;6632:10;6698:2;6684:12;6680:21;6673:4;6662:9;6658:20;6651:51;6770:2;6762:4;6754:6;6750:17;6744:24;6740:33;6733:4;6722:9;6718:20;6711:63;;;6823:4;6815:6;6811:17;6805:24;6848:12;6918:2;6902:14;6898:23;6891:4;6880:9;6876:20;6869:53;6990:2;6982:4;6974:6;6970:17;6964:24;6960:33;6953:4;6942:9;6938:20;6931:63;;;6323:677;;;;;59798:137:0;;;;;;:::i;:::-;;:::i;:::-;;;;7179:25:1;;;7235:2;7220:18;;7213:34;;;;7152:18;59798:137:0;7005:248:1;59672:120:0;;;;;;:::i;:::-;;:::i;63768:116::-;;;;;;:::i;:::-;;:::i;60299:120::-;;;;;;:::i;:::-;;:::i;60425:123::-;;;;;;:::i;:::-;;:::i;61495:227::-;;;;;;:::i;:::-;;:::i;60681:133::-;;;;;;:::i;:::-;;:::i;59941:136::-;;;;;;:::i;:::-;;:::i;60820:129::-;60883:6;60908:34;:22;:8;:20;:22::i;:::-;-1:-1:-1;;60908:32:0;;:34::i;:::-;60901:41;60820:129;-1:-1:-1;;60820:129:0:o;61728:134::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;61828:27:0;61849:5;-1:-1:-1;;;;;;;;52163:24:0;;;52224:12;52197:40;;;;-1:-1:-1;;;52197:40:0;52272:15;52247:41;-1:-1:-1;;;52247:41:0;-1:-1:-1;52062:233:0;61868:208;61992:4;62019:50;62056:12;62019:22;:8;:20;:22::i;:::-;-1:-1:-1;;62019:36:0;;;:50::i;:::-;62012:57;61868:208;-1:-1:-1;;;61868:208:0:o;63480:282::-;49666:66;;;;;;8134:19:1;;;8172:66;8276:3;8272:16;;;8268:25;;8254:12;;;8247:47;8328:16;;;8324:25;8310:12;;;8303:47;8369:66;8473:3;8469:16;;;8465:25;;8451:12;;;8444:47;8525:16;;;8521:25;8507:12;;;8500:47;49666:66:0;;;;;;;;;8563:12:1;;;;49666:66:0;;;63654:12;;63685:70;63678:77;63480:282;-1:-1:-1;;;;;;63480:282:0:o;62622:151::-;62703:12;62734:32;:12;:30;:32::i;60554:121::-;60613:6;60638:30;:22;:8;:20;:22::i;:::-;-1:-1:-1;;60638:28:0;;:30::i;60083:210::-;56524:50;;;8799:66:1;8785:3;8781:16;;;8777:89;56524:50:0;;;;8765:102:1;;;;8886:66;8989:3;8985:16;;;8981:25;;8968:11;;;8961:46;9040:16;;;9036:25;9023:11;;;9016:46;56524:50:0;;;;;;;;;9078:12:1;;;;56524:50:0;;;56514:61;;;;;-1:-1:-1;;60234:52:0;60227:59;60083:210;-1:-1:-1;;;;60083:210:0:o;59328:338::-;59393:12;59574;59589:30;59610:8;59589:20;:30::i;:::-;59574:45;-1:-1:-1;59636:23:0;-1:-1:-1;;59636:13:0;;:21;:23::i;62779:155::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;62889:38:0;:22;:8;:20;:22::i;:::-;-1:-1:-1;;62889:36:0;;:38::i;59798:137::-;59860:7;59869;59895:33;:22;:8;:20;:22::i;:::-;-1:-1:-1;;59895:31:0;;:33::i;:::-;59888:40;;;;59798:137;;;:::o;59672:120::-;59730:7;59756:29;:22;:8;:20;:22::i;:::-;-1:-1:-1;;59756:27:0;;:29::i;63768:116::-;63829:4;63852:25;:15;:8;63829:4;63852:12;:15::i;:::-;-1:-1:-1;;63852:23:0;3282:2;18718:23;3675:16;18714:41;44632:2;50449:27;;50371:112;60299:120;60357:7;60383:29;:22;:8;:20;:22::i;:::-;-1:-1:-1;;60383:27:0;;:29::i;60425:123::-;60485:6;60510:31;:22;:8;:20;:22::i;:::-;-1:-1:-1;;60510:29:0;;:31::i;61495:227::-;61637:12;61668:47;:12;61699:7;61708:6;61668:30;:47::i;60681:133::-;60746:6;60771:36;:22;:8;:20;:22::i;:::-;-1:-1:-1;;60771:34:0;;:36::i;59941:136::-;60011:7;60037:33;60055:5;60062:7;60037:17;:33::i;49876:136::-;49943:5;49967:38;49979:25;:8;:23;:25::i;:::-;49967:11;:38::i;58357:193::-;58413:6;-1:-1:-1;;58447:13:0;;58486:56;58447:13;48497:2;58538:1;58486:15;:56::i;52378:321::-;52551:17;;52495:4;;52534:13;-1:-1:-1;;52534:11:0;;;:13::i;:::-;:34;:98;;;;-1:-1:-1;52608:24:0;;;;52584:48;;:20;-1:-1:-1;;52584:18:0;;;:20::i;:::-;:48;;;52534:98;:158;;;;-1:-1:-1;52670:22:0;;;;52648:44;;:18;-1:-1:-1;;52648:16:0;;;:18::i;:::-;:44;;;;52378:321;-1:-1:-1;;;52378:321:0:o;53439:428::-;53546:12;53593:267;53630:12;:17;;;53674:12;:19;;;53719:12;:18;;;53769:12;:24;;;53823:12;:22;;;49666:66;;;;;;8134:19:1;;;;8276:3;8272:16;;;8172:66;8268:25;;;8254:12;;;8247:47;8328:16;;;;8324:25;;;8310:12;;;8303:47;8473:3;8469:16;;;8369:66;8465:25;;;8451:12;;;8444:47;8525:16;;;8521:25;8507:12;;;8500:47;49666:66:0;;;;;;;;;8563:12:1;;;;49666:66:0;;;49459:280;57749:185;57801:6;-1:-1:-1;;57835:13:0;;57874:52;57835:13;48390:2;57922:1;57874:15;:52::i;31737:632::-;31792:16;31820:11;31841:12;31856;31860:7;3282:2;18718:23;3675:16;18714:41;;18198:573;31856:12;31841:27;;;;31978:4;31972:11;31965:18;;32033:3;32026:10;;32079:33;32092:7;32101:3;32107:4;32101:10;32079:12;:33::i;:::-;-1:-1:-1;32236:14:0;;;32252:4;32232:25;32226:4;32219:39;32299:17;;31737:632;;-1:-1:-1;31737:632:0:o;53938:303::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;54047:13:0;-1:-1:-1;;54047:11:0;;;:13::i;:::-;54034:26;;54085:15;-1:-1:-1;;54085:13:0;;;:15::i;:::-;54070:30;;:12;;;:30;54124:14;-1:-1:-1;;54124:12:0;;;:14::i;:::-;54110:28;;:11;;;:28;54168:20;-1:-1:-1;;54168:18:0;;;:20::i;:::-;54148:40;;:17;;;:40;54216:18;-1:-1:-1;;54216:16:0;;;:18::i;:::-;54198:36;;:15;;;:36;:5;53938:303;-1:-1:-1;53938:303:0:o;55523:417::-;55578:17;;-1:-1:-1;;55643:13:0;;55719:57;:48;55643:13;48390:2;55578:17;55719:12;:48::i;:::-;-1:-1:-1;;55719:55:0;;:57::i;:::-;55707:69;-1:-1:-1;55871:62:0;:53;-1:-1:-1;;55871:15:0;;48390:2;55920:1;55871:15;:53::i;:62::-;55858:75;;55617:323;55523:417;;;:::o;54928:250::-;54979:7;;;55040:17;-1:-1:-1;;55040:15:0;;;:17::i;:::-;55135:35;;;;;;;9258:19:1;;;;9293:12;;;9286:28;;;;55135:35:0;;;;;;;;;9330:12:1;;;;55135:35:0;;55125:46;;;;;;54928:250;-1:-1:-1;;;;54928:250:0:o;14807:595::-;14911:10;;14877:7;;15337:4;15328:14;;15369:26;;;;15328:14;14911:10;15369:5;:26::i;:::-;15362:33;14807:595;-1:-1:-1;;;;;14807:595:0:o;57203:173::-;57254:7;-1:-1:-1;;57289:13:0;;57321:48;57289:13;57254:7;57364:2;57321:11;:48::i;57461:187::-;57514:6;-1:-1:-1;;57548:13:0;;57587:53;57548:13;48342:2;57636:1;57587:15;:53::i;51501:437::-;51725:17;;51840:24;;;;;51894:22;;;;;49666:66;;;;;8134:19:1;;;;8172:66;8276:3;8272:16;;;8268:25;;8254:12;;;8247:47;8328:16;;;8324:25;8310:12;;;8303:47;8369:66;8473:3;8469:16;;;8465:25;;8451:12;;;8444:47;8525:16;;;;8521:25;;;8507:12;;;8500:47;49666:66:0;;;;;;;;;8563:12:1;;;;49666:66:0;;;51645:12;;51688:243;49459:280;58012:198;58070:6;-1:-1:-1;;58104:13:0;;58143:59;58104:13;48445:2;58198:1;58143:15;:59::i;56004:220::-;56076:7;56201:5;56208:7;56184:32;;;;;;;;9508:19:1;;;9565:3;9561:16;9579:66;9557:89;9552:2;9543:12;;9536:111;9672:2;9663:12;;9353:328;56184:32:0;;;;;;;;;;;;;56174:43;;;;;;56167:50;;56004:220;;;;:::o;37298:131::-;37368:7;37394:28;:8;37368:7;37394:12;:28::i;50150:155::-;50209:5;50234:14;50242:5;3282:2;18718:23;3675:16;18714:41;44632:2;50449:27;;50371:112;50234:14;50226:38;;;;;;;9888:2:1;50226:38:0;;;9870:21:1;9927:2;9907:18;;;9900:30;9966:13;9946:18;;;9939:41;9997:18;;50226:38:0;;;;;;;;;-1:-1:-1;50292:5:0;50150:155::o;24001:374::-;24120:14;24351:11;24356:6;24351:2;:11;:::i;:::-;24350:17;;24366:1;24350:17;:::i;:::-;24306:62;;24314:30;24320:7;24329:6;24337;24314:5;:30::i;:::-;24306:62;;;24001:374;-1:-1:-1;;;;24001:374:0:o;30474:892::-;30552:15;-1:-1:-1;;8067:15:0;;;;30579:55;;;;;;;10803:2:1;30579:55:0;;;10785:21:1;10842:2;10822:18;;;10815:30;10881:28;10861:18;;;10854:56;10927:18;;30579:55:0;10601:350:1;30579:55:0;30652:16;30660:7;30652;:16::i;:::-;30644:58;;;;;;;11158:2:1;30644:58:0;;;11140:21:1;11197:2;11177:18;;;11170:30;11236:31;11216:18;;;11209:59;11285:18;;30644:58:0;10956:353:1;30644:58:0;30712:12;30727;30731:7;3282:2;18718:23;3675:16;18714:41;;18198:573;30727:12;30712:27;;;;30749:15;30767:12;30771:7;30767:3;:12::i;:::-;30749:30;;;;30790:11;30811:8;30929:4;30923:11;30916:18;;31016:7;31011:3;31008:16;31005:94;;;31056:4;31050;31043:18;31005:94;31226:4;31217:7;31211:4;31202:7;31196:4;31189:5;31178:53;31171:60;;31258:3;31250:36;;;;;;;11516:2:1;31250:36:0;;;11498:21:1;11555:2;11535:18;;;11528:30;11594:22;11574:18;;;11567:50;11634:18;;31250:36:0;11314:344:1;31250:36:0;31307:52;31328:15;31335:7;31328:6;:15::i;:::-;12961:33;3194:2;12961:33;;;;13099:17;;13085:32;;13222:17;;3282:2;13206:34;;12320:936;31307:52;31297:62;30474:892;-1:-1:-1;;;;;;;30474:892:0:o;20557:181::-;20673:7;20699:32;20705:7;20714:1;20717:4;20723:7;20699:5;:32::i;25555:290::-;25611:14;25637:12;25652;25656:7;25652:3;:12::i;:::-;25637:27;;;;25674:12;25689;25693:7;3282:2;18718:23;3675:16;18714:41;;18198:573;25689:12;25674:27;;25808:21;;;;25555:290;-1:-1:-1;;;25555:290:0:o;20081:208::-;20202:7;20228:54;20234:7;20243:6;20266;20251:12;20255:7;3282:2;18718:23;3675:16;18714:41;;18198:573;20251:12;:21;;;;;;:::i;:::-;20274:7;20228:5;:54::i;13795:615::-;13906:15;;13948:11;13955:4;13948;:11;:::i;:::-;13933:26;;14227:4;14221:11;14215:4;14212:21;14209:66;;;-1:-1:-1;14260:1:0;14209:66;14298:4;14306:1;14298:9;14294:51;;-1:-1:-1;;14323:11:0;;;;;14294:51;-1:-1:-1;;3194:2:0;12961:33;;;13099:17;;;;13085:32;;;13222:17;3282:2;13206:34;;13795:615::o;22765:890::-;22880:14;22910:6;:11;;22920:1;22910:11;22906:59;;-1:-1:-1;22952:1:0;22937:17;;22906:59;22996:12;23000:7;3282:2;18718:23;3675:16;18714:41;;18198:573;22996:12;22978:30;;:15;;;;:6;:15;:::i;:::-;:30;22974:137;;;23031:68;23047:12;23051:7;23047:3;:12::i;:::-;23031:68;;23061:12;23065:7;3282:2;18718:23;3675:16;18714:41;;18198:573;23061:12;23031:68;;23075:6;23091;23083:15;;23031;:68::i;:::-;23024:76;;;;;;;;;;;:::i;22974:137::-;23138:2;23128:6;:12;;;;23120:50;;;;;;;12352:2:1;23120:50:0;;;12334:21:1;12391:2;12371:18;;;12364:30;12430:27;12410:18;;;12403:55;12475:18;;23120:50:0;12150:349:1;23120:50:0;23251:1;23242:10;;23181:15;23287:12;23291:7;23287:3;:12::i;:::-;23272:27;;;-1:-1:-1;23365:13:0;7541:66;7511:12;;;7490:131;23613:17;;;;23607:24;23603:36;;;-1:-1:-1;;;;;22765:890:0:o;8740:465::-;8797:8;8821:15;8828:7;8821:6;:15::i;:::-;:31;;8840:12;8821:31;8817:74;;-1:-1:-1;8875:5:0;;8740:465;-1:-1:-1;8740:465:0:o;8817:74::-;8900:12;8915;8919:7;8915:3;:12::i;:::-;9182:4;9176:11;-1:-1:-1;9163:26:0;;8740:465;-1:-1:-1;;;8740:465:0:o;16761:573::-;16814:11;;3466:20;3237:2;3282;3466:20;:::i;:::-;17281:23;;;;3675:16;17277:41;;16761:573;-1:-1:-1;;16761:573:0:o;15594:504::-;15650:12;;3194:2;3466:20;3194:2;3282;3466:20;:::i;:::-;3546;;;;:::i;:::-;16058:24;;;;;15594:504;-1:-1:-1;;15594:504:0:o;19372:399::-;19511:7;19530:12;19545;19549:7;19545:3;:12::i;:::-;19530:27;;;;19641:12;19645:7;19641:3;:12::i;:::-;19634:4;19618:13;19625:6;19618:4;:13;:::i;:::-;:20;;;;:::i;:::-;:35;19614:77;;;-1:-1:-1;;19669:11:0;;;;;19614:77;19708:13;19715:6;19708:4;:13;:::i;:::-;19701:20;;19738:26;19744:7;19738:26;;19753:4;19759;19738:5;:26::i;21522:741::-;21668:17;21700:9;21713:15;21723:4;21713:9;:15::i;:::-;21697:31;;;21741:9;21754:15;21764:4;21754:9;:15::i;:::-;21738:31;;;21782:9;21795:17;21805:6;21795:9;:17::i;:::-;21779:33;;;21825:9;21838:17;21848:6;21838:9;:17::i;:::-;21822:33;;;22005:1;22067;22147;22209;21891:355;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;21865:391;;21687:576;;;;21522:741;;;;;;:::o;18945:147::-;18998:7;19063:12;19067:7;3282:2;18718:23;3675:16;18714:41;;18198:573;19063:12;19048;19052:7;19048:3;:12::i;:::-;:27;19041:34;;;;18945:147;;;:::o;4885:667::-;4939:13;;4995:2;4980:258;5003:2;4999:1;:6;;;4980:258;;;5023:11;5050:5;:1;5054;5050:5;:::i;:::-;5043:13;;:2;:13;;5023:34;;5080:14;5088:5;5080:7;:14::i;:::-;5071:23;;;;;;5112:1;:7;;5117:2;5112:7;5108:58;;5149:2;5139:12;;;;;5108:58;-1:-1:-1;5207:6:0;;4980:258;;;-1:-1:-1;5301:2:0;5286:260;5309:3;5305:1;:7;;;5286:260;;;5330:11;5357:5;:1;5361;5357:5;:::i;:::-;5350:13;;:2;:13;;5330:34;;5388:14;5396:5;5388:7;:14::i;:::-;5378:24;;;;;;5420:1;:6;;5425:1;5420:6;5416:58;;5457:2;5446:13;;;;;5416:58;-1:-1:-1;5515:6:0;;5286:260;;;;4885:667;;;:::o;4362:199::-;4412:14;4449:18;4465:1;4459:2;:7;;;;4449:9;:18::i;:::-;4438:29;;4491:13;;;;;;4503:1;4491:13;4525;4535:2;4525:9;:13::i;:::-;4514:24;;;;4362:199;-1:-1:-1;4362:199:0:o;3987:203::-;4160:13;;;;;;;;;;;;;;;;;;4042:11;;4089:4;4081:12;;;;;4160:22;;;;;;:::i;:::-;;;;;;;;3987:203;-1:-1:-1;;;3987:203:0:o;14:184:1:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:777;245:5;298:3;291:4;283:6;279:17;275:27;265:55;;316:1;313;306:12;265:55;352:6;339:20;378:18;415:2;411;408:10;405:36;;;421:18;;:::i;:::-;555:2;549:9;617:4;609:13;;460:66;605:22;;;629:2;601:31;597:40;585:53;;;653:18;;;673:22;;;650:46;647:72;;;699:18;;:::i;:::-;739:10;735:2;728:22;774:2;766:6;759:18;820:3;813:4;808:2;800:6;796:15;792:26;789:35;786:55;;;837:1;834;827:12;786:55;901:2;894:4;886:6;882:17;875:4;867:6;863:17;850:54;948:1;941:4;936:2;928:6;924:15;920:26;913:37;968:6;959:15;;;;;;203:777;;;;:::o;985:320::-;1053:6;1106:2;1094:9;1085:7;1081:23;1077:32;1074:52;;;1122:1;1119;1112:12;1074:52;1162:9;1149:23;1195:18;1187:6;1184:30;1181:50;;;1227:1;1224;1217:12;1181:50;1250:49;1291:7;1282:6;1271:9;1267:22;1250:49;:::i;1509:180::-;1568:6;1621:2;1609:9;1600:7;1596:23;1592:32;1589:52;;;1637:1;1634;1627:12;1589:52;-1:-1:-1;1660:23:1;;1509:180;-1:-1:-1;1509:180:1:o;2157:165::-;2224:20;;2284:12;2273:24;;2263:35;;2253:63;;2312:1;2309;2302:12;2253:63;2157:165;;;:::o;2327:552::-;2385:5;2433:4;2421:9;2416:3;2412:19;2408:30;2405:50;;;2451:1;2448;2441:12;2405:50;2484:2;2478:9;2526:4;2518:6;2514:17;2597:6;2585:10;2582:22;2561:18;2549:10;2546:34;2543:62;2540:88;;;2608:18;;:::i;:::-;2644:2;2637:22;2707:23;;2692:39;;2677:6;-1:-1:-1;2677:6:1;2764:37;2797:2;2782:18;;2764:37;:::i;:::-;2759:2;2751:6;2747:15;2740:62;2835:37;2868:2;2857:9;2853:18;2835:37;:::i;:::-;2830:2;2822:6;2818:15;2811:62;;2327:552;;;;:::o;2884:444::-;2990:6;2998;3051:3;3039:9;3030:7;3026:23;3022:33;3019:53;;;3068:1;3065;3058:12;3019:53;3108:9;3095:23;3141:18;3133:6;3130:30;3127:50;;;3173:1;3170;3163:12;3127:50;3196:49;3237:7;3228:6;3217:9;3213:22;3196:49;:::i;:::-;3186:59;;;3264:58;3314:7;3309:2;3298:9;3294:18;3264:58;:::i;:::-;3254:68;;2884:444;;;;;:::o;3525:163::-;3592:20;;3652:10;3641:22;;3631:33;;3621:61;;3678:1;3675;3668:12;3693:470;3784:6;3792;3800;3808;3816;3869:3;3857:9;3848:7;3844:23;3840:33;3837:53;;;3886:1;3883;3876:12;3837:53;3922:9;3909:23;3899:33;;3951:37;3984:2;3973:9;3969:18;3951:37;:::i;:::-;3941:47;;4007:37;4040:2;4029:9;4025:18;4007:37;:::i;:::-;3997:47;;4063:37;4096:2;4085:9;4081:18;4063:37;:::i;:::-;4053:47;;4119:38;4152:3;4141:9;4137:19;4119:38;:::i;:::-;4109:48;;3693:470;;;;;;;;:::o;4168:481::-;4209:3;4247:5;4241:12;4274:6;4269:3;4262:19;4299:1;4309:162;4323:6;4320:1;4317:13;4309:162;;;4385:4;4441:13;;;4437:22;;4431:29;4413:11;;;4409:20;;4402:59;4338:12;4309:162;;;4313:3;4516:1;4509:4;4500:6;4495:3;4491:16;4487:27;4480:38;4638:4;4568:66;4563:2;4555:6;4551:15;4547:88;4542:3;4538:98;4534:109;4527:116;;;4168:481;;;;:::o;4654:217::-;4801:2;4790:9;4783:21;4764:4;4821:44;4861:2;4850:9;4846:18;4838:6;4821:44;:::i;4876:730::-;4964:6;5017:3;5005:9;4996:7;4992:23;4988:33;4985:53;;;5034:1;5031;5024:12;4985:53;5067:2;5061:9;5109:3;5101:6;5097:16;5179:6;5167:10;5164:22;5143:18;5131:10;5128:34;5125:62;5122:88;;;5190:18;;:::i;:::-;5226:2;5219:22;5265:23;;5250:39;;5322:37;5355:2;5340:18;;5322:37;:::i;:::-;5317:2;5309:6;5305:15;5298:62;5393:37;5426:2;5415:9;5411:18;5393:37;:::i;:::-;5388:2;5380:6;5376:15;5369:62;5464:37;5497:2;5486:9;5482:18;5464:37;:::i;:::-;5459:2;5451:6;5447:15;5440:62;5536:38;5569:3;5558:9;5554:19;5536:38;:::i;:::-;5530:3;5518:16;;5511:64;5522:6;4876:730;-1:-1:-1;;;4876:730:1:o;5808:328::-;5882:6;5890;5898;5951:2;5939:9;5930:7;5926:23;5922:32;5919:52;;;5967:1;5964;5957:12;5919:52;5990:28;6008:9;5990:28;:::i;:::-;5980:38;;6037:37;6070:2;6059:9;6055:18;6037:37;:::i;:::-;6027:47;;6093:37;6126:2;6115:9;6111:18;6093:37;:::i;:::-;6083:47;;5808:328;;;;;:::o;7258:381::-;7362:6;7370;7378;7431:3;7419:9;7410:7;7406:23;7402:33;7399:53;;;7448:1;7445;7438:12;7399:53;7471:49;7512:7;7501:9;7471:49;:::i;:::-;7461:59;;7539:37;7572:2;7561:9;7557:18;7539:37;:::i;:::-;7529:47;;7595:38;7628:3;7617:9;7613:19;7595:38;:::i;7644:252::-;7711:6;7719;7772:2;7760:9;7751:7;7747:23;7743:32;7740:52;;;7788:1;7785;7778:12;7740:52;7824:9;7811:23;7801:33;;7853:37;7886:2;7875:9;7871:18;7853:37;:::i;10026:184::-;10078:77;10075:1;10068:88;10175:4;10172:1;10165:15;10199:4;10196:1;10189:15;10215:151;10305:4;10298:12;;;10284;;;10280:31;;10323:14;;10320:40;;;10340:18;;:::i;10371:225::-;10475:4;10454:12;;;10468;;;10450:31;10501:22;;;;10542:24;;;10532:58;;10570:18;;:::i;:::-;10532:58;10371:225;;;;:::o;11663:128::-;11730:9;;;11751:11;;;11748:37;;;11765:18;;:::i;11796:125::-;11861:9;;;11882:10;;;11879:36;;;11895:18;;:::i;12623:1391::-;13345:34;13333:47;;13410:23;13405:2;13396:12;;13389:45;13453:66;13557:3;13553:16;;;13549:25;;13544:2;13535:12;;13528:47;13594:17;13636:2;13627:12;;13620:24;;;13678:16;;;13674:25;;13669:2;13660:12;;13653:47;13730:34;13725:2;13716:12;;13709:56;13796:3;13790;13781:13;;13774:26;13835:16;;;13831:25;;13825:3;13816:13;;13809:48;13882:3;13873:13;;13866:25;13926:16;;;13922:25;13916:3;13907:13;;13900:48;12581:3;14003;13994:13;;12569:16;-1:-1:-1;12601:11:1;;;13964:44;12504:114;14019:184;14071:77;14068:1;14061:88;14168:4;14165:1;14158:15;14192:4;14189:1;14182:15","abiDefinition":[{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"blockNumber","outputs":[{"internalType":"uint40","name":"","type":"uint40"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"castToState","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"},{"components":[{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint40","name":"blockNumber","type":"uint40"},{"internalType":"uint40","name":"timestamp","type":"uint40"}],"internalType":"struct OriginState","name":"_originState","type":"tuple"}],"name":"equalToOrigin","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint40","name":"blockNumber","type":"uint40"},{"internalType":"uint40","name":"timestamp","type":"uint40"}],"internalType":"struct OriginState","name":"_originState","type":"tuple"},{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_nonce","type":"uint32"}],"name":"formatOriginState","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"},{"internalType":"uint32","name":"_origin","type":"uint32"},{"internalType":"uint32","name":"_nonce","type":"uint32"},{"internalType":"uint40","name":"_blockNumber","type":"uint40"},{"internalType":"uint40","name":"_timestamp","type":"uint40"}],"name":"formatState","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint32","name":"origin","type":"uint32"},{"internalType":"uint32","name":"nonce","type":"uint32"},{"internalType":"uint40","name":"blockNumber","type":"uint40"},{"internalType":"uint40","name":"timestamp","type":"uint40"}],"internalType":"struct SummitState","name":"_summitState","type":"tuple"}],"name":"formatSummitState","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"hash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"isState","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"},{"internalType":"uint32","name":"_origin","type":"uint32"}],"name":"leftLeaf","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"nonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"origin","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_root","type":"bytes32"}],"name":"originState","outputs":[{"components":[{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint40","name":"blockNumber","type":"uint40"},{"internalType":"uint40","name":"timestamp","type":"uint40"}],"internalType":"struct OriginState","name":"state","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"_nonce","type":"uint32"},{"internalType":"uint40","name":"_blockNumber","type":"uint40"},{"internalType":"uint40","name":"_timestamp","type":"uint40"}],"name":"rightLeaf","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"subLeafs","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"timestamp","outputs":[{"internalType":"uint40","name":"","type":"uint40"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"_payload","type":"bytes"}],"name":"toSummitState","outputs":[{"components":[{"internalType":"bytes32","name":"root","type":"bytes32"},{"internalType":"uint32","name":"origin","type":"uint32"},{"internalType":"uint32","name":"nonce","type":"uint32"},{"internalType":"uint40","name":"blockNumber","type":"uint40"},{"internalType":"uint40","name":"timestamp","type":"uint40"}],"internalType":"struct SummitState","name":"state","type":"tuple"}],"stateMutability":"pure","type":"function"}],"userDoc":{"kind":"user","methods":{},"notice":"Exposes State methods for testing against golang.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"castToState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct OriginState\",\"name\":\"_originState\",\"type\":\"tuple\"}],\"name\":\"equalToOrigin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct OriginState\",\"name\":\"_originState\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"}],\"name\":\"formatOriginState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"_blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_timestamp\",\"type\":\"uint40\"}],\"name\":\"formatState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct SummitState\",\"name\":\"_summitState\",\"type\":\"tuple\"}],\"name\":\"formatSummitState\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"isState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"}],\"name\":\"leftLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"originState\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct OriginState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"_blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"_timestamp\",\"type\":\"uint40\"}],\"name\":\"rightLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"subLeafs\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"toSummitState\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct SummitState\",\"name\":\"state\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Exposes State methods for testing against golang.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/StateHarness.t.sol\":\"StateHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/StateHarness.t.sol\":{\"keccak256\":\"0x3d6aa5b2be1522343ba11e542ffbab1ed85a55744b6217ed3826291458ec711d\",\"urls\":[\"bzz-raw://4d042df57a077a2e1a8a6c29db8d01d34a44a0abc442718cfcb49e975e0ccd9f\",\"dweb:/ipfs/QmbCSgSpNf59Tq4KWLHfotGj7DtdBTatonEGVLWJykFEnm\"]}},\"version\":1}"},"hashes":{"blockNumber(bytes)":"e948e600","castToState(bytes)":"5fed0261","equalToOrigin(bytes,(bytes32,uint40,uint40))":"3047b5ea","formatOriginState((bytes32,uint40,uint40),uint32,uint32)":"e8643e25","formatState(bytes32,uint32,uint32,uint40,uint40)":"365b4b67","formatSummitState((bytes32,uint32,uint32,uint40,uint40))":"461e44d3","hash(bytes)":"aa1e84de","isState(bytes)":"aae6d884","leftLeaf(bytes32,uint32)":"edaa471d","nonce(bytes)":"4e765004","origin(bytes)":"cb3eb0e1","originState(bytes32)":"1efcb714","rightLeaf(uint32,uint40,uint40)":"503d0bed","root(bytes)":"c2e9e208","subLeafs(bytes)":"9aaa1826","timestamp(bytes)":"1c9aa222","toSummitState(bytes)":"9677fe8d"}},"solidity/StateHarness.t.sol:StateLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208718e9eb7fa7d038dab5316bd74e0f08ffa1400f3c4ac35345e8d75ec2e3dcb364736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208718e9eb7fa7d038dab5316bd74e0f08ffa1400f3c4ac35345e8d75ec2e3dcb364736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\n// \nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n// \n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref({ newType: 0 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              SIGNATURE                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 _view) internal pure returns (Signature) {\n        require(isSignature(_view), \"Not a signature\");\n        return Signature.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature _signature) internal pure returns (bytes29) {\n        return Signature.unwrap(_signature);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature _signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_signature);\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               CALLDATA                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory _payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 _view) internal pure returns (CallData) {\n        require(isCallData(_view), \"Not a calldata\");\n        return CallData.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData _callData) internal pure returns (bytes29) {\n        return CallData.unwrap(_callData);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           CALLDATA SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData _callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.slice({ _index: OFFSET_SELECTOR, _len: SELECTOR_LENGTH, newType: 0 });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: 0 });\n    }\n}\n\n// \n// Here we define common constants to enable their easier reusing later.\n/// @dev See Attestation.sol: (bytes32,uint8,uint32,uint40,uint40): 32+1+4+5+5\nuint256 constant ATTESTATION_LENGTH = 47;\n\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n\n/// @dev Maximum amount of states in a single snapshot\nuint256 constant SNAPSHOT_MAX_STATES = 32;\n\n/// @dev Root for an empty Origin Merkle Tree.\nbytes32 constant EMPTY_ROOT = hex\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\";\n\n/// @dev Depth of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_DEPTH = 32;\n\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n/**\n * @dev Custom address used for sending and receiving system messages.\n *  - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n *  - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n *  - As a result: only SystemRouter messages will have this value as both sender and recipient.\n * Note: all bits except for lower 20 bytes are set to 1.\n * Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\n */\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// \n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing {\n    StateLib.unwrap,\n    StateLib.equalToOrigin,\n    StateLib.hash,\n    StateLib.subLeafs,\n    StateLib.toSummitState,\n    StateLib.root,\n    StateLib.origin,\n    StateLib.nonce,\n    StateLib.blockNumber,\n    StateLib.timestamp\n} for State global;\n\n/// @dev Struct representing State, as it is stored in the Origin contract.\nstruct OriginState {\n    bytes32 root;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 176 bits left for tight packing\n}\n\n/// @dev Attach library functions to OriginState\nusing { StateLib.formatOriginState } for OriginState global;\n\n/// @dev Struct representing State, as it is stored in the Summit contract.\nstruct SummitState {\n    bytes32 root;\n    uint32 origin;\n    uint32 nonce;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 112 bits left for tight packing\n}\n\n/// @dev Attach library functions to SummitState\nusing { StateLib.formatSummitState } for SummitState global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every dispatched message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was dispatched in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was dispatched.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of dispatched messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last dispatched message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last dispatched message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                STATE                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param _root         New merkle root\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _blockNumber  Block number when root was saved in Origin\n     * @param _timestamp    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     **/\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory _payload) internal pure returns (State) {\n        return castToState(_payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 _view) internal pure returns (State) {\n        require(isState(_view), \"Not a state\");\n        return State.wrap(_view);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State _state) internal pure returns (bytes29) {\n        return State.unwrap(_state);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _originState  State struct as it is stored in Origin contract\n     * @return Formatted state\n     */\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) internal pure returns (bytes memory) {\n        return\n            formatState({\n                _root: _originState.root,\n                _origin: _origin,\n                _nonce: _nonce,\n                _blockNumber: _originState.blockNumber,\n                _timestamp: _originState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Origin contract.\n    /// Current block number and timestamp are used.\n    function originState(bytes32 currentRoot) internal view returns (OriginState memory state) {\n        state.root = currentRoot;\n        state.blockNumber = uint40(block.number);\n        state.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that a state and its Origin representation are equal.\n    function equalToOrigin(State _state, OriginState memory _originState)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            _state.root() == _originState.root \u0026\u0026\n            _state.blockNumber() == _originState.blockNumber \u0026\u0026\n            _state.timestamp() == _originState.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _summitState  State struct as it is stored in Summit contract\n     * @return Formatted state\n     */\n    function formatSummitState(SummitState memory _summitState)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatState({\n                _root: _summitState.root,\n                _origin: _summitState.origin,\n                _nonce: _summitState.nonce,\n                _blockNumber: _summitState.blockNumber,\n                _timestamp: _summitState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Summit contract.\n    function toSummitState(State _state) internal pure returns (SummitState memory state) {\n        state.root = _state.root();\n        state.origin = _state.origin();\n        state.nonce = _state.nonce();\n        state.blockNumber = _state.blockNumber();\n        state.timestamp = _state.timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE HASHING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function hash(State _state) internal pure returns (bytes32) {\n        (bytes32 _leftLeaf, bytes32 _rightLeaf) = _state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(_leftLeaf, _rightLeaf));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State _state) internal pure returns (bytes32 _leftLeaf, bytes32 _rightLeaf) {\n        bytes29 _view = _state.unwrap();\n        // Left leaf is (root, origin)\n        _leftLeaf = _view.prefix({ _len: OFFSET_NONCE, newType: 0 }).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        _rightLeaf = _view.sliceFrom({ _index: OFFSET_NONCE, newType: 0 }).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 _root, uint32 _origin) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_root, _origin));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_nonce, _blockNumber, _timestamp));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE SLICING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State _state) internal pure returns (bytes32) {\n        bytes29 _view = _state.unwrap();\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_BLOCK_NUMBER, _bytes: 5 }));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_TIMESTAMP, _bytes: 5 }));\n    }\n}\n\n// \n/**\n * @notice Exposes State methods for testing against golang.\n */\ncontract StateHarness {\n    using StateLib for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToState(bytes memory _payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        State _state = StateLib.castToState(_payload);\n        return _state.unwrap().clone();\n    }\n\n    function hash(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().hash();\n    }\n\n    function subLeafs(bytes memory _payload) public pure returns (bytes32, bytes32) {\n        return _payload.castToState().subLeafs();\n    }\n\n    function leftLeaf(bytes32 _root, uint32 _origin) public pure returns (bytes32) {\n        return StateLib.leftLeaf(_root, _origin);\n    }\n\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes32) {\n        return StateLib.rightLeaf(_nonce, _blockNumber, _timestamp);\n    }\n\n    function root(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().root();\n    }\n\n    function origin(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().origin();\n    }\n\n    function nonce(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().nonce();\n    }\n\n    function blockNumber(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().blockNumber();\n    }\n\n    function timestamp(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) public pure returns (bytes memory) {\n        return _originState.formatOriginState(_origin, _nonce);\n    }\n\n    function originState(bytes32 _root) public view returns (OriginState memory state) {\n        return StateLib.originState(_root);\n    }\n\n    function equalToOrigin(bytes memory _payload, OriginState memory _originState)\n        public\n        pure\n        returns (bool)\n    {\n        return _payload.castToState().equalToOrigin(_originState);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitState(SummitState memory _summitState) public pure returns (bytes memory) {\n        return _summitState.formatSummitState();\n    }\n\n    function toSummitState(bytes memory _payload) public pure returns (SummitState memory state) {\n        return _payload.castToState().toSummitState();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           STATE FORMATTERS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes memory) {\n        return StateLib.formatState(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    function isState(bytes memory _payload) public pure returns (bool) {\n        return _payload.ref(0).isState();\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"46701:11851:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;46701:11851:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"46701:11851:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_ROOT":{"details":"State structure represents the state of Origin contract at some point of time. State is structured in a way to track the updates of the Origin Merkle Tree. State includes root of the Origin Merkle Tree, origin domain and some additional metadata. Hash of every dispatched message is inserted in the Origin Merkle Tree, which changes the value of Origin Merkle Root (which is the root for the mentioned tree). Origin has a single Merkle Tree for all messages, regardless of their destination domain. This leads to Origin state being updated if and only if a message was dispatched in a block. Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin, if it matches the state of the Origin contract after the N-th (nonce) message was dispatched.Memory layout of State fields [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located [036 .. 040): nonce          uint32   4 bytes    Amount of dispatched messages [040 .. 045): blockNumber    uint40   5 bytes    Block of last dispatched message [045 .. 050): timestamp      uint40   5 bytes    Time of last dispatched message The variables below are not supposed to be used outside of the library directly."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_ROOT\":{\"details\":\"State structure represents the state of Origin contract at some point of time. State is structured in a way to track the updates of the Origin Merkle Tree. State includes root of the Origin Merkle Tree, origin domain and some additional metadata. Hash of every dispatched message is inserted in the Origin Merkle Tree, which changes the value of Origin Merkle Root (which is the root for the mentioned tree). Origin has a single Merkle Tree for all messages, regardless of their destination domain. This leads to Origin state being updated if and only if a message was dispatched in a block. Origin contract is a \\\"source of truth\\\" for states: a state is considered \\\"valid\\\" in its Origin, if it matches the state of the Origin contract after the N-th (nonce) message was dispatched.Memory layout of State fields [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located [036 .. 040): nonce          uint32   4 bytes    Amount of dispatched messages [040 .. 045): blockNumber    uint40   5 bytes    Block of last dispatched message [045 .. 050): timestamp      uint40   5 bytes    Time of last dispatched message The variables below are not supposed to be used outside of the library directly.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/StateHarness.t.sol\":\"StateLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/StateHarness.t.sol\":{\"keccak256\":\"0x3d6aa5b2be1522343ba11e542ffbab1ed85a55744b6217ed3826291458ec711d\",\"urls\":[\"bzz-raw://4d042df57a077a2e1a8a6c29db8d01d34a44a0abc442718cfcb49e975e0ccd9f\",\"dweb:/ipfs/QmbCSgSpNf59Tq4KWLHfotGj7DtdBTatonEGVLWJykFEnm\"]}},\"version\":1}"},"hashes":{}},"solidity/StateHarness.t.sol:TypedMemView":{"code":"0x6101f061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212202c6c07ba1e34c010dac53fdc3a2867cb0a726078eeac364414c7b866da866afc64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212202c6c07ba1e34c010dac53fdc3a2867cb0a726078eeac364414c7b866da866afc64736f6c63430008110033","info":{"source":"pragma solidity 0.8.17;\n\n\n// \nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param _byte     The byte\n     * @return _char    The encoded hex character\n     */\n    function nibbleHex(uint8 _byte) internal pure returns (uint8 _char) {\n        uint8 _nibble = _byte \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        _char = uint8(NIBBLE_LOOKUP[_nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param _b    The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(_b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(_b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param _b    The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            first |= byteHex(_byte);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255; ) {\n            uint8 _byte = uint8(_b \u003e\u003e (i * 8));\n            second |= byteHex(_byte);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param _b        The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\n        v = _b;\n\n        // swap bytes\n        v =\n            ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\n            ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v =\n            ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\n            ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v =\n            ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\n            ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v =\n            ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\n            ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `_len` bits set.\n     * @param _len  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(\n                sub(_len, 1),\n                0x8000000000000000000000000000000000000000000000000000000000000000\n            )\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 memView) internal pure returns (bool) {\n        return memView == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 memView) internal pure returns (bool) {\n        return !isNull(memView);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param memView   The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\n        if (typeOf(memView) == 0xffffffffff) {\n            return false;\n        }\n        uint256 _end = end(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(_end, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\n        require(isValid(memView), \"Validity assertion failed\");\n        return memView;\n    }\n\n    /**\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bool - True if the memview is of the expected type\n     */\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\n        return typeOf(memView) == _expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param memView   The view\n     * @param _expected The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\n        if (!isType(memView, _expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\n            (, uint256 e) = encodeHex(uint256(_expected));\n            string memory err = string(\n                abi.encodePacked(\n                    \"Type assertion failed. Got 0x\",\n                    uint80(g),\n                    \". Expected 0x\",\n                    uint80(e)\n                )\n            );\n            revert(err);\n        }\n        return memView;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param memView   The view\n     * @param _newType  The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 _bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(_bitsType, shl(_bitsType, memView)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(_shiftType, _newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) private pure returns (bytes29 newView) {\n        uint256 _bitsLoc = BITS_LOC;\n        uint256 _bitsLen = BITS_LEN;\n        uint256 _bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(_bitsLoc, or(newView, _type))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(_bitsLen, or(newView, _loc))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(_bitsEmpty, or(newView, _len))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param _type     The type\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(\n        uint256 _type,\n        uint256 _loc,\n        uint256 _len\n    ) internal pure returns (bytes29 newView) {\n        uint256 _end = _loc + _len;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(_end, mload(0x40)) {\n                _end := 0\n            }\n        }\n        if (_end == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 _len = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 _loc;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            _loc := add(arr, 0x20)\n        }\n\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param memView   The memory view\n     * @return          _type - The type associated with the view\n     */\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 _shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            _type := shr(_shiftType, memView)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param memView   The view\n     * @return          _loc - The memory address\n     */\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 _shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            _loc := and(shr(_shiftLoc, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param memView   The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 memView) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(memView)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param memView   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 memView) internal pure returns (uint256) {\n        return words(memView) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param memView   The view\n     * @return          _len - The length of the view\n     */\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 _shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 _uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            _len := and(shr(_shiftLen, memView), _uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `memView`.\n     * @param memView   The view\n     * @return          uint256 - The endpoint of `memView`\n     */\n    function end(bytes29 memView) internal pure returns (uint256) {\n        unchecked {\n            return loc(memView) + len(memView);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param memView   The view\n     * @param _index    The start index\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(\n        bytes29 memView,\n        uint256 _index,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        uint256 _loc = loc(memView);\n\n        // Ensure it doesn't overrun the view\n        if (_loc + _index + _len \u003e end(memView)) {\n            return NULL;\n        }\n\n        _loc = _loc + _index;\n        return build(newType, _loc, _len);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `_index` to end(memView).\n     * @param memView   The view\n     * @param _index    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(\n        bytes29 memView,\n        uint256 _index,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, _index, len(memView) - _index, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, 0, _len, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\n     * @param memView   The view\n     * @param _len      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(\n        bytes29 memView,\n        uint256 _len,\n        uint40 newType\n    ) internal pure returns (bytes29) {\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param _loc      The memory address\n     * @param _len      The length\n     * @param _index    The index\n     * @param _slice    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(\n        uint256 _loc,\n        uint256 _len,\n        uint256 _index,\n        uint256 _slice\n    ) internal pure returns (string memory err) {\n        (, uint256 a) = encodeHex(_loc);\n        (, uint256 b) = encodeHex(_len);\n        (, uint256 c) = encodeHex(_index);\n        (, uint256 d) = encodeHex(_slice);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (bytes32 result) {\n        if (_bytes == 0) {\n            return bytes32(0);\n        }\n        if (_index + _bytes \u003e len(memView)) {\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\n        }\n        require(_bytes \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = _bytes * 8;\n        }\n        uint256 _loc = loc(memView);\n        // Get a mask with `bitLength` highest bits set\n        uint256 _mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(_loc, _index)), _mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `_index`.\n     * @dev             Requires that the view have \u003e= `_bytes` bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `_bytes`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(memView, _index, _bytes)) \u003e\u003e ((32 - _bytes) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param memView   The view\n     * @param _index    The index\n     * @param _bytes    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(\n        bytes29 memView,\n        uint256 _index,\n        uint8 _bytes\n    ) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `_index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param memView   The view\n     * @param _index    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(memView, _index, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param memView   The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(_loc, _len)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param memView   The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param memView   The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param memView   A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\n        uint256 _loc = loc(memView);\n        uint256 _len = len(memView);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, _loc, _len, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return\n            (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memView   The view\n     * @param _newLoc   The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\n        require(notNull(memView), \"copyTo: Null pointer deref\");\n        require(isValid(memView), \"copyTo: Invalid pointer deref\");\n        uint256 _len = len(memView);\n        uint256 _oldLoc = loc(memView);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _newLoc) {\n                revert(0x60, 0x20) // empty revert message\n            }\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, _oldLoc, _len, _newLoc, _len)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param memView   The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 _len = len(memView);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(memView, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\n            mstore(ptr, _len) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location)\n        private\n        view\n        returns (bytes29 unsafeView)\n    {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, _location) {\n                revert(0x60, 0x20) // empty revert message\n            }\n        }\n\n        uint256 _offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 memView = memViews[i];\n            unchecked {\n                unsafeCopyTo(memView, _location + _offset);\n                _offset += len(memView);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 _newView;\n        unchecked {\n            _newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 _written = len(_newView);\n        uint256 _footprint = footprint(_newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, _written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n// \n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory _payload) internal pure returns (bytes29) {\n        return _payload.ref({ newType: 0 });\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                              SIGNATURE                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(\n        bytes32 r,\n        bytes32 s,\n        uint8 v\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory _payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 _view) internal pure returns (Signature) {\n        require(isSignature(_view), \"Not a signature\");\n        return Signature.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature _signature) internal pure returns (bytes29) {\n        return Signature.unwrap(_signature);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SIGNATURE SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature _signature)\n        internal\n        pure\n        returns (\n            bytes32 r,\n            bytes32 s,\n            uint8 v\n        )\n    {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_signature);\n        r = _view.index({ _index: OFFSET_R, _bytes: 32 });\n        s = _view.index({ _index: OFFSET_S, _bytes: 32 });\n        v = uint8(_view.indexUint({ _index: OFFSET_V, _bytes: 1 }));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               CALLDATA                               ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory _payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(_payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 _view) internal pure returns (CallData) {\n        require(isCallData(_view), \"Not a calldata\");\n        return CallData.wrap(_view);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 _view) internal pure returns (bool) {\n        uint256 length = _view.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N words (N \u003e= 0), i.e.\n        // (length - SELECTOR_LENGTH) % 32 == 0\n        // We're using logical AND here to speed it up a bit\n        return (length - SELECTOR_LENGTH) \u0026 31 == 0;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData _callData) internal pure returns (bytes29) {\n        return CallData.unwrap(_callData);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           CALLDATA SLICING                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData _callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (_view.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.slice({ _index: OFFSET_SELECTOR, _len: SELECTOR_LENGTH, newType: 0 });\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData _callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 _view = unwrap(_callData);\n        return _view.sliceFrom({ _index: OFFSET_ARGUMENTS, newType: 0 });\n    }\n}\n\n// \n// Here we define common constants to enable their easier reusing later.\n/// @dev See Attestation.sol: (bytes32,uint8,uint32,uint40,uint40): 32+1+4+5+5\nuint256 constant ATTESTATION_LENGTH = 47;\n\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n\n/// @dev Maximum amount of states in a single snapshot\nuint256 constant SNAPSHOT_MAX_STATES = 32;\n\n/// @dev Root for an empty Origin Merkle Tree.\nbytes32 constant EMPTY_ROOT = hex\"27ae5ba08d7291c96c8cbddcc148bf48a6d68c7974b94356f53754ef6171d757\";\n\n/// @dev Depth of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_DEPTH = 32;\n\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_MESSAGE_BODY_BYTES = 2 * 2**10;\n\n/**\n * @dev Custom address used for sending and receiving system messages.\n *  - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n *  - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n *  - As a result: only SystemRouter messages will have this value as both sender and recipient.\n * Note: all bits except for lower 20 bytes are set to 1.\n * Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\n */\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// \n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing {\n    StateLib.unwrap,\n    StateLib.equalToOrigin,\n    StateLib.hash,\n    StateLib.subLeafs,\n    StateLib.toSummitState,\n    StateLib.root,\n    StateLib.origin,\n    StateLib.nonce,\n    StateLib.blockNumber,\n    StateLib.timestamp\n} for State global;\n\n/// @dev Struct representing State, as it is stored in the Origin contract.\nstruct OriginState {\n    bytes32 root;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 176 bits left for tight packing\n}\n\n/// @dev Attach library functions to OriginState\nusing { StateLib.formatOriginState } for OriginState global;\n\n/// @dev Struct representing State, as it is stored in the Summit contract.\nstruct SummitState {\n    bytes32 root;\n    uint32 origin;\n    uint32 nonce;\n    uint40 blockNumber;\n    uint40 timestamp;\n    // 112 bits left for tight packing\n}\n\n/// @dev Attach library functions to SummitState\nusing { StateLib.formatSummitState } for SummitState global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every dispatched message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was dispatched in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was dispatched.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of dispatched messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last dispatched message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last dispatched message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                                STATE                                 ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param _root         New merkle root\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _blockNumber  Block number when root was saved in Origin\n     * @param _timestamp    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     **/\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory _payload) internal pure returns (State) {\n        return castToState(_payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 _view) internal pure returns (State) {\n        require(isState(_view), \"Not a state\");\n        return State.wrap(_view);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 _view) internal pure returns (bool) {\n        return _view.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State _state) internal pure returns (bytes29) {\n        return State.unwrap(_state);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _origin       Domain of Origin's chain\n     * @param _nonce        Nonce of the merkle root\n     * @param _originState  State struct as it is stored in Origin contract\n     * @return Formatted state\n     */\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) internal pure returns (bytes memory) {\n        return\n            formatState({\n                _root: _originState.root,\n                _origin: _origin,\n                _nonce: _nonce,\n                _blockNumber: _originState.blockNumber,\n                _timestamp: _originState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Origin contract.\n    /// Current block number and timestamp are used.\n    function originState(bytes32 currentRoot) internal view returns (OriginState memory state) {\n        state.root = currentRoot;\n        state.blockNumber = uint40(block.number);\n        state.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that a state and its Origin representation are equal.\n    function equalToOrigin(State _state, OriginState memory _originState)\n        internal\n        pure\n        returns (bool)\n    {\n        return\n            _state.root() == _originState.root \u0026\u0026\n            _state.blockNumber() == _originState.blockNumber \u0026\u0026\n            _state.timestamp() == _originState.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted State payload with provided fields.\n     * @param _summitState  State struct as it is stored in Summit contract\n     * @return Formatted state\n     */\n    function formatSummitState(SummitState memory _summitState)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return\n            formatState({\n                _root: _summitState.root,\n                _origin: _summitState.origin,\n                _nonce: _summitState.nonce,\n                _blockNumber: _summitState.blockNumber,\n                _timestamp: _summitState.timestamp\n            });\n    }\n\n    /// @notice Returns a struct to save in the Summit contract.\n    function toSummitState(State _state) internal pure returns (SummitState memory state) {\n        state.root = _state.root();\n        state.origin = _state.origin();\n        state.nonce = _state.nonce();\n        state.blockNumber = _state.blockNumber();\n        state.timestamp = _state.timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE HASHING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function hash(State _state) internal pure returns (bytes32) {\n        (bytes32 _leftLeaf, bytes32 _rightLeaf) = _state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(_leftLeaf, _rightLeaf));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State _state) internal pure returns (bytes32 _leftLeaf, bytes32 _rightLeaf) {\n        bytes29 _view = _state.unwrap();\n        // Left leaf is (root, origin)\n        _leftLeaf = _view.prefix({ _len: OFFSET_NONCE, newType: 0 }).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        _rightLeaf = _view.sliceFrom({ _index: OFFSET_NONCE, newType: 0 }).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 _root, uint32 _origin) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_root, _origin));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(_nonce, _blockNumber, _timestamp));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                            STATE SLICING                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State _state) internal pure returns (bytes32) {\n        bytes29 _view = _state.unwrap();\n        return _view.index({ _index: OFFSET_ROOT, _bytes: 32 });\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_ORIGIN, _bytes: 4 }));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State _state) internal pure returns (uint32) {\n        bytes29 _view = _state.unwrap();\n        return uint32(_view.indexUint({ _index: OFFSET_NONCE, _bytes: 4 }));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_BLOCK_NUMBER, _bytes: 5 }));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State _state) internal pure returns (uint40) {\n        bytes29 _view = _state.unwrap();\n        return uint40(_view.indexUint({ _index: OFFSET_TIMESTAMP, _bytes: 5 }));\n    }\n}\n\n// \n/**\n * @notice Exposes State methods for testing against golang.\n */\ncontract StateHarness {\n    using StateLib for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToState(bytes memory _payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        State _state = StateLib.castToState(_payload);\n        return _state.unwrap().clone();\n    }\n\n    function hash(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().hash();\n    }\n\n    function subLeafs(bytes memory _payload) public pure returns (bytes32, bytes32) {\n        return _payload.castToState().subLeafs();\n    }\n\n    function leftLeaf(bytes32 _root, uint32 _origin) public pure returns (bytes32) {\n        return StateLib.leftLeaf(_root, _origin);\n    }\n\n    function rightLeaf(\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes32) {\n        return StateLib.rightLeaf(_nonce, _blockNumber, _timestamp);\n    }\n\n    function root(bytes memory _payload) public pure returns (bytes32) {\n        return _payload.castToState().root();\n    }\n\n    function origin(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().origin();\n    }\n\n    function nonce(bytes memory _payload) public pure returns (uint32) {\n        return _payload.castToState().nonce();\n    }\n\n    function blockNumber(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().blockNumber();\n    }\n\n    function timestamp(bytes memory _payload) public pure returns (uint40) {\n        return _payload.castToState().timestamp();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ORIGIN STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatOriginState(\n        OriginState memory _originState,\n        uint32 _origin,\n        uint32 _nonce\n    ) public pure returns (bytes memory) {\n        return _originState.formatOriginState(_origin, _nonce);\n    }\n\n    function originState(bytes32 _root) public view returns (OriginState memory state) {\n        return StateLib.originState(_root);\n    }\n\n    function equalToOrigin(bytes memory _payload, OriginState memory _originState)\n        public\n        pure\n        returns (bool)\n    {\n        return _payload.castToState().equalToOrigin(_originState);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             SUMMIT STATE                             ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitState(SummitState memory _summitState) public pure returns (bytes memory) {\n        return _summitState.formatSummitState();\n    }\n\n    function toSummitState(bytes memory _payload) public pure returns (SummitState memory state) {\n        return _payload.castToState().toSummitState();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                           STATE FORMATTERS                           ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatState(\n        bytes32 _root,\n        uint32 _origin,\n        uint32 _nonce,\n        uint40 _blockNumber,\n        uint40 _timestamp\n    ) public pure returns (bytes memory) {\n        return StateLib.formatState(_root, _origin, _nonce, _blockNumber, _timestamp);\n    }\n\n    function isState(bytes memory _payload) public pure returns (bool) {\n        return _payload.ref(0).isState();\n    }\n}","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"30:35667:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;30:35667:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"30:35667:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3115:38;;3151:2;3115:38;;;;;168:25:1;;;156:2;141:18;3115:38:0;;;;;;;;3372:46;;3282:2;3372:46;;3509:57;;;:::i;3430:56::-;;;:::i;3632:59::-;;3675:16;3632:59;;3202:37;;3237:2;3202:37;;2544:94;;;;;;;;388:66:1;376:79;;;358:98;;346:2;331:18;2544:94:0;204:258:1;3509:57:0;3194:2;3466:20;3194:2;3282;3466:20;:::i;:::-;3546;;;;:::i;:::-;3509:57;:::o;3430:56::-;3466:20;3237:2;3282;467:279:1;532:9;;;553:10;;;550:190;;;596:77;593:1;586:88;697:4;694:1;687:15;725:4;722:1;715:15;550:190;467:279;;;;:::o","abiDefinition":[{"inputs":[],"name":"BITS_EMPTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LOW_96_BITS_MASK","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NULL","outputs":[{"internalType":"bytes29","name":"","type":"bytes29"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"BITS_TYPE":{"details":"Memory layout for bytes29 TODO (Chi): with the user defined types storing type is no longer necessary. Update the library, transforming bytes29 to bytes24 in the process. [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BITS_EMPTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOW_96_BITS_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"BITS_TYPE\":{\"details\":\"Memory layout for bytes29 TODO (Chi): with the user defined types storing type is no longer necessary. Update the library, transforming bytes29 to bytes24 in the process. [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/StateHarness.t.sol\":\"TypedMemView\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/StateHarness.t.sol\":{\"keccak256\":\"0x3d6aa5b2be1522343ba11e542ffbab1ed85a55744b6217ed3826291458ec711d\",\"urls\":[\"bzz-raw://4d042df57a077a2e1a8a6c29db8d01d34a44a0abc442718cfcb49e975e0ccd9f\",\"dweb:/ipfs/QmbCSgSpNf59Tq4KWLHfotGj7DtdBTatonEGVLWJykFEnm\"]}},\"version\":1}"},"hashes":{"BITS_EMPTY()":"97b8ad4a","BITS_LEN()":"eb740628","BITS_LOC()":"fb734584","BITS_TYPE()":"10153fce","LOW_96_BITS_MASK()":"b602d173","NULL()":"f26be3fc","SHIFT_LEN()":"1136e7ea","SHIFT_LOC()":"1bfe17ce","SHIFT_TYPE()":"13090c5a"}}}
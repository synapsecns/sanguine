{"solidity/SnapshotHarness.t.sol:ByteString":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122012267f15a66c6cdcf47440d39307411cd05c518749e7d3c82ddabf57e036d1ab64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122012267f15a66c6cdcf47440d39307411cd05c518749e7d3c82ddabf57e036d1ab64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"35474:9169:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;35474:9169:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"35474:9169:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SELECTOR_LENGTH":{"details":"Calldata memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes"},"SIGNATURE_LENGTH":{"details":"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SELECTOR_LENGTH\":{\"details\":\"Calldata memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes\"},\"SIGNATURE_LENGTH\":{\"details\":\"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"ByteString\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{}},"solidity/SnapshotHarness.t.sol:MerkleLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220caacfffc546081be7e8da141d981a3f431ddc0bdbe9a01f4f1b1c58a8eb6b5f864736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220caacfffc546081be7e8da141d981a3f431ddc0bdbe9a01f4f1b1c58a8eb6b5f864736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"51928:10303:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;51928:10303:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"51928:10303:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"MerkleLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{}},"solidity/SnapshotHarness.t.sol:MerkleList":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004dc0fabeb49937bd274c911f1dfaf9c49bc210474ec2ac11978d808df0d621364736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122004dc0fabeb49937bd274c911f1dfaf9c49bc210474ec2ac11978d808df0d621364736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"62233:5449:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;62233:5449:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"62233:5449:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"MerkleList\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{}},"solidity/SnapshotHarness.t.sol:SnapshotHarness":{"code":"","runtime-code":"0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063925ea6871161005b578063925ea687146100ef578063a641fa3314610102578063aa1e84de14610115578063c2e9e2081461012857600080fd5b80631406cde114610082578063450701c5146100ab5780638aae3c34146100cc575b600080fd5b61009561009036600461109a565b61013b565b6040516100a291906110df565b60405180910390f35b6100be6100b936600461114b565b610179565b6040519081526020016100a2565b6100df6100da36600461114b565b610192565b60405190151581526020016100a2565b6100956100fd36600461114b565b6101ac565b610095610110366004611180565b6101d1565b6100be61012336600461114b565b610293565b6100be61013636600461114b565b6102ac565b606061017061016561015c84610150876102c5565b62ffffff1916906102d8565b62ffffff191690565b62ffffff191661039a565b90505b92915050565b6000610173610187836102c5565b62ffffff19166103ed565b60006101736101a18383610413565b62ffffff191661042e565b606060006101b9836102c5565b90506101ca62ffffff198216610165565b9392505050565b805160609060008167ffffffffffffffff8111156101f1576101f1610f8e565b60405190808252806020026020018201604052801561021a578160200160208202803683370190505b50905060005b828110156102815761024a85828151811061023d5761023d611243565b602002602001015161046e565b82828151811061025c5761025c611243565b62ffffff199092166020928302919091019091015261027a816112a1565b9050610220565b5061028b81610481565b949350505050565b60006101736102a1836102c5565b62ffffff19166105ae565b60006101736102ba836102c5565b62ffffff1916610611565b60006101736102d3836106fc565b610708565b600062ffffff198316816102ed6032856112d9565b9050601882901c6bffffffffffffffffffffffff16811061036f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f537461746520696e646578206f7574206f662072616e6765000000000000000060448201526064015b60405180910390fd5b61039161038662ffffff198416836032600061077d565b62ffffff19166107f2565b95945050505050565b60606000806103b78460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16905060405191508192506103dc8483602001610875565b508181016020016040529052919050565b600062ffffff1982166101ca6032601885901c6bffffffffffffffffffffffff166112f0565b81516000906020840161039164ffffffffff85168284610a5c565b6000601882901c6bffffffffffffffffffffffff168161044f6032836112f0565b90508161045d6032836112d9565b14801561028b575061028b81610aa3565b600061017361047c836106fc565b6107f2565b606061048d8251610aa3565b6104f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f496e76616c69642073746174657320616d6f756e7400000000000000000000006044820152606401610366565b815160008167ffffffffffffffff81111561051057610510610f8e565b604051908082528060200260200182016040528015610539578160200160208202803683370190505b50905060005b828110156105a45761056d85828151811061055c5761055c611243565b602002602001015162ffffff191690565b82828151811061057f5761057f611243565b62ffffff199092166020928302919091019091015261059d816112a1565b905061053f565b5061028b81610ac8565b600062ffffff1982167fdfe02260445526f7b137cb9caf995dcdead56fff547ac8de4b3e3305217231486105e182610b27565b60408051602081019390935282015260600160405160208183030381529060405280519060200120915050919050565b60008061062362ffffff1984166103ed565b905060008167ffffffffffffffff81111561064057610640610f8e565b604051908082528060200260200182016040528015610669578160200160208202803683370190505b50905060005b828110156106c25761069561068a62ffffff198716836102d8565b62ffffff1916610b75565b8282815181106106a7576106a7611243565b60209081029190910101526106bb816112a1565b905061066f565b506106d8816106d36001600661132b565b610bb9565b806000815181106106eb576106eb611243565b602002602001015192505050919050565b60006101738282610413565b60006107138261042e565b610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f4e6f74206120736e617073686f740000000000000000000000000000000000006044820152606401610366565b5090565b60008061078986610d02565b6bffffffffffffffffffffffff1690506107a286610d29565b846107ad878461133e565b6107b7919061133e565b11156107ca5762ffffff1991505061028b565b6107d4858261133e565b90506107e88364ffffffffff168286610a5c565b9695505050505050565b600061080f8260181c6bffffffffffffffffffffffff1660321490565b610779576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600b60248201527f4e6f7420612073746174650000000000000000000000000000000000000000006044820152606401610366565b600062ffffff19808416036108e6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f636f7079546f3a204e756c6c20706f696e7465722064657265660000000000006044820152606401610366565b6108ef83610d62565b610955576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f636f7079546f3a20496e76616c696420706f696e7465722064657265660000006044820152606401610366565b600061096f8460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169050600061098a85610d02565b6bffffffffffffffffffffffff1690506000806040519150858211156109b05760206060fd5b8386858560045afa905080610a21576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f6964656e746974793a206f7574206f66206761730000000000000000000000006044820152606401610366565b610a51610a2d88610d9e565b70ffffffffff000000000000000000000000606091821b168817901b851760181b90565b979650505050505050565b600080610a69838561133e565b9050604051811115610a79575060005b80600003610a8e5762ffffff199150506101ca565b5050606092831b9190911790911b1760181b90565b600080821180156101735750610abb6001600661132b565b6001901b82111592915050565b6040516060906000610add8460208401610dc2565b90506000610af98260181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1690506000610b1483610e5c565b9184525082016020016040525092915050565b600080610b3383610d02565b6bffffffffffffffffffffffff1690506000610b5d8460181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff169091209392505050565b60008080610b8862ffffff198516610e72565b6040805160208082019490945280820192909252805180830382018152606090920190528051910120949350505050565b81516001821b811115610c28576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f48656967687420746f6f206c6f770000000000000000000000000000000000006044820152606401610366565b60005b82811015610cfc5760005b82811015610cdb576000610c4b82600161133e565b90506000868381518110610c6157610c61611243565b602002602001015190506000858310610c7b576000610c96565b878381518110610c8d57610c8d611243565b60200260200101515b9050610ca28282610eb6565b88600186901c81518110610cb857610cb8611243565b602002602001018181525050505050600281610cd4919061133e565b9050610c36565b506001610ce8838261133e565b901c9150610cf5816112a1565b9050610c2b565b50505050565b600080610d116060601861133e565b9290921c6bffffffffffffffffffffffff1692915050565b6000610d438260181c6bffffffffffffffffffffffff1690565b610d4c83610d02565b016bffffffffffffffffffffffff169050919050565b6000610d6d82610d9e565b64ffffffffff1664ffffffffff03610d8757506000919050565b6000610d9283610d29565b60405110199392505050565b6000806060610dae81601861133e565b610db8919061133e565b9290921c92915050565b600060405182811115610dd55760206060fd5b506000805b8451811015610e4c576000858281518110610df757610df7611243565b60200260200101519050610e0d81848701610875565b50610e268160181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff1683019250508080610e44906112a1565b915050610dda565b50606083901b811760181b61028b565b6000610e6782610f02565b6101739060206112d9565b60008062ffffff198316610e96610e8b82602485610f41565b62ffffff1916610b27565b9250610eae610e8b62ffffff19831660246000610f50565b915050915091565b600082158015610ec4575081155b15610ed157506000610173565b6040805160208101859052908101839052606001604051602081830303815290604052805190602001209050610173565b60006020610f1e8360181c6bffffffffffffffffffffffff1690565b610f37906bffffffffffffffffffffffff16601f61133e565b61017391906112f0565b600061028b846000858561077d565b600061028b848485610f708860181c6bffffffffffffffffffffffff1690565b6bffffffffffffffffffffffff16610f88919061132b565b8561077d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561100457611004610f8e565b604052919050565b600082601f83011261101d57600080fd5b813567ffffffffffffffff81111561103757611037610f8e565b61106860207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610fbd565b81815284602083860101111561107d57600080fd5b816020850160208301376000918101602001919091529392505050565b600080604083850312156110ad57600080fd5b823567ffffffffffffffff8111156110c457600080fd5b6110d08582860161100c565b95602094909401359450505050565b600060208083528351808285015260005b8181101561110c578581018301518582016040015282016110f0565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561115d57600080fd5b813567ffffffffffffffff81111561117457600080fd5b61028b8482850161100c565b6000602080838503121561119357600080fd5b823567ffffffffffffffff808211156111ab57600080fd5b818501915085601f8301126111bf57600080fd5b8135818111156111d1576111d1610f8e565b8060051b6111e0858201610fbd565b91825283810185019185810190898411156111fa57600080fd5b86860192505b83831015611236578235858111156112185760008081fd5b6112268b89838a010161100c565b8352509186019190860190611200565b9998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036112d2576112d2611272565b5060010190565b808202811582820484141761017357610173611272565b600082611326577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b8181038181111561017357610173611272565b808201808211156101735761017361127256fea2646970667358221220f2e342a88c27b66224cf80c3a04506903437094bad4782243572dc24db28c5d564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"83045:2412:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"83045:2412:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;84194:175;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;84375:137;;;;;;:::i;:::-;;:::i;:::-;;;2610:25:1;;;2598:2;2583:18;84375:137:0;2464:177:1;85335:120:0;;;;;;:::i;:::-;;:::i;:::-;;;2811:14:1;;2804:22;2786:41;;2774:2;2759:18;85335:120:0;2646:187:1;83709:352:0;;;;;;:::i;:::-;;:::i;84969:360::-;;;;;;:::i;:::-;;:::i;84067:121::-;;;;;;:::i;:::-;;:::i;84518:::-;;;;;;:::i;:::-;;:::i;84194:175::-;84272:12;84303:59;:51;:42;84334:10;84303:24;:7;:22;:24::i;:::-;-1:-1:-1;;84303:30:0;;;:42::i;:::-;-1:-1:-1;;84303:49:0;71525:5;71434:104;84303:51;-1:-1:-1;;84303:57:0;;:59::i;:::-;84296:66;;84194:175;;;;;:::o;84375:137::-;84440:7;84466:39;:24;:7;:22;:24::i;:::-;-1:-1:-1;;84466:37:0;;:39::i;85335:120::-;85398:4;85421:27;:14;:7;85398:4;85421:11;:14::i;:::-;-1:-1:-1;;85421:25:0;;:27::i;83709:352::-;83776:12;83957:17;83977:35;84004:7;83977:26;:35::i;:::-;83957:55;-1:-1:-1;84029:25:0;-1:-1:-1;;84029:15:0;;:17;71434:104;84029:25;84022:32;83709:352;-1:-1:-1;;;83709:352:0:o;84969:360::-;85085:20;;85044:12;;85068:14;85085:20;85139:19;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;85139:19:0;;85115:43;;85173:9;85168:104;85192:6;85188:1;:10;85168:104;;;85231:30;:13;85245:1;85231:16;;;;;;;;:::i;:::-;;;;;;;:28;:30::i;:::-;85219:6;85226:1;85219:9;;;;;;;;:::i;:::-;-1:-1:-1;;85219:42:0;;;:9;;;;;;;;;;;:42;85200:3;;;:::i;:::-;;;85168:104;;;;85288:34;85315:6;85288:26;:34::i;:::-;85281:41;84969:360;-1:-1:-1;;;;84969:360:0:o;84067:121::-;84124:7;84150:31;:24;:7;:22;:24::i;:::-;-1:-1:-1;;84150:29:0;;:31::i;84518:121::-;84575:7;84601:31;:24;:7;:22;:24::i;:::-;-1:-1:-1;;84601:29:0;;:31::i;78839:143::-;78908:8;78935:40;78950:24;:7;:22;:24::i;:::-;78935:14;:40::i;80762:354::-;80839:5;-1:-1:-1;;80872:15:0;;80839:5;80919:25;45854:2;80919:10;:25;:::i;:::-;80899:45;-1:-1:-1;3310:2:0;18352:20;;;3703:16;18348:37;80962:23;;80954:60;;;;;;;5143:2:1;80954:60:0;;;5125:21:1;5182:2;5162:18;;;5155:30;5221:26;5201:18;;;5194:54;5265:18;;80954:60:0;;;;;;;;;81031:78;:64;-1:-1:-1;;81031:11:0;;81052:9;45854:2;81092:1;81031:11;:64::i;:::-;-1:-1:-1;;81031:76:0;;:78::i;:::-;81024:85;80762:354;-1:-1:-1;;;;;80762:354:0:o;30992:626::-;31045:16;31073:11;31094:12;31109:10;31113:5;3310:2;18352:20;3703:16;18348:37;;17836:565;31109:10;31094:25;;;;31229:4;31223:11;31216:18;;31284:3;31277:10;;31330:31;31343:5;31350:3;31356:4;31350:10;31330:12;:31::i;:::-;-1:-1:-1;31485:14:0;;;31501:4;31481:25;31475:4;31468:39;31548:17;;30992:626;;-1:-1:-1;30992:626:0:o;81184:166::-;81248:7;-1:-1:-1;;81283:15:0;;81317:26;45854:2;3310;18352:20;;;3703:16;18348:37;81317:26;:::i;14469:595::-;14573:10;;14539:7;;14999:4;14990:14;;15031:26;;;;14990:14;14573:10;15031:5;:26::i;79388:385::-;79446:4;3310:2;18352:20;;;3703:16;18348:37;79446:4;79657:21;45854:2;18348:37;79657:21;:::i;:::-;79633:45;-1:-1:-1;79727:6:0;79695:28;45854:2;79633:45;79695:28;:::i;:::-;:38;:71;;;;;79737:29;79752:13;79737:14;:29::i;70763:134::-;70829:5;70853:37;70865:24;:7;:22;:24::i;:::-;70853:11;:37::i;78112:572::-;78182:12;78214:29;78229:6;:13;78214:14;:29::i;:::-;78206:63;;;;;;;5775:2:1;78206:63:0;;;5757:21:1;5814:2;5794:18;;;5787:30;5853:23;5833:18;;;5826:51;5894:18;;78206:63:0;5573:345:1;78206:63:0;78360:13;;78343:14;78360:13;78408:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;78408:21:0;;78383:46;;78444:9;78439:91;78463:6;78459:1;:10;78439:91;;;78501:18;:6;78508:1;78501:9;;;;;;;;:::i;:::-;;;;;;;:16;;;71525:5;71434:104;78501:18;78490:5;78496:1;78490:8;;;;;;;;:::i;:::-;-1:-1:-1;;78490:29:0;;;:8;;;;;;;;;;;:29;78471:3;;;:::i;:::-;;;78439:91;;;;78653:24;78671:5;78653:17;:24::i;79867:325::-;79923:22;-1:-1:-1;;80015:15:0;;47238:26;80169:14;80015:15;80169:12;:14::i;:::-;80141:43;;;;;;6080:19:1;;;;6115:12;;6108:28;6152:12;;80141:43:0;;;;;;;;;;;;80131:54;;;;;;80124:61;;;79867:325;;;:::o;81463:798::-;81519:7;;81562:23;-1:-1:-1;;81562:21:0;;;:23::i;:::-;81538:47;;81595:23;81635:13;81621:28;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;81621:28:0;;81595:54;;81664:9;81659:298;81683:13;81679:1;:17;81659:298;;;81922:24;:17;-1:-1:-1;;81922:14:0;;81937:1;81922:14;:17::i;:::-;-1:-1:-1;;81922:22:0;;:24::i;:::-;81910:6;81917:1;81910:9;;;;;;;;:::i;:::-;;;;;;;;;;:36;81698:3;;;:::i;:::-;;;81659:298;;;-1:-1:-1;82096:58:0;82121:6;82129:24;82152:1;45233;82129:24;:::i;:::-;82096;:58::i;:::-;82245:6;82252:1;82245:9;;;;;;;;:::i;:::-;;;;;;;82238:16;;;;81463:798;;;:::o;36634:127::-;36703:7;36729:25;:7;36703;36729:11;:25::i;79134:170::-;79196:8;79224:17;79235:5;79224:10;:17::i;:::-;79216:44;;;;;;;6510:2:1;79216:44:0;;;6492:21:1;6549:2;6529:18;;;6522:30;6588:16;6568:18;;;6561:44;6622:18;;79216:44:0;6308:338:1;79216:44:0;-1:-1:-1;79291:5:0;79134:170::o;18990:355::-;19089:7;19108:12;19123:10;19127:5;19123:3;:10::i;:::-;19108:25;;;;19217:10;19221:5;19217:3;:10::i;:::-;19210:4;19194:13;19201:6;19194:4;:13;:::i;:::-;:20;;;;:::i;:::-;:33;19190:75;;;-1:-1:-1;;19243:11:0;;;;;19190:75;19282:13;19289:6;19282:4;:13;:::i;:::-;19275:20;;19312:26;19318:7;19312:26;;19327:4;19333;19312:5;:26::i;:::-;19305:33;18990:355;-1:-1:-1;;;;;;18990:355:0:o;71035:155::-;71094:5;71119:14;71127:5;3310:2;18352:20;3703:16;18348:37;45854:2;71334:27;;71256:112;71119:14;71111:38;;;;;;;6983:2:1;71111:38:0;;;6965:21:1;7022:2;7002:18;;;6995:30;7061:13;7041:18;;;7034:41;7092:18;;71111:38:0;6781:335:1;29775:846:0;29850:15;-1:-1:-1;;7985:13:0;;;;29877:53;;;;;;;7323:2:1;29877:53:0;;;7305:21:1;7362:2;7342:18;;;7335:30;7401:28;7381:18;;;7374:56;7447:18;;29877:53:0;7121:350:1;29877:53:0;29948:14;29956:5;29948:7;:14::i;:::-;29940:56;;;;;;;7678:2:1;29940:56:0;;;7660:21:1;7717:2;7697:18;;;7690:30;7756:31;7736:18;;;7729:59;7805:18;;29940:56:0;7476:353:1;29940:56:0;30006:12;30021:10;30025:5;3310:2;18352:20;3703:16;18348:37;;17836:565;30021:10;30006:25;;;;30041:14;30058:10;30062:5;30058:3;:10::i;:::-;30041:27;;;;30079:11;30100:8;30218:4;30212:11;30205:18;;30305:6;30300:3;30297:15;30294:41;;;30328:4;30322;30315:18;30294:41;30484:4;30476:6;30470:4;30462:6;30456:4;30449:5;30438:51;30431:58;;30516:3;30508:36;;;;;;;8036:2:1;30508:36:0;;;8018:21:1;8075:2;8055:18;;;8048:30;8114:22;8094:18;;;8087:50;8154:18;;30508:36:0;7834:344:1;30508:36:0;30565:49;30586:13;30593:5;30586:6;:13::i;:::-;12684:32;3222:2;12684:32;;;;12820:17;;12807:31;;12942:17;;3310:2;12927:33;;12076:900;30565:49;30555:59;29775:846;-1:-1:-1;;;;;;;29775:846:0:o;13515:557::-;13596:15;;13638:11;13645:4;13638;:11;:::i;:::-;13623:26;;13917:4;13911:11;13905:4;13902:21;13899:38;;;-1:-1:-1;13934:1:0;13899:38;13960:4;13968:1;13960:9;13956:51;;-1:-1:-1;;13985:11:0;;;;;13956:51;-1:-1:-1;;3222:2:0;12684:32;;;12820:17;;;;12807:31;;;12942:17;3310:2;12927:33;;13515:557::o;82639:301::-;82709:4;82892:1;82876:13;:17;:57;;;;-1:-1:-1;46001:24:0;46024:1;45233;46001:24;:::i;:::-;45995:1;:31;;82897:13;:36;;82869:64;82639:301;-1:-1:-1;;82639:301:0:o;34094:774::-;34307:4;34301:11;34158:16;;34186:11;34421:32;34432:8;34448:4;34442:10;;34421;:32::i;:::-;34411:42;;34473:15;34491:12;34495:7;3310:2;18352:20;3703:16;18348:37;;17836:565;34491:12;34473:30;;;;34513:18;34534;34544:7;34534:9;:18::i;:::-;34682:20;;;-1:-1:-1;34801:20:0;;34823:4;34797:31;34791:4;34784:45;-1:-1:-1;34689:3:0;34094:774;-1:-1:-1;;34094:774:0:o;24892:284::-;24946:14;24972:12;24987:10;24991:5;24987:3;:10::i;:::-;24972:25;;;;25007:12;25022:10;25026:5;3310:2;18352:20;3703:16;18348:37;;17836:565;25022:10;25007:25;;25139:21;;;;24892:284;-1:-1:-1;;;24892:284:0:o;72270:248::-;72320:7;;;72381:16;-1:-1:-1;;72381:14:0;;;:16::i;:::-;72475:35;;;;;;;6080:19:1;;;;6115:12;;;6108:28;;;;72475:35:0;;;;;;;;;6152:12:1;;;;72475:35:0;;72465:46;;;;;;72270:248;-1:-1:-1;;;;72270:248:0:o;63104:1452::-;63214:13;;63261:1;:11;;63245:28;;;63237:55;;;;;;;8385:2:1;63237:55:0;;;8367:21:1;8424:2;8404:18;;;8397:30;8463:16;8443:18;;;8436:44;8497:18;;63237:55:0;8183:338:1;63237:55:0;63457:9;63452:1098;63476:6;63472:1;:10;63452:1098;;;63850:17;63845:596;63885:11;63873:9;:23;63845:596;;;63932:18;63953:13;:9;63965:1;63953:13;:::i;:::-;63932:34;;63984:17;64004:6;64011:9;64004:17;;;;;;;;:::i;:::-;;;;;;;63984:37;;64089:18;64123:11;64110:10;:24;:58;;64166:1;64110:58;;;64137:6;64144:10;64137:18;;;;;;;;:::i;:::-;;;;;;;64110:58;64089:79;;64384:42;64404:9;64415:10;64384:19;:42::i;:::-;64359:6;64379:1;64366:9;:14;;64359:22;;;;;;;;:::i;:::-;;;;;;:67;;;;;63914:527;;;63911:1;63898:14;;;;;:::i;:::-;;;63845:596;;;-1:-1:-1;64538:1:0;64518:15;:11;64538:1;64518:15;:::i;:::-;64517:22;;;-1:-1:-1;63484:3:0;;;:::i;:::-;;;63452:1098;;;;63182:1374;63104:1452;;:::o;16417:565::-;16468:11;;3494:20;3265:2;3310;3494:20;:::i;:::-;16933;;;;3703:16;16929:37;;16417:565;-1:-1:-1;;16417:565:0:o;18569:141::-;18620:7;18683:10;18687:5;3310:2;18352:20;3703:16;18348:37;;17836:565;18683:10;18670;18674:5;18670:3;:10::i;:::-;:23;18663:30;;;;18569:141;;;:::o;8652:459::-;8707:8;8731:13;8738:5;8731:6;:13::i;:::-;:29;;8748:12;8731:29;8727:72;;-1:-1:-1;8783:5:0;;8652:459;-1:-1:-1;8652:459:0:o;8727:72::-;8808:12;8823:10;8827:5;8823:3;:10::i;:::-;9088:4;9082:11;-1:-1:-1;9069:26:0;;8652:459;-1:-1:-1;;;8652:459:0:o;15256:498::-;15310:12;;3222:2;3494:20;3222:2;3310;3494:20;:::i;:::-;3574;;;;:::i;:::-;15717:21;;;;;15256:498;-1:-1:-1;;15256:498:0:o;32166:712::-;32253:18;32387:4;32381:11;32474:8;32469:3;32466:17;32463:43;;;32499:4;32493;32486:18;32463:43;;32550:14;32583:9;32578:230;32602:8;:15;32598:1;:19;32578:230;;;32638:13;32654:8;32663:1;32654:11;;;;;;;;:::i;:::-;;;;;;;32638:27;;32707:38;32720:5;32738:6;32727:8;:17;32707:12;:38::i;:::-;;32773:10;32777:5;3310:2;18352:20;3703:16;18348:37;;17836:565;32773:10;32763:20;;;;;;32624:184;32619:3;;;;;:::i;:::-;;;;32578:230;;;-1:-1:-1;3222:2:0;12807:31;;;12942:17;;3310:2;12927:33;32830:41;12076:900;17563:107;17620:7;17646:12;17652:5;17646;:12::i;:::-;:17;;17661:2;17646:17;:::i;72863:411::-;72917:17;;-1:-1:-1;;72982:12:0;;73057:55;:46;72982:12;69502:2;72917:17;73057:12;:46::i;:::-;-1:-1:-1;;73057:53:0;;:55::i;:::-;73045:67;-1:-1:-1;73207:60:0;:51;-1:-1:-1;;73207:15:0;;69502:2;73255:1;73207:15;:51::i;:60::-;73194:73;;72956:318;72863:411;;;:::o;61942:287::-;62023:14;62053:23;;:51;;;;-1:-1:-1;62080:24:0;;62053:51;62049:174;;;-1:-1:-1;62127:1:0;62120:8;;62049:174;62176:35;;;;;;6080:19:1;;;6115:12;;;6108:28;;;6152:12;;62176:35:0;;;;;;;;;;;;62166:46;;;;;;62159:53;;;;17188:158;17241:7;17337:2;17317:10;17321:5;3310:2;18352:20;3703:16;18348:37;;17836:565;17317:10;17309:24;;:19;;17331:2;17309:24;:::i;:::-;17308:31;;;;:::i;20091:147::-;20175:7;20201:30;20207:5;20214:1;20217:4;20223:7;20201:5;:30::i;19652:172::-;19741:7;19767:50;19773:5;19780:6;19801;19788:10;19792:5;3310:2;18352:20;3703:16;18348:37;;17836:565;19788:10;:19;;;;;;:::i;:::-;19809:7;19767:5;:50::i;14:184:1:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:334;274:2;268:9;330:2;320:13;;335:66;316:86;304:99;;433:18;418:34;;454:22;;;415:62;412:88;;;480:18;;:::i;:::-;516:2;509:22;203:334;;-1:-1:-1;203:334:1:o;542:589::-;584:5;637:3;630:4;622:6;618:17;614:27;604:55;;655:1;652;645:12;604:55;691:6;678:20;717:18;713:2;710:26;707:52;;;739:18;;:::i;:::-;783:114;891:4;822:66;815:4;811:2;807:13;803:86;799:97;783:114;:::i;:::-;922:2;913:7;906:19;968:3;961:4;956:2;948:6;944:15;940:26;937:35;934:55;;;985:1;982;975:12;934:55;1050:2;1043:4;1035:6;1031:17;1024:4;1015:7;1011:18;998:55;1098:1;1073:16;;;1091:4;1069:27;1062:38;;;;1077:7;542:589;-1:-1:-1;;;542:589:1:o;1136:388::-;1213:6;1221;1274:2;1262:9;1253:7;1249:23;1245:32;1242:52;;;1290:1;1287;1280:12;1242:52;1330:9;1317:23;1363:18;1355:6;1352:30;1349:50;;;1395:1;1392;1385:12;1349:50;1418:49;1459:7;1450:6;1439:9;1435:22;1418:49;:::i;:::-;1408:59;1514:2;1499:18;;;;1486:32;;-1:-1:-1;;;;1136:388:1:o;1529:605::-;1639:4;1668:2;1697;1686:9;1679:21;1729:6;1723:13;1772:6;1767:2;1756:9;1752:18;1745:34;1797:1;1807:140;1821:6;1818:1;1815:13;1807:140;;;1916:14;;;1912:23;;1906:30;1882:17;;;1901:2;1878:26;1871:66;1836:10;;1807:140;;;1811:3;1996:1;1991:2;1982:6;1971:9;1967:22;1963:31;1956:42;2125:2;2055:66;2050:2;2042:6;2038:15;2034:88;2023:9;2019:104;2015:113;2007:121;;;;1529:605;;;;:::o;2139:320::-;2207:6;2260:2;2248:9;2239:7;2235:23;2231:32;2228:52;;;2276:1;2273;2266:12;2228:52;2316:9;2303:23;2349:18;2341:6;2338:30;2335:50;;;2381:1;2378;2371:12;2335:50;2404:49;2445:7;2436:6;2425:9;2421:22;2404:49;:::i;2838:1165::-;2931:6;2962:2;3005;2993:9;2984:7;2980:23;2976:32;2973:52;;;3021:1;3018;3011:12;2973:52;3061:9;3048:23;3090:18;3131:2;3123:6;3120:14;3117:34;;;3147:1;3144;3137:12;3117:34;3185:6;3174:9;3170:22;3160:32;;3230:7;3223:4;3219:2;3215:13;3211:27;3201:55;;3252:1;3249;3242:12;3201:55;3288:2;3275:16;3310:2;3306;3303:10;3300:36;;;3316:18;;:::i;:::-;3362:2;3359:1;3355:10;3385:28;3409:2;3405;3401:11;3385:28;:::i;:::-;3447:15;;;3517:11;;;3513:20;;;3478:12;;;;3545:19;;;3542:39;;;3577:1;3574;3567:12;3542:39;3609:2;3605;3601:11;3590:22;;3621:352;3637:6;3632:3;3629:15;3621:352;;;3723:3;3710:17;3759:2;3746:11;3743:19;3740:109;;;3803:1;3832:2;3828;3821:14;3740:109;3874:56;3922:7;3917:2;3903:11;3899:2;3895:20;3891:29;3874:56;:::i;:::-;3862:69;;-1:-1:-1;3654:12:1;;;;3951;;;;3621:352;;;3992:5;2838:1165;-1:-1:-1;;;;;;;;;2838:1165:1:o;4190:184::-;4242:77;4239:1;4232:88;4339:4;4336:1;4329:15;4363:4;4360:1;4353:15;4379:184;4431:77;4428:1;4421:88;4528:4;4525:1;4518:15;4552:4;4549:1;4542:15;4568:195;4607:3;4638:66;4631:5;4628:77;4625:103;;4708:18;;:::i;:::-;-1:-1:-1;4755:1:1;4744:13;;4568:195::o;4768:168::-;4841:9;;;4872;;4889:15;;;4883:22;;4869:37;4859:71;;4910:18;;:::i;5294:274::-;5334:1;5360;5350:189;;5395:77;5392:1;5385:88;5496:4;5493:1;5486:15;5524:4;5521:1;5514:15;5350:189;-1:-1:-1;5553:9:1;;5294:274::o;6175:128::-;6242:9;;;6263:11;;;6260:37;;;6277:18;;:::i;6651:125::-;6716:9;;;6737:10;;;6734:36;;;6750:18;;:::i","abiDefinition":[{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"castToSnapshot","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes[]","name":"statePayloads","type":"bytes[]"}],"name":"formatSnapshot","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"hash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"isSnapshot","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"root","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"uint256","name":"stateIndex","type":"uint256"}],"name":"state","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"statesAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"userDoc":{"kind":"user","methods":{},"notice":"Exposes Snapshot methods for testing against golang.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"castToSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"statePayloads\",\"type\":\"bytes[]\"}],\"name\":\"formatSnapshot\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"isSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"root\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"}],\"name\":\"state\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"statesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Exposes Snapshot methods for testing against golang.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"SnapshotHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{"castToSnapshot(bytes)":"925ea687","formatSnapshot(bytes[])":"a641fa33","hash(bytes)":"aa1e84de","isSnapshot(bytes)":"8aae3c34","root(bytes)":"c2e9e208","state(bytes,uint256)":"1406cde1","statesAmount(bytes)":"450701c5"}},"solidity/SnapshotHarness.t.sol:SnapshotLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209cf19d829c2108a629c1b721871ba479f951ef3120dbb6660699ec739d098b0564736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209cf19d829c2108a629c1b721871ba479f951ef3120dbb6660699ec739d098b0564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"75817:7125:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;75817:7125:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"75817:7125:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"SnapshotLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{}},"solidity/SnapshotHarness.t.sol:StateLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d1cc9b13ec1119797343f428339590d73c405d56207c5bf85bff318c539b398764736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d1cc9b13ec1119797343f428339590d73c405d56207c5bf85bff318c539b398764736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"67849:7765:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;67849:7765:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"67849:7765:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_ROOT":{"details":"State structure represents the state of Origin contract at some point of time. State is structured in a way to track the updates of the Origin Merkle Tree. State includes root of the Origin Merkle Tree, origin domain and some additional metadata. Hash of every sent message is inserted in the Origin Merkle Tree, which changes the value of Origin Merkle Root (which is the root for the mentioned tree). Origin has a single Merkle Tree for all messages, regardless of their destination domain. This leads to Origin state being updated if and only if a message was sent in a block. Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin, if it matches the state of the Origin contract after the N-th (nonce) message was sent.Memory layout of State fields [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message The variables below are not supposed to be used outside of the library directly."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_ROOT\":{\"details\":\"State structure represents the state of Origin contract at some point of time. State is structured in a way to track the updates of the Origin Merkle Tree. State includes root of the Origin Merkle Tree, origin domain and some additional metadata. Hash of every sent message is inserted in the Origin Merkle Tree, which changes the value of Origin Merkle Root (which is the root for the mentioned tree). Origin has a single Merkle Tree for all messages, regardless of their destination domain. This leads to Origin state being updated if and only if a message was sent in a block. Origin contract is a \\\"source of truth\\\" for states: a state is considered \\\"valid\\\" in its Origin, if it matches the state of the Origin contract after the N-th (nonce) message was sent.Memory layout of State fields [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message The variables below are not supposed to be used outside of the library directly.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"StateLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{}},"solidity/SnapshotHarness.t.sol:TypedMemView":{"code":"0x6101f061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea264697066735822122041c337524aeef6cbc3c5cca2b640bbe395adfa1df2ee023a72424132f335c42f64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea264697066735822122041c337524aeef6cbc3c5cca2b640bbe395adfa1df2ee023a72424132f335c42f64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 private constant OFFSET_R = 0;\n    uint256 private constant OFFSET_S = 32;\n    uint256 private constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 private constant OFFSET_SELECTOR = 0;\n    uint256 private constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20+tips\nuint256 constant RECEIPT_LENGTH = 133 + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n// work based on Merkle.sol, which is used under MIT OR Apache-2.0:\n// https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol\n// Changes:\n//  - Adapted for Solidity 0.8.x\n//  - Amount of tree leaves stored externally\n//  - Added thorough documentation\n//  - H(0,0) = 0 optimization is implemented (https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6)\n\n// Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0:\n// https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py\n// Changes:\n//  - Implemented in Solidity 0.7.6 (eth2 impl is Vyper)\n//  - H() = keccak256() is used as the hashing function instead of sha256()\n\n/// @notice Struct representing incremental merkle tree. Contains the current branch, while\n/// the number of inserted leaves are stored externally, and is later supplied for tree operation.\n/// Note: the hash function for the tree H(x, y) is defined as:\n/// - H(0,0) = 0\n/// - H(x,y) = keccak256(x, y), if x != 0 or y != 0\n/// @dev Following invariant is enforced:\n/// - First empty leaf has index `count`, where `count` is the amount of the inserted leafs so far\n/// - Value for the empty leaf is zeroes[0] = bytes32(0)\n/// - Value for node having empty children zeroes[i] = H(zeroes[i-1], zeroes[i-1])\n/// - branch[i] is the value of a node on the i-th level:\n///     - Levels are numbered from 0 (leafs) to ORIGIN_TREE_HEIGHT (root)\n///     - branch[i] stores the value for the node, that is a \"left child\"\n///     - The stored node must have non-zero values for both their children\n///     - Out of all level's \"left child\" nodes with \"non-zero children\",\n///       the one with the biggest index (the rightmost one) is stored.\n/// - Therefore, proof of inclusion for the first ZERO leaf (`index == count`) is:\n///     - i-th bit in `count` is 0 =\u003e we are the left child on this level =\u003e sibling is the right child\n///       sibling does not exist yet\n///         - Therefore proof[i] = zeroes[i]\n///     - i-th bit in `count` is 1 =\u003e we are the right child on this level =\u003e sibling is the left child\n///       sibling is the rightmost \"left child\" node on the level\n///         - Therefore proof[i] = branch[i]\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleLib for BaseTree global;\n\n/// @notice Incremental merkle tree keeping track of its historical merkle roots.\n/// @dev roots[N] is the root of the tree after N leafs were inserted\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleLib for HistoricalTree global;\n\n/// @notice Struct representing a Dynamic Merkle Tree with 2**AGENT_TREE_HEIGHT leaves\n/// A single operation is available: update value for existing leaf (which might be ZERO).\n/// This is done by requesting the proof of inclusion for the old value, which is used to\n/// verify the old value, and calculate the new root.\n/// Based on Original idea from https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleLib for DynamicTree global;\n\nlibrary MerkleLib {\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        require(newCount \u003c= MAX_LEAVES, \"merkle tree full\");\n        // We go up the tree following the branch from the zero leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has both children as non-zero.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from ZERO leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from ZERO leaf this is still \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is right child\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`\n            node = getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first ZERO leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-zero children =\u003e sibling is tree.branch[i]\n                current = getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet =\u003e sibling is ZERO\n                current = getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting\n    /// a precomputed root of an empty Merkle Tree.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        require(count \u003c tree.roots.length, \"Not enough leafs inserted\");\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        require(proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) == tree.root, \"Incorrect proof\");\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n\n    // ══════════════════════════════════════════════════ HELPERS ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        require(proofLen \u003c= height, \"Proof too long\");\n        root_ = leaf;\n        // Go up the tree levels from the leaf following the proof\n        for (uint256 h = 0; h \u003c proofLen; ++h) {\n            // Get a sibling node on current level: this is proof[h]\n            root_ = getParent(root_, proof[h], index, h);\n        }\n        // Go up to the root: the remaining siblings are ZERO\n        for (uint256 h = proofLen; h \u003c height; ++h) {\n            root_ = getParent(root_, bytes32(0), index, h);\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n}\n\nlibrary MerkleList {\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is 2**HEIGHT.\n     * Merkle Root is calculated for the constructed tree, and recorded in leafs[0].\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call, and only use leafs[0] value,\n     * which is guaranteed to contain the calculated merkle root.\n     * Note: root is calculated using the H(0,0)=0 Merkle Tree implementation. See Merkle.sol for details.\n     * @dev Amount of leaves should be at most 2**HEIGHT\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        require(levelLength \u003c= (1 \u003c\u003c height), \"Height too low\");\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs\n     * until list length is a power of two AND index is in the extended list range.\n     * Example: hashes.length == 6 and 0 \u003c= index \u003c= 7 will \"extend\" the list to 8 entries.\n     *          hashes.length == 6 and 7 \u003c index \u003c= 15 will \"extend\" the list to 16 entries.\n     * Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        // Iterate `height` levels up from the leaf level\n        // For every level we will only record \"significant values\", i.e. not equal to ZERO\n        for (uint256 h = 0; h \u003c height; ++h) {\n            // Use sibling for the merkle proof\n            proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n            // Let H be the height of the \"current level\". H = 0 for the \"root level\".\n            // Invariant: hashes[0 .. length) are \"current level\" tree nodes\n            // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**H)\n\n            // Iterate over every pair of (leftChild, rightChild) on the current level\n            for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                uint256 rightIndex = leftIndex + 1;\n                bytes32 leftChild = hashes[leftIndex];\n                // Note: rightChild might be ZERO\n                bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                // Record the parent hash in the same array. This will not affect\n                // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                hashes[leftIndex \u003e\u003e 1] = MerkleLib.getParent(leftChild, rightChild);\n            }\n            // Set length for the \"parent level\"\n            levelLength = (levelLength + 1) \u003e\u003e 1;\n            // Traverse to parent node\n            index \u003e\u003e= 1;\n        }\n    }\n\n    /// @notice Returns the height of the tree having given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            ++height;\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// @dev State is a memory view over a formatted state payload.\ntype State is bytes29;\n\n/// @dev Attach library functions to State\nusing StateLib for State global;\n\nlibrary StateLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev State structure represents the state of Origin contract at some point of time.\n     * State is structured in a way to track the updates of the Origin Merkle Tree. State includes\n     * root of the Origin Merkle Tree, origin domain and some additional metadata.\n     *\n     * Hash of every sent message is inserted in the Origin Merkle Tree, which changes the\n     * value of Origin Merkle Root (which is the root for the mentioned tree).\n     * Origin has a single Merkle Tree for all messages, regardless of their destination domain.\n     * This leads to Origin state being updated if and only if a message was sent in a block.\n     *\n     * Origin contract is a \"source of truth\" for states: a state is considered \"valid\" in its Origin,\n     * if it matches the state of the Origin contract after the N-th (nonce) message was sent.\n     *\n     * @dev Memory layout of State fields\n     * [000 .. 032): root           bytes32 32 bytes    Root of the Origin Merkle Tree\n     * [032 .. 036): origin         uint32   4 bytes    Domain where Origin is located\n     * [036 .. 040): nonce          uint32   4 bytes    Amount of sent messages\n     * [040 .. 045): blockNumber    uint40   5 bytes    Block of last sent message\n     * [045 .. 050): timestamp      uint40   5 bytes    Time of last sent message\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_ROOT = 0;\n    uint256 private constant OFFSET_ORIGIN = 32;\n    uint256 private constant OFFSET_NONCE = 36;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 40;\n    uint256 private constant OFFSET_TIMESTAMP = 45;\n\n    // ═══════════════════════════════════════════════════ STATE ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted State payload with provided fields\n     * @param root_         New merkle root\n     * @param origin_       Domain of Origin's chain\n     * @param nonce_        Nonce of the merkle root\n     * @param blockNumber_  Block number when root was saved in Origin\n     * @param timestamp_    Block timestamp when root was saved in Origin\n     * @return Formatted state\n     */\n    function formatState(bytes32 root_, uint32 origin_, uint32 nonce_, uint40 blockNumber_, uint40 timestamp_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return abi.encodePacked(root_, origin_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns a State view over the given payload.\n     * @dev Will revert if the payload is not a state.\n     */\n    function castToState(bytes memory payload) internal pure returns (State) {\n        return castToState(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a State view.\n     * @dev Will revert if the memory view is not over a state.\n     */\n    function castToState(bytes29 view_) internal pure returns (State) {\n        require(isState(view_), \"Not a state\");\n        return State.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted State.\n    function isState(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == STATE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(State state) internal pure returns (bytes29) {\n        return State.unwrap(state);\n    }\n\n    /// @notice Compares two State structures.\n    function equals(State a, State b) internal pure returns (bool) {\n        // Length of a State payload is fixed, so we just need to compare the hashes\n        return a.unwrap().keccak() == b.unwrap().keccak();\n    }\n\n    // ═══════════════════════════════════════════════ STATE HASHING ═══════════════════════════════════════════════════\n\n    /// @notice Returns the hash of the State.\n    /// @dev We are using the Merkle Root of a tree with two leafs (see below) as state hash.\n    function leaf(State state) internal pure returns (bytes32) {\n        (bytes32 leftLeaf_, bytes32 rightLeaf_) = state.subLeafs();\n        // Final hash is the parent of these leafs\n        return keccak256(bytes.concat(leftLeaf_, rightLeaf_));\n    }\n\n    /// @notice Returns \"sub-leafs\" of the State. Hash of these \"sub leafs\" is going to be used\n    /// as a \"state leaf\" in the \"Snapshot Merkle Tree\".\n    /// This enables proving that leftLeaf = (root, origin) was a part of the \"Snapshot Merkle Tree\",\n    /// by combining `rightLeaf` with the remainder of the \"Snapshot Merkle Proof\".\n    function subLeafs(State state) internal pure returns (bytes32 leftLeaf_, bytes32 rightLeaf_) {\n        bytes29 view_ = state.unwrap();\n        // Left leaf is (root, origin)\n        leftLeaf_ = view_.prefix({len_: OFFSET_NONCE, newType: 0}).keccak();\n        // Right leaf is (metadata), or (nonce, blockNumber, timestamp)\n        rightLeaf_ = view_.sliceFrom({index_: OFFSET_NONCE, newType: 0}).keccak();\n    }\n\n    /// @notice Returns the left \"sub-leaf\" of the State.\n    function leftLeaf(bytes32 root_, uint32 origin_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(root_, origin_));\n    }\n\n    /// @notice Returns the right \"sub-leaf\" of the State.\n    function rightLeaf(uint32 nonce_, uint40 blockNumber_, uint40 timestamp_) internal pure returns (bytes32) {\n        // We use encodePacked here to simulate the State memory layout\n        return keccak256(abi.encodePacked(nonce_, blockNumber_, timestamp_));\n    }\n\n    // ═══════════════════════════════════════════════ STATE SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns a historical Merkle root from the Origin contract.\n    function root(State state) internal pure returns (bytes32) {\n        bytes29 view_ = state.unwrap();\n        return view_.index({index_: OFFSET_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns domain of chain where the Origin contract is deployed.\n    function origin(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_ORIGIN, bytes_: 4}));\n    }\n\n    /// @notice Returns nonce of Origin contract at the time, when `root` was the Merkle root.\n    function nonce(State state) internal pure returns (uint32) {\n        bytes29 view_ = state.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when `root` was saved in Origin.\n    function blockNumber(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when `root` was saved in Origin.\n    /// @dev This is the timestamp according to the origin chain.\n    function timestamp(State state) internal pure returns (uint40) {\n        bytes29 view_ = state.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n/// @dev Snapshot is a memory view over a formatted snapshot payload: a list of states.\ntype Snapshot is bytes29;\n\n/// @dev Attach library functions to Snapshot\nusing SnapshotLib for Snapshot global;\n\nlibrary SnapshotLib {\n    using ByteString for bytes;\n    using StateLib for bytes29;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Snapshot structure represents the state of multiple Origin contracts deployed on multiple chains.\n     * In short, snapshot is a list of \"State\" structs. See State.sol for details about the \"State\" structs.\n     *\n     * Snapshot is considered \"valid\" in Origin, if every state referring to that Origin is valid there.\n     * Snapshot is considered \"globally valid\", if it is \"valid\" in every Origin contract.\n     *\n     * Both Guards and Notaries are supposed to form snapshots and sign snapshot.hash() to verify its validity.\n     * Each Guard should be monitoring a set of Origin contracts chosen as they see fit. They are expected\n     * to form snapshots with Origin states for this set of chains, sign and submit them to Summit contract.\n     *\n     * Notaries are expected to monitor the Summit contract for new snapshots submitted by the Guards.\n     * They should be forming their own snapshots using states from snapshots of any of the Guards.\n     * The states for the Notary snapshots don't have to come from the same Guard snapshot,\n     * or don't even have to be submitted by the same Guard.\n     *\n     * With their signature, Notary effectively \"notarizes\" the work that some Guards have done in Summit contract.\n     * Notary signature on a snapshot doesn't only verify the validity of the Origins, but also serves as\n     * a proof of liveliness for Guards monitoring these Origins.\n     *\n     * @dev Snapshot memory layout\n     * [000 .. 050) states[0]   bytes   50 bytes\n     * [050 .. 100) states[1]   bytes   50 bytes\n     *      ..\n     * [AAA .. BBB) states[N-1] bytes   50 bytes\n     */\n\n    // ═════════════════════════════════════════════════ SNAPSHOT ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns a formatted Snapshot payload using a list of States.\n     * @param states    Arrays of State-typed memory views over Origin states\n     * @return Formatted snapshot\n     */\n    function formatSnapshot(State[] memory states) internal view returns (bytes memory) {\n        require(_isValidAmount(states.length), \"Invalid states amount\");\n        // First we unwrap State-typed views into generic views\n        uint256 length = states.length;\n        bytes29[] memory views = new bytes29[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            views[i] = states[i].unwrap();\n        }\n        // Finally, we join them in a single payload. This avoids doing unnecessary copies in the process.\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a Snapshot view over for the given payload.\n     * @dev Will revert if the payload is not a snapshot payload.\n     */\n    function castToSnapshot(bytes memory payload) internal pure returns (Snapshot) {\n        return castToSnapshot(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to a Snapshot view.\n     * @dev Will revert if the memory view is not over a snapshot payload.\n     */\n    function castToSnapshot(bytes29 view_) internal pure returns (Snapshot) {\n        require(isSnapshot(view_), \"Not a snapshot\");\n        return Snapshot.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a payload is a formatted Snapshot.\n     */\n    function isSnapshot(bytes29 view_) internal pure returns (bool) {\n        // Snapshot needs to have exactly N * STATE_LENGTH bytes length\n        // N needs to be in [1 .. SNAPSHOT_MAX_STATES] range\n        uint256 length = view_.len();\n        uint256 statesAmount_ = length / STATE_LENGTH;\n        return statesAmount_ * STATE_LENGTH == length \u0026\u0026 _isValidAmount(statesAmount_);\n    }\n\n    /// @notice Returns the hash of a Snapshot, that could be later signed by an Agent.\n    function hash(Snapshot snapshot) internal pure returns (bytes32 hashedSnapshot) {\n        // Get the underlying memory view\n        bytes29 view_ = snapshot.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(SNAPSHOT_SALT, view_.keccak()));\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Snapshot snapshot) internal pure returns (bytes29) {\n        return Snapshot.unwrap(snapshot);\n    }\n\n    // ═════════════════════════════════════════════ SNAPSHOT SLICING ══════════════════════════════════════════════════\n\n    /// @notice Returns a state with a given index from the snapshot.\n    function state(Snapshot snapshot, uint256 stateIndex) internal pure returns (State) {\n        bytes29 view_ = snapshot.unwrap();\n        uint256 indexFrom = stateIndex * STATE_LENGTH;\n        require(indexFrom \u003c view_.len(), \"State index out of range\");\n        return view_.slice({index_: indexFrom, len_: STATE_LENGTH, newType: 0}).castToState();\n    }\n\n    /// @notice Returns the amount of states in the snapshot.\n    function statesAmount(Snapshot snapshot) internal pure returns (uint256) {\n        bytes29 view_ = snapshot.unwrap();\n        return view_.len() / STATE_LENGTH;\n    }\n\n    /// @notice Returns the root for the \"Snapshot Merkle Tree\" composed of state leafs from the snapshot.\n    function root(Snapshot snapshot) internal pure returns (bytes32) {\n        uint256 statesAmount_ = snapshot.statesAmount();\n        bytes32[] memory hashes = new bytes32[](statesAmount_);\n        for (uint256 i = 0; i \u003c statesAmount_; ++i) {\n            // Each State has two sub-leafs, which are used as the \"leafs\" in \"Snapshot Merkle Tree\"\n            // We save their parent in order to calculate the root for the whole tree later\n            hashes[i] = snapshot.state(i).leaf();\n        }\n        // We are subtracting one here, as we already calculated the hashes\n        // for the tree level above the \"leaf level\".\n        MerkleList.calculateRoot(hashes, SNAPSHOT_TREE_HEIGHT - 1);\n        // hashes[0] now stores the value for the Merkle Root of the list\n        return hashes[0];\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if snapshot's states amount is valid.\n    function _isValidAmount(uint256 statesAmount_) internal pure returns (bool) {\n        // Need to have at least one state in a snapshot.\n        // Also need to have no more than `SNAPSHOT_MAX_STATES` states in a snapshot.\n        return statesAmount_ \u003e 0 \u0026\u0026 statesAmount_ \u003c= SNAPSHOT_MAX_STATES;\n    }\n}\n\n// solhint-disable ordering\n\n/**\n * @notice Exposes Snapshot methods for testing against golang.\n */\ncontract SnapshotHarness {\n    using StateLib for bytes;\n    using SnapshotLib for bytes;\n    using SnapshotLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    function castToSnapshot(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Snapshot snapshot = SnapshotLib.castToSnapshot(payload);\n        return snapshot.unwrap().clone();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().hash();\n    }\n\n    function state(bytes memory payload, uint256 stateIndex) public view returns (bytes memory) {\n        return payload.castToSnapshot().state(stateIndex).unwrap().clone();\n    }\n\n    function statesAmount(bytes memory payload) public pure returns (uint256) {\n        return payload.castToSnapshot().statesAmount();\n    }\n\n    function root(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToSnapshot().root();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function formatSnapshot(bytes[] memory statePayloads) public view returns (bytes memory) {\n        uint256 length = statePayloads.length;\n        State[] memory states = new State[](length);\n        for (uint256 i = 0; i \u003c length; ++i) {\n            states[i] = statePayloads[i].castToState();\n        }\n        return SnapshotLib.formatSnapshot(states);\n    }\n\n    function isSnapshot(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isSnapshot();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"58:34812:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:34812:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"58:34812:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3143:38;;3179:2;3143:38;;;;;168:25:1;;;156:2;141:18;3143:38:0;;;;;;;;3400:46;;3310:2;3400:46;;3537:57;;;:::i;3458:56::-;;;:::i;3660:59::-;;3703:16;3660:59;;3230:37;;3265:2;3230:37;;2572:94;;;;;;;;388:66:1;376:79;;;358:98;;346:2;331:18;2572:94:0;204:258:1;3537:57:0;3222:2;3494:20;3222:2;3310;3494:20;:::i;:::-;3574;;;;:::i;:::-;3537:57;:::o;3458:56::-;3494:20;3265:2;3310;467:279:1;532:9;;;553:10;;;550:190;;;596:77;593:1;586:88;697:4;694:1;687:15;725:4;722:1;715:15;550:190;467:279;;;;:::o","abiDefinition":[{"inputs":[],"name":"BITS_EMPTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LOW_96_BITS_MASK","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NULL","outputs":[{"internalType":"bytes29","name":"","type":"bytes29"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"BITS_TYPE":{"details":"Memory layout for bytes29 TODO (Chi): with the user defined types storing type is no longer necessary. Update the library, transforming bytes29 to bytes24 in the process. [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BITS_EMPTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOW_96_BITS_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"BITS_TYPE\":{\"details\":\"Memory layout for bytes29 TODO (Chi): with the user defined types storing type is no longer necessary. Update the library, transforming bytes29 to bytes24 in the process. [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/SnapshotHarness.t.sol\":\"TypedMemView\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/SnapshotHarness.t.sol\":{\"keccak256\":\"0x674b7e65bfd8bd9d9b8d12d051b653008bea853433ebd584151d80e933325c6c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://0e17cb0549c82a62f4ea104a19bec5572f045e9745da7ddfe8b17a761b71badf\",\"dweb:/ipfs/QmQW9r1Lk4dChKBoHKQiPbh1mtxaVubZW3MsqpoxWcX534\"]}},\"version\":1}"},"hashes":{"BITS_EMPTY()":"97b8ad4a","BITS_LEN()":"eb740628","BITS_LOC()":"fb734584","BITS_TYPE()":"10153fce","LOW_96_BITS_MASK()":"b602d173","NULL()":"f26be3fc","SHIFT_LEN()":"1136e7ea","SHIFT_LOC()":"1bfe17ce","SHIFT_TYPE()":"13090c5a"}}}
{"solidity/BondingManagerHarness.t.sol:AddressUpgradeable":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205e753e68934c3d94ca29c2397a6bce334215b132362b28a2cbb95a1ed8a63c8564736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205e753e68934c3d94ca29c2397a6bce334215b132362b28a2cbb95a1ed8a63c8564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"38780:7122:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;38780:7122:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"38780:7122:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"AddressUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:AgentManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AgentNotActiveNorUnstaking","type":"error"},{"inputs":[],"name":"CallerNotInbox","type":"error"},{"inputs":[],"name":"DisputeAlreadyResolved","type":"error"},{"inputs":[],"name":"DisputeNotOpened","type":"error"},{"inputs":[],"name":"DisputeNotStuck","type":"error"},{"inputs":[],"name":"GuardInDispute","type":"error"},{"inputs":[],"name":"IncorrectAgentDomain","type":"error"},{"inputs":[],"name":"IncorrectVersionLength","type":"error"},{"inputs":[],"name":"IndexOutOfRange","type":"error"},{"inputs":[],"name":"NotaryInDispute","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"guardIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"DisputeOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"slashedIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"rivalIndex","type":"uint32"},{"indexed":false,"internalType":"address","name":"fraudProver","type":"address"}],"name":"DisputeResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"},{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"destination","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"disputeStatus","outputs":[{"internalType":"enum DisputeFlag","name":"flag","type":"uint8"},{"internalType":"address","name":"rival","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"uint256","name":"disputePtr","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDispute","outputs":[{"internalType":"address","name":"guard","type":"address"},{"internalType":"address","name":"notary","type":"address"},{"internalType":"address","name":"slashedAgent","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"bytes","name":"reportPayload","type":"bytes"},{"internalType":"bytes","name":"reportSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDisputesAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct MultiCallable.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct MultiCallable.Result[]","name":"callResults","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"guardIndex","type":"uint32"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"openDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"slashedAgent","type":"address"}],"name":"resolveStuckDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"DisputeOpened(uint256,uint32,uint32)":{"notice":"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`."},"DisputeResolved(uint256,uint32,uint32,address)":{"notice":"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute."},"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"disputeStatus(address)":{"notice":"Returns the current Dispute status of a given agent. See Structures.sol for details."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"getDispute(uint256)":{"notice":"Returns information about the dispute with the given index."},"getDisputesAmount()":{"notice":"Returns the number of opened Disputes."},"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"multicall((bool,bytes)[])":{"notice":"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."},"openDispute(uint32,uint32)":{"notice":"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute."},"resolveStuckDispute(uint32,address)":{"notice":"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."},"slashAgent(uint32,address,address)":{"notice":"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain."}},"notice":"`AgentManager` is used to keep track of all the bonded agents and their statuses. The exact logic of how the agent statuses are stored and updated is implemented in child contracts, and depends on whether the contract is used on Synapse Chain or on other chains. `AgentManager` is responsible for the following: - Keeping track of all the bonded agents and their statuses. - Keeping track of all the disputes between agents. - Notifying `AgentSecured` contracts about the opened and resolved disputes. - Notifying `AgentSecured` contracts about the slashed agents.","version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"status":"Status for the given agent: (flag, domain, index)."}},"disputeStatus(address)":{"details":"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.","params":{"agent":"Agent address"},"returns":{"disputePtr":"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.","flag":"        Flag describing the current Dispute status for the agent: None/Pending/Slashed","fraudProver":" Address who provided fraud proof to resolve the Dispute","rival":"       Address of the rival agent in the Dispute"}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"getDispute(uint256)":{"details":"Will revert if dispute with given index hasn't been opened yet.","params":{"index":"Dispute index"},"returns":{"fraudProver":"     Address who provided fraud proof to resolve the Dispute","guard":"           Address of the Guard in the Dispute","notary":"          Address of the Notary in the Dispute","reportPayload":"   Raw payload with report data that led to the Dispute","reportSignature":" Guard signature for the report payload","slashedAgent":"    Address of the Agent who was slashed when Dispute was resolved"}},"getDisputesAmount()":{"details":"This includes the Disputes that have been resolved already."},"openDispute(uint32,uint32)":{"params":{"guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"resolveStuckDispute(uint32,address)":{"params":{"slashedAgent":"Agent that is being slashed"}},"slashAgent(uint32,address,address)":{"params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","prover":"Address that initially provided fraud proof"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__GAP":{"details":"gap for upgrade safety"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AgentNotActiveNorUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotInbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotStuck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotaryInDispute\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__GAP\":{\"details\":\"gap for upgrade safety\"}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain.\"}},\"notice\":\"`AgentManager` is used to keep track of all the bonded agents and their statuses. The exact logic of how the agent statuses are stored and updated is implemented in child contracts, and depends on whether the contract is used on Synapse Chain or on other chains. `AgentManager` is responsible for the following: - Keeping track of all the bonded agents and their statuses. - Keeping track of all the disputes between agents. - Notifying `AgentSecured` contracts about the opened and resolved disputes. - Notifying `AgentSecured` contracts about the slashed agents.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"AgentManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","destination()":"b269681d","disputeStatus(address)":"3463d1b1","getAgent(uint256)":"2de5aaf7","getDispute(uint256)":"e3a96cbd","getDisputesAmount()":"3aaeccc6","inbox()":"fb0e722b","localDomain()":"8d3638f4","multicall((bool,bytes)[])":"60fc8466","openDispute(uint32,uint32)":"a2155c34","origin()":"938b5f32","owner()":"8da5cb5b","renounceOwnership()":"715018a6","resolveStuckDispute(uint32,address)":"89791e17","slashAgent(uint32,address,address)":"2853a0e6","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"solidity/BondingManagerHarness.t.sol:AgentManagerEvents":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"guardIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"DisputeOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"slashedIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"rivalIndex","type":"uint32"},{"indexed":false,"internalType":"address","name":"fraudProver","type":"address"}],"name":"DisputeResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"}],"userDoc":{"events":{"DisputeOpened(uint256,uint32,uint32)":{"notice":"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`."},"DisputeResolved(uint256,uint32,uint32,address)":{"notice":"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute."},"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{},"version":1},"developerDoc":{"events":{"DisputeOpened(uint256,uint32,uint32)":{"params":{"disputeIndex":"Index of the dispute in the global list of all opened disputes","guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"DisputeResolved(uint256,uint32,uint32,address)":{"params":{"disputeIndex":"Index of the dispute in the global list of all opened disputes","fraudProver":"Address who provided fraud proof to resolve the Dispute","rivalIndex":"Index of the rival agent in the Agent Merkle Tree","slashedIndex":"Index of the slashed agent in the Agent Merkle Tree"}},"RootUpdated(bytes32)":{"params":{"newRoot":"New agent merkle root"}},"StatusUpdated(uint8,uint32,address)":{"details":"Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree. Unknown flag is the default (zero) value and is used to represent agents that never interacted with the BondingManager contract. Fraudulent flag is the value for the agent who has been proven to commit fraud, but their status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact that the update of the status requires a merkle proof of the old status, and happens in a separate transaction because of that.","params":{"agent":"Agent address","domain":"Domain assigned to the agent (ZERO for Guards)","flag":"Flag defining agent status:"}}},"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"params\":{\"disputeIndex\":\"Index of the dispute in the global list of all opened disputes\",\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"params\":{\"disputeIndex\":\"Index of the dispute in the global list of all opened disputes\",\"fraudProver\":\"Address who provided fraud proof to resolve the Dispute\",\"rivalIndex\":\"Index of the rival agent in the Agent Merkle Tree\",\"slashedIndex\":\"Index of the slashed agent in the Agent Merkle Tree\"}},\"RootUpdated(bytes32)\":{\"params\":{\"newRoot\":\"New agent merkle root\"}},\"StatusUpdated(uint8,uint32,address)\":{\"details\":\"Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree. Unknown flag is the default (zero) value and is used to represent agents that never interacted with the BondingManager contract. Fraudulent flag is the value for the agent who has been proven to commit fraud, but their status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact that the update of the status requires a merkle proof of the old status, and happens in a separate transaction because of that.\",\"params\":{\"agent\":\"Agent address\",\"domain\":\"Domain assigned to the agent (ZERO for Guards)\",\"flag\":\"Flag defining agent status:\"}}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"AgentManagerEvents\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:AgentManagerHarness":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"AgentNotActiveNorUnstaking","type":"error"},{"inputs":[],"name":"CallerNotDestination","type":"error"},{"inputs":[],"name":"CallerNotInbox","type":"error"},{"inputs":[],"name":"DisputeAlreadyResolved","type":"error"},{"inputs":[],"name":"DisputeNotOpened","type":"error"},{"inputs":[],"name":"DisputeNotStuck","type":"error"},{"inputs":[],"name":"GuardInDispute","type":"error"},{"inputs":[],"name":"IncorrectAgentDomain","type":"error"},{"inputs":[],"name":"IncorrectVersionLength","type":"error"},{"inputs":[],"name":"IndexOutOfRange","type":"error"},{"inputs":[],"name":"NotaryInDispute","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"guardIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"DisputeOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"slashedIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"rivalIndex","type":"uint32"},{"indexed":false,"internalType":"address","name":"fraudProver","type":"address"}],"name":"DisputeResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"},{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"destination","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"disputeStatus","outputs":[{"internalType":"enum DisputeFlag","name":"flag","type":"uint8"},{"internalType":"address","name":"rival","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"uint256","name":"disputePtr","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDispute","outputs":[{"internalType":"address","name":"guard","type":"address"},{"internalType":"address","name":"notary","type":"address"},{"internalType":"address","name":"slashedAgent","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"bytes","name":"reportPayload","type":"bytes"},{"internalType":"bytes","name":"reportSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDisputesAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct MultiCallable.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct MultiCallable.Result[]","name":"callResults","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"guardIndex","type":"uint32"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"openDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"remoteMockFunc","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"slashedAgent","type":"address"}],"name":"resolveStuckDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint8","name":"","type":"uint8"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"sensitiveMockFunc","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes4","name":"","type":"bytes4"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"sensitiveMockFuncOver32Bytes","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes4","name":"","type":"bytes4"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"sensitiveMockFuncVoid","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgentExposed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"events":{"DisputeOpened(uint256,uint32,uint32)":{"notice":"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`."},"DisputeResolved(uint256,uint32,uint32,address)":{"notice":"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute."},"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"disputeStatus(address)":{"notice":"Returns the current Dispute status of a given agent. See Structures.sol for details."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"getDispute(uint256)":{"notice":"Returns information about the dispute with the given index."},"getDisputesAmount()":{"notice":"Returns the number of opened Disputes."},"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"multicall((bool,bytes)[])":{"notice":"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."},"openDispute(uint32,uint32)":{"notice":"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute."},"resolveStuckDispute(uint32,address)":{"notice":"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."},"sensitiveMockFunc(address,uint8,bytes32)":{"notice":"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"},"sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)":{"notice":"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"},"sensitiveMockFuncVoid(uint16,bytes4,bytes32)":{"notice":"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"},"slashAgent(uint32,address,address)":{"notice":"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain."},"slashAgentExposed(uint32,address,address)":{"notice":"Exposes _slashAgent for testing."}},"version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"status":"Status for the given agent: (flag, domain, index)."}},"disputeStatus(address)":{"details":"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.","params":{"agent":"Agent address"},"returns":{"disputePtr":"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.","flag":"        Flag describing the current Dispute status for the agent: None/Pending/Slashed","fraudProver":" Address who provided fraud proof to resolve the Dispute","rival":"       Address of the rival agent in the Dispute"}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"getDispute(uint256)":{"details":"Will revert if dispute with given index hasn't been opened yet.","params":{"index":"Dispute index"},"returns":{"fraudProver":"     Address who provided fraud proof to resolve the Dispute","guard":"           Address of the Guard in the Dispute","notary":"          Address of the Notary in the Dispute","reportPayload":"   Raw payload with report data that led to the Dispute","reportSignature":" Guard signature for the report payload","slashedAgent":"    Address of the Agent who was slashed when Dispute was resolved"}},"getDisputesAmount()":{"details":"This includes the Disputes that have been resolved already."},"openDispute(uint32,uint32)":{"params":{"guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"resolveStuckDispute(uint32,address)":{"params":{"slashedAgent":"Agent that is being slashed"}},"slashAgent(uint32,address,address)":{"params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","prover":"Address that initially provided fraud proof"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"AgentNotActiveNorUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotInbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotStuck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotaryInDispute\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remoteMockFunc\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFunc\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncOver32Bytes\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncVoid\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgentExposed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"sensitiveMockFunc(address,uint8,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncVoid(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain.\"},\"slashAgentExposed(uint32,address,address)\":{\"notice\":\"Exposes _slashAgent for testing.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"AgentManagerHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","destination()":"b269681d","disputeStatus(address)":"3463d1b1","getAgent(uint256)":"2de5aaf7","getDispute(uint256)":"e3a96cbd","getDisputesAmount()":"3aaeccc6","inbox()":"fb0e722b","localDomain()":"8d3638f4","multicall((bool,bytes)[])":"60fc8466","openDispute(uint32,uint32)":"a2155c34","origin()":"938b5f32","owner()":"8da5cb5b","remoteMockFunc(uint32,uint256,bytes32)":"a149352c","renounceOwnership()":"715018a6","resolveStuckDispute(uint32,address)":"89791e17","sensitiveMockFunc(address,uint8,bytes32)":"127a2c9d","sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)":"0e6bfcd5","sensitiveMockFuncVoid(uint16,bytes4,bytes32)":"c9f1a03f","slashAgent(uint32,address,address)":"2853a0e6","slashAgentExposed(uint32,address,address)":"69978b0d","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"solidity/BondingManagerHarness.t.sol:BondingManager":{"code":"0x60e06040523480156200001157600080fd5b5060405162003b3f38038062003b3f83398101604081905262000034916200009c565b60408051808201909152600580825264302e302e3360d81b602083015260805281816200006181620000cb565b60a0525063ffffffff90811660c0528216600a1490506200009557604051632b3a807f60e01b815260040160405180910390fd5b50620000f3565b600060208284031215620000af57600080fd5b815163ffffffff81168114620000c457600080fd5b9392505050565b80516020808301519190811015620000ed576000198160200360031b1b821691505b50919050565b60805160a05160c051613a156200012a600039600081816103ab015261185c0152600061033b015260006103180152613a156000f3fe608060405234801561001057600080fd5b50600436106101f05760003560e01c806389791e171161010f578063c1c0f4f6116100a2578063f2fde38b11610071578063f2fde38b14610502578063f8c8765e14610515578063fb0e722b14610528578063fbc5265e1461053b57600080fd5b8063c1c0f4f614610497578063c99dcb9e146104b7578063cc875501146104ca578063e3a96cbd146104dd57600080fd5b80639d228a51116100de5780639d228a511461041a5780639fbcb9cb1461045e578063a2155c3414610471578063b269681d1461048457600080fd5b806389791e17146103935780638d3638f4146103a65780638da5cb5b146103e2578063938b5f321461040757600080fd5b80633463d1b1116101875780634c3e1c1f116101565780634c3e1c1f146102fa57806354fd4d501461030d57806360fc84661461036b578063715018a61461038b57600080fd5b80633463d1b1146102b457806336cba43c146102d75780633aaeccc6146102df5780633eea79d1146102e757600080fd5b806328f3fac9116101c357806328f3fac91461024e5780632de5aaf71461026e57806333c3a8f31461028f57806333d1b2e8146102a157600080fd5b806312db2ef6146101f5578063130c567314610213578063237a85a5146102285780632853a0e61461023b575b600080fd5b6101fd61054e565b60405161020a9190612f57565b60405180910390f35b610226610221366004613042565b610565565b005b610226610236366004613042565b610682565b61022661024936600461310d565b61090a565b61026161025c366004613152565b61095e565b60405161020a91906131dc565b61028161027c3660046131ea565b610a01565b60405161020a929190613203565b60cc545b60405190815260200161020a565b6101fd6102af366004613220565b610a48565b6102c76102c2366004613152565b610b3c565b60405161020a9493929190613242565b60cd54610293565b609b54610293565b6101fd6102f5366004613152565b610cb0565b610226610308366004613042565b610d0f565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152905161020a91906132e7565b61037e6103793660046132fa565b610dfb565b60405161020a919061336f565b610226610f66565b6102266103a1366004613403565b610fc2565b6103cd7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161020a565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161020a565b6097546103ef906001600160a01b031681565b61042d610428366004613438565b611242565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161020a565b60c9546103ef906001600160a01b031681565b61022661047f36600461349a565b6112fc565b6098546103ef906001600160a01b031681565b6104aa6104a53660046134d3565b6116d8565b60405161020a91906134f0565b6102936104c5366004613152565b611805565b6102266104d8366004613531565b611816565b6104f06104eb3660046131ea565b611a0f565b60405161020a96959493929190613570565b610226610510366004613152565b611be7565b6102266105233660046135cb565b611cc9565b6099546103ef906001600160a01b031681565b610226610549366004613042565b611e11565b6060610560600060cc80549050610a48565b905090565b6033546001600160a01b031633146105c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60006105cf8361095e565b90506105da81611e9f565b8363ffffffff16816020015163ffffffff1614610623576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061063160018686611eeb565b905061067b81846040518060600160405280600260058111156106565761065661316d565b81526020018963ffffffff168152602001866040015163ffffffff1681525087611f22565b5050505050565b6033546001600160a01b031633146106dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff663ffffffff84160161073b576040517ff2b2faa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610746836120b5565b9050600080808351600581111561075f5761075f61316d565b0361083c5760cc5463ffffffff116107a3576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc805460018082019092557f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe810180546001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925563ffffffff8a16600090815260cb602090815260408220805496870181558252902090930180549093161790915591506108be565b6003835160058111156108515761085161316d565b14801561086d57508563ffffffff16836020015163ffffffff16145b1561088c578260400151915061088560038787611eeb565b90506108be565b6040517f86511bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61090281856040518060600160405280600160058111156108e1576108e161316d565b81526020018a63ffffffff1681526020018663ffffffff1681525088611f22565b505050505050565b6099546001600160a01b0316331461094e576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095983838361214a565b505050565b6040805160608101825260008082526020820181905291810191909152610984826120b5565b6001600160a01b038316600090815260ca602090815260408083205465010000000000900463ffffffff168352609a90915290205490915060029060ff16818111156109d2576109d261316d565b1480156109f257506005815160058111156109ef576109ef61316d565b14155b156109fc57600481525b919050565b60408051606081018252600080825260208201819052918101829052610a2683612205565b91506001600160a01b03821615610a4357610a408261095e565b90505b915091565b60cc54606090808410610a87576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610a92848661364e565b1115610aa557610aa28482613661565b92505b8267ffffffffffffffff811115610abe57610abe612fc4565b604051908082528060200260200182016040528015610ae7578160200160208202803683370190505b50915060005b83811015610b3457610b07610b02828761364e565b612240565b838281518110610b1957610b19613674565b6020908102919091010152610b2d816136a3565b9050610aed565b505092915050565b6000806000806000610b73866001600160a01b0316600090815260ca602052604090205463ffffffff650100000000009091041690565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff166002811115610bab57610bab61316d565b6002811115610bbc57610bbc61316d565b8152905461010081046affffffffffffffffffffff9081166020808501919091526c010000000000000000000000009092046001600160a01b03166040938401528351928401519184015192995090965016935090508215610ca7576000609b610c27600186613661565b81548110610c3757610c37613674565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150610ca3908414610c92578151610c98565b81602001515b63ffffffff16612205565b9550505b50509193509193565b60606000610cbc61054e565b90506000610cc9846120b5565b905060008082516005811115610ce157610ce161316d565b14610cf657816040015163ffffffff16610cfa565b60cc545b9050610d068382612278565b95945050505050565b6033546001600160a01b03163314610d695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b6000610d748361095e565b9050610d7f816123e7565b8363ffffffff16816020015163ffffffff1614610dc8576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610dd660028686611eeb565b905061067b81846040518060600160405280600360058111156106565761065661316d565b6060818067ffffffffffffffff811115610e1757610e17612fc4565b604051908082528060200260200182016040528015610e5d57816020015b604080518082019091526000815260606020820152815260200190600190039081610e355790505b5091503660005b82811015610f5d57858582818110610e7e57610e7e613674565b9050602002810190610e9091906136db565b91506000848281518110610ea657610ea6613674565b60200260200101519050306001600160a01b0316838060200190610eca9190613719565b604051610ed8929190613785565b600060405180830381855af49150503d8060008114610f13576040519150601f19603f3d011682016040523d82523d6000602084013e610f18565b606091505b5060208301521515808252833517610f54577f4d6a23280000000000000000000000000000000000000000000000000000000060005260046000fd5b50600101610e64565b50505092915050565b6033546001600160a01b03163314610fc05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b565b6033546001600160a01b0316331461101c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b6001600160a01b038116600090815260ca602090815260408083205465010000000000900463ffffffff168352609a9091528082208151606081019092528054829060ff1660028111156110725761107261316d565b60028111156110835761108361316d565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b031660409091015290506000815160028111156110d4576110d461316d565b0361110b576040517fb3a71fa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002815160028111156111205761112061316d565b03611157576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609854604080517f4098915200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa1580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111de91906137aa565b505090508064ffffffffff166138406111f7919061364e565b421015611230576040517f6fdc56c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61123c8484600061214a565b50505050565b6098546000906001600160a01b03163314611289576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620151808510156112c6576040517fa8928dd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112d184848461214a565b507f9d228a510000000000000000000000000000000000000000000000000000000095945050505050565b6099546001600160a01b03163314611340576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff16600281111561136a5761136a61316d565b146113a1576040517fd9d49b4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff1660028111156113cb576113cb61316d565b14611402576040517f6893014300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc349909701805494519251861668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff938716640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090961698909616979097179390931716929092179093559154835191820190935290819081526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff87168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600281111561154f5761154f61316d565b0217905550602082015181546040938401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909316610100029290921660ff9091161717905580516060810190915280600181526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff86168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156116205761162061316d565b0217905550602082015181546040909301516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe05306116a9600183613661565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a16109598383612433565b63ffffffff8116600090815260cb60205260409020546060908067ffffffffffffffff81111561170a5761170a612fc4565b604051908082528060200260200182016040528015611733578160200160208202803683370190505b5091506000805b828110156117f25763ffffffff8516600090815260cb6020526040812080548390811061176957611769613674565b6000918252602090912001546001600160a01b03169050600161178b8261095e565b51600581111561179d5761179d61316d565b036117e1578085846117ae816136a3565b9550815181106117c0576117c0613674565b60200260200101906001600160a01b031690816001600160a01b0316815250505b506117eb816136a3565b905061173a565b508181146117fe578083525b5050919050565b600061181082612538565b92915050565b60c9546001600160a01b0316331461185a576040517fc9c49ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff1603611911576097546040517f4e04e7a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820184905290911690634e04e7a790604401600060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b50505050505050565b609754604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1fa071380000000000000000000000000000000000000000000000000000000017905291517fa1c702a7000000000000000000000000000000000000000000000000000000008152919092169163a1c702a7916119cd9186916201518091906004016137f1565b60408051808303816000875af11580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b919061381a565b600080600080606080609b805490508710611a56576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609b8881548110611a6b57611a6b613674565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150611abe90612205565b9650611ad3816020015163ffffffff16612205565b604082015190965063ffffffff1615611b3057611af9816040015163ffffffff16612205565b60408281015163ffffffff166000908152609a60205220549095506c0100000000000000000000000090046001600160a01b031693505b6099546040517fc495912b000000000000000000000000000000000000000000000000000000008152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa158015611b92573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611bd891908101906138ca565b97999698509496939592505050565b6033546001600160a01b03163314611c415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b6001600160a01b038116611cbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105bb565b611cc681612579565b50565b6000611cd560016125e3565b90508015611d0a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611d15858585612735565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416179055611d50612809565b60cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055801561067b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000611e1c8361095e565b9050611e278161288e565b8363ffffffff16816020015163ffffffff1614611e70576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e7b84612538565b905061067b818460405180606001604052806005808111156106565761065661316d565b600181516005811115611eb457611eb461316d565b14611cc6576040517f486fcee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838383604051602001611f029392919061392e565b6040516020818303038152906040528051906020012090505b9392505050565b6000611f378360000151846020015184611eeb565b90506000611f5f846040015163ffffffff1687878560cd6128da90949392919063ffffffff16565b6001600160a01b038416600090815260ca6020526040902085518154929350869282907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836005811115611fb857611fb861316d565b021790555060208281015182546040948501517fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911661010063ffffffff938416027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff1617650100000000009183169190910217909255860151865192516001600160a01b0387169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e91612072916139a6565b60405180910390a36040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a1505050505050565b60408051606081018252600080825260208201819052918101919091526001600160a01b038216600090815260ca6020526040908190208151606081019092528054829060ff16600581111561210d5761210d61316d565b600581111561211e5761211e61316d565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b6000612155836120b5565b90506121608161293e565b8363ffffffff16816020015163ffffffff16146121a9576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e60046040516121ea91906139a6565b60405180910390a36122008160400151836129ab565b61123c565b60cc546000908210156109fc5760cc828154811061222557612225613674565b6000918252602090912001546001600160a01b031692915050565b600081156109fc5761181060cc838154811061225e5761225e613674565b6000918252602090912001546001600160a01b0316612538565b6060600061229e845184106122975761229284600161364e565b612cbc565b8451612cbc565b90508067ffffffffffffffff8111156122b9576122b9612fc4565b6040519080825280602002602001820160405280156122e2578160200160208202803683370190505b50845190925060005b82811015610f5d57818560011810612304576000612322565b85856001188151811061231957612319613674565b60200260200101515b84828151811061233457612334613674565b60200260200101818152505060005b828110156123d4576000816001019050600088838151811061236757612367613674565b60200260200101519050600085831061238157600061239c565b89838151811061239357612393613674565b60200260200101515b90506123a88282612cd5565b8a600186901c815181106123be576123be613674565b6020908102919091010152505050600201612343565b50600194851c94918201821c91016122eb565b6002815160058111156123fc576123fc61316d565b14611cc6576040517fe637af9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6098546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c3490604401600060405180830381600087803b15801561249f57600080fd5b505af11580156124b3573d6000803e3d6000fd5b505060c9546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b03909116925063a2155c3491506044015b600060405180830381600087803b15801561252457600080fd5b505af1158015610902573d6000803e3d6000fd5b600080612544836120b5565b905060008151600581111561255b5761255b61316d565b1461257357611f1b8160000151826020015185611eeb565b50919050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615612680578160ff1660011480156126065750303b155b6126785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105bb565b506000919050565b60005460ff8084169116106126fd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105bb565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b600054610100900460ff166127b25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105bb565b609780546001600160a01b039485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff166128865760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105bb565b610fc0612d1d565b6004815160058111156128a3576128a361316d565b14611cc6576040517f0a06903700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84546000906128ec8686866020612da3565b14612923576040517f18b00be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6129308583856020612da3565b958690555093949350505050565b6001815160058111156129535761295361316d565b1415801561297457506002815160058111156129715761297161316d565b14155b15611cc6576040517fec3d0d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff1660028111156129e2576129e261316d565b60028111156129f3576129f361316d565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b03166040909101529050600281516002811115612a4457612a4461316d565b03612a7b576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a6020522082518154849383917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016906001908490811115612ae457612ae461316d565b021790555060208281015182546040909401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff928316610100021660ff90951694909417939093179091558201516000911615612cb257600060018360200151612b5f91906139b4565b6affffffffffffffffffffff1690506000609b8281548110612b8357612b83613674565b600091825260209182902060408051606081018252919092015463ffffffff8082168352640100000000820481169483019490945268010000000000000000900490921690820152609b8054919250879184908110612be457612be4613674565b60009182526020918290200180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff94851602179055820151878216911614612c41578060200151612c44565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b61123c8482612e4b565b600060015b82811015612573576001918201911b612cc1565b600082158015612ce3575081155b15612cf057506000611810565b50604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff16612d9a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105bb565b610fc033612579565b815160009082811115612de2576040517fc5360feb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84915060005b81811015612e1f57612e1583868381518110612e0657612e06613674565b60200260200101518984612f26565b9250600101612de8565b50805b83811015612e4157612e378360008984612f26565b9250600101612e22565b5050949350505050565b6098546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401600060405180830381600087803b158015612eb757600080fd5b505af1158015612ecb573d6000803e3d6000fd5b505060c9546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b0390911692506361169218915060440161250a565b6000600183831c168103612f4557612f3e8585612cd5565b9050612f4f565b612f3e8486612cd5565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612f8f57835183529284019291840191600101612f73565b50909695505050505050565b63ffffffff81168114611cc657600080fd5b80356001600160a01b03811681146109fc57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561303a5761303a612fc4565b604052919050565b60008060006060848603121561305757600080fd5b833561306281612f9b565b92506020613071858201612fad565b9250604085013567ffffffffffffffff8082111561308e57600080fd5b818701915087601f8301126130a257600080fd5b8135818111156130b4576130b4612fc4565b8060051b91506130c5848301612ff3565b818152918301840191848101908a8411156130df57600080fd5b938501935b838510156130fd578435825293850193908501906130e4565b8096505050505050509250925092565b60008060006060848603121561312257600080fd5b833561312d81612f9b565b925061313b60208501612fad565b915061314960408501612fad565b90509250925092565b60006020828403121561316457600080fd5b611f1b82612fad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600681106131ac576131ac61316d565b9052565b6131bb82825161319c565b60208181015163ffffffff9081169184019190915260409182015116910152565b6060810161181082846131b0565b6000602082840312156131fc57600080fd5b5035919050565b6001600160a01b038316815260808101611f1b60208301846131b0565b6000806040838503121561323357600080fd5b50508035926020909101359150565b60808101600386106132565761325661316d565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b8381101561329457818101518382015260200161327c565b50506000910152565b600081518084526132b5816020860160208601613279565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611f1b602083018461329d565b6000806020838503121561330d57600080fd5b823567ffffffffffffffff8082111561332557600080fd5b818501915085601f83011261333957600080fd5b81358181111561334857600080fd5b8660208260051b850101111561335d57600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156133f5578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc001855281518051151584528701518784018790526133e28785018261329d565b9588019593505090860190600101613396565b509098975050505050505050565b6000806040838503121561341657600080fd5b823561342181612f9b565b915061342f60208401612fad565b90509250929050565b600080600080600060a0868803121561345057600080fd5b853561345b81612f9b565b945060208601359350604086013561347281612f9b565b925061348060608701612fad565b915061348e60808701612fad565b90509295509295909350565b600080604083850312156134ad57600080fd5b82356134b881612f9b565b915060208301356134c881612f9b565b809150509250929050565b6000602082840312156134e557600080fd5b8135611f1b81612f9b565b6020808252825182820181905260009190848201906040850190845b81811015612f8f5783516001600160a01b03168352928401929184019160010161350c565b60008060006060848603121561354657600080fd5b61354f84612fad565b9250602084013561355f81612f9b565b929592945050506040919091013590565b60006001600160a01b0380891683528088166020840152808716604084015280861660608401525060c060808301526135ac60c083018561329d565b82810360a08401526135be818561329d565b9998505050505050505050565b600080600080608085870312156135e157600080fd5b6135ea85612fad565b93506135f860208601612fad565b925061360660408601612fad565b915061361460608601612fad565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156118105761181061361f565b818103818111156118105761181061361f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136d4576136d461361f565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261370f57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261374e57600080fd5b83018035915067ffffffffffffffff82111561376957600080fd5b60200191503681900382131561377e57600080fd5b9250929050565b8183823760009101908152919050565b805164ffffffffff811681146109fc57600080fd5b6000806000606084860312156137bf57600080fd5b6137c884613795565b92506137d660208501613795565b915060408401516137e681612f9b565b809150509250925092565b600063ffffffff808616835280851660208401525060606040830152610d06606083018461329d565b6000806040838503121561382d57600080fd5b825161383881612f9b565b6020939093015192949293505050565b600082601f83011261385957600080fd5b815167ffffffffffffffff81111561387357613873612fc4565b6138a460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612ff3565b8181528460208386010111156138b957600080fd5b612f4f826020830160208701613279565b600080604083850312156138dd57600080fd5b825167ffffffffffffffff808211156138f557600080fd5b61390186838701613848565b9350602085015191508082111561391757600080fd5b5061392485828601613848565b9150509250929050565b6000600685106139405761394061316d565b5060f89390931b835260e09190911b7fffffffff0000000000000000000000000000000000000000000000000000000016600183015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600582015260190190565b60208101611810828461319c565b6affffffffffffffffffffff8281168282160390808211156139d8576139d861361f565b509291505056fea2646970667358221220e309f9bffc15890b051ed3430856c060a8f43710dfae59ee291e1ab157bc0db564736f6c63430008110033","runtime-code":"0x608060405234801561001057600080fd5b50600436106101f05760003560e01c806389791e171161010f578063c1c0f4f6116100a2578063f2fde38b11610071578063f2fde38b14610502578063f8c8765e14610515578063fb0e722b14610528578063fbc5265e1461053b57600080fd5b8063c1c0f4f614610497578063c99dcb9e146104b7578063cc875501146104ca578063e3a96cbd146104dd57600080fd5b80639d228a51116100de5780639d228a511461041a5780639fbcb9cb1461045e578063a2155c3414610471578063b269681d1461048457600080fd5b806389791e17146103935780638d3638f4146103a65780638da5cb5b146103e2578063938b5f321461040757600080fd5b80633463d1b1116101875780634c3e1c1f116101565780634c3e1c1f146102fa57806354fd4d501461030d57806360fc84661461036b578063715018a61461038b57600080fd5b80633463d1b1146102b457806336cba43c146102d75780633aaeccc6146102df5780633eea79d1146102e757600080fd5b806328f3fac9116101c357806328f3fac91461024e5780632de5aaf71461026e57806333c3a8f31461028f57806333d1b2e8146102a157600080fd5b806312db2ef6146101f5578063130c567314610213578063237a85a5146102285780632853a0e61461023b575b600080fd5b6101fd61054e565b60405161020a9190612f57565b60405180910390f35b610226610221366004613042565b610565565b005b610226610236366004613042565b610682565b61022661024936600461310d565b61090a565b61026161025c366004613152565b61095e565b60405161020a91906131dc565b61028161027c3660046131ea565b610a01565b60405161020a929190613203565b60cc545b60405190815260200161020a565b6101fd6102af366004613220565b610a48565b6102c76102c2366004613152565b610b3c565b60405161020a9493929190613242565b60cd54610293565b609b54610293565b6101fd6102f5366004613152565b610cb0565b610226610308366004613042565b610d0f565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f00000000000000000000000000000000000000000000000000000000000000006020820152905161020a91906132e7565b61037e6103793660046132fa565b610dfb565b60405161020a919061336f565b610226610f66565b6102266103a1366004613403565b610fc2565b6103cd7f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161020a565b6033546001600160a01b03165b6040516001600160a01b03909116815260200161020a565b6097546103ef906001600160a01b031681565b61042d610428366004613438565b611242565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200161020a565b60c9546103ef906001600160a01b031681565b61022661047f36600461349a565b6112fc565b6098546103ef906001600160a01b031681565b6104aa6104a53660046134d3565b6116d8565b60405161020a91906134f0565b6102936104c5366004613152565b611805565b6102266104d8366004613531565b611816565b6104f06104eb3660046131ea565b611a0f565b60405161020a96959493929190613570565b610226610510366004613152565b611be7565b6102266105233660046135cb565b611cc9565b6099546103ef906001600160a01b031681565b610226610549366004613042565b611e11565b6060610560600060cc80549050610a48565b905090565b6033546001600160a01b031633146105c45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60006105cf8361095e565b90506105da81611e9f565b8363ffffffff16816020015163ffffffff1614610623576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061063160018686611eeb565b905061067b81846040518060600160405280600260058111156106565761065661316d565b81526020018963ffffffff168152602001866040015163ffffffff1681525087611f22565b5050505050565b6033546001600160a01b031633146106dc5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff663ffffffff84160161073b576040517ff2b2faa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610746836120b5565b9050600080808351600581111561075f5761075f61316d565b0361083c5760cc5463ffffffff116107a3576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc805460018082019092557f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe810180546001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925563ffffffff8a16600090815260cb602090815260408220805496870181558252902090930180549093161790915591506108be565b6003835160058111156108515761085161316d565b14801561086d57508563ffffffff16836020015163ffffffff16145b1561088c578260400151915061088560038787611eeb565b90506108be565b6040517f86511bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61090281856040518060600160405280600160058111156108e1576108e161316d565b81526020018a63ffffffff1681526020018663ffffffff1681525088611f22565b505050505050565b6099546001600160a01b0316331461094e576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61095983838361214a565b505050565b6040805160608101825260008082526020820181905291810191909152610984826120b5565b6001600160a01b038316600090815260ca602090815260408083205465010000000000900463ffffffff168352609a90915290205490915060029060ff16818111156109d2576109d261316d565b1480156109f257506005815160058111156109ef576109ef61316d565b14155b156109fc57600481525b919050565b60408051606081018252600080825260208201819052918101829052610a2683612205565b91506001600160a01b03821615610a4357610a408261095e565b90505b915091565b60cc54606090808410610a87576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610a92848661364e565b1115610aa557610aa28482613661565b92505b8267ffffffffffffffff811115610abe57610abe612fc4565b604051908082528060200260200182016040528015610ae7578160200160208202803683370190505b50915060005b83811015610b3457610b07610b02828761364e565b612240565b838281518110610b1957610b19613674565b6020908102919091010152610b2d816136a3565b9050610aed565b505092915050565b6000806000806000610b73866001600160a01b0316600090815260ca602052604090205463ffffffff650100000000009091041690565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff166002811115610bab57610bab61316d565b6002811115610bbc57610bbc61316d565b8152905461010081046affffffffffffffffffffff9081166020808501919091526c010000000000000000000000009092046001600160a01b03166040938401528351928401519184015192995090965016935090508215610ca7576000609b610c27600186613661565b81548110610c3757610c37613674565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150610ca3908414610c92578151610c98565b81602001515b63ffffffff16612205565b9550505b50509193509193565b60606000610cbc61054e565b90506000610cc9846120b5565b905060008082516005811115610ce157610ce161316d565b14610cf657816040015163ffffffff16610cfa565b60cc545b9050610d068382612278565b95945050505050565b6033546001600160a01b03163314610d695760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b6000610d748361095e565b9050610d7f816123e7565b8363ffffffff16816020015163ffffffff1614610dc8576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610dd660028686611eeb565b905061067b81846040518060600160405280600360058111156106565761065661316d565b6060818067ffffffffffffffff811115610e1757610e17612fc4565b604051908082528060200260200182016040528015610e5d57816020015b604080518082019091526000815260606020820152815260200190600190039081610e355790505b5091503660005b82811015610f5d57858582818110610e7e57610e7e613674565b9050602002810190610e9091906136db565b91506000848281518110610ea657610ea6613674565b60200260200101519050306001600160a01b0316838060200190610eca9190613719565b604051610ed8929190613785565b600060405180830381855af49150503d8060008114610f13576040519150601f19603f3d011682016040523d82523d6000602084013e610f18565b606091505b5060208301521515808252833517610f54577f4d6a23280000000000000000000000000000000000000000000000000000000060005260046000fd5b50600101610e64565b50505092915050565b6033546001600160a01b03163314610fc05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b565b6033546001600160a01b0316331461101c5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b6001600160a01b038116600090815260ca602090815260408083205465010000000000900463ffffffff168352609a9091528082208151606081019092528054829060ff1660028111156110725761107261316d565b60028111156110835761108361316d565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b031660409091015290506000815160028111156110d4576110d461316d565b0361110b576040517fb3a71fa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002815160028111156111205761112061316d565b03611157576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609854604080517f4098915200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa1580156111ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111de91906137aa565b505090508064ffffffffff166138406111f7919061364e565b421015611230576040517f6fdc56c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61123c8484600061214a565b50505050565b6098546000906001600160a01b03163314611289576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620151808510156112c6576040517fa8928dd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112d184848461214a565b507f9d228a510000000000000000000000000000000000000000000000000000000095945050505050565b6099546001600160a01b03163314611340576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff16600281111561136a5761136a61316d565b146113a1576040517fd9d49b4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff1660028111156113cb576113cb61316d565b14611402576040517f6893014300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc349909701805494519251861668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff938716640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090961698909616979097179390931716929092179093559154835191820190935290819081526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff87168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600281111561154f5761154f61316d565b0217905550602082015181546040938401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909316610100029290921660ff9091161717905580516060810190915280600181526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff86168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156116205761162061316d565b0217905550602082015181546040909301516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe05306116a9600183613661565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a16109598383612433565b63ffffffff8116600090815260cb60205260409020546060908067ffffffffffffffff81111561170a5761170a612fc4565b604051908082528060200260200182016040528015611733578160200160208202803683370190505b5091506000805b828110156117f25763ffffffff8516600090815260cb6020526040812080548390811061176957611769613674565b6000918252602090912001546001600160a01b03169050600161178b8261095e565b51600581111561179d5761179d61316d565b036117e1578085846117ae816136a3565b9550815181106117c0576117c0613674565b60200260200101906001600160a01b031690816001600160a01b0316815250505b506117eb816136a3565b905061173a565b508181146117fe578083525b5050919050565b600061181082612538565b92915050565b60c9546001600160a01b0316331461185a576040517fc9c49ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff1603611911576097546040517f4e04e7a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820184905290911690634e04e7a790604401600060405180830381600087803b1580156118f457600080fd5b505af1158015611908573d6000803e3d6000fd5b50505050505050565b609754604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1fa071380000000000000000000000000000000000000000000000000000000017905291517fa1c702a7000000000000000000000000000000000000000000000000000000008152919092169163a1c702a7916119cd9186916201518091906004016137f1565b60408051808303816000875af11580156119eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067b919061381a565b600080600080606080609b805490508710611a56576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609b8881548110611a6b57611a6b613674565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150611abe90612205565b9650611ad3816020015163ffffffff16612205565b604082015190965063ffffffff1615611b3057611af9816040015163ffffffff16612205565b60408281015163ffffffff166000908152609a60205220549095506c0100000000000000000000000090046001600160a01b031693505b6099546040517fc495912b000000000000000000000000000000000000000000000000000000008152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa158015611b92573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611bd891908101906138ca565b97999698509496939592505050565b6033546001600160a01b03163314611c415760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016105bb565b6001600160a01b038116611cbd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016105bb565b611cc681612579565b50565b6000611cd560016125e3565b90508015611d0a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611d15858585612735565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416179055611d50612809565b60cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055801561067b57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b6000611e1c8361095e565b9050611e278161288e565b8363ffffffff16816020015163ffffffff1614611e70576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611e7b84612538565b905061067b818460405180606001604052806005808111156106565761065661316d565b600181516005811115611eb457611eb461316d565b14611cc6576040517f486fcee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000838383604051602001611f029392919061392e565b6040516020818303038152906040528051906020012090505b9392505050565b6000611f378360000151846020015184611eeb565b90506000611f5f846040015163ffffffff1687878560cd6128da90949392919063ffffffff16565b6001600160a01b038416600090815260ca6020526040902085518154929350869282907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001836005811115611fb857611fb861316d565b021790555060208281015182546040948501517fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911661010063ffffffff938416027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff1617650100000000009183169190910217909255860151865192516001600160a01b0387169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e91612072916139a6565b60405180910390a36040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a1505050505050565b60408051606081018252600080825260208201819052918101919091526001600160a01b038216600090815260ca6020526040908190208151606081019092528054829060ff16600581111561210d5761210d61316d565b600581111561211e5761211e61316d565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b6000612155836120b5565b90506121608161293e565b8363ffffffff16816020015163ffffffff16146121a9576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e60046040516121ea91906139a6565b60405180910390a36122008160400151836129ab565b61123c565b60cc546000908210156109fc5760cc828154811061222557612225613674565b6000918252602090912001546001600160a01b031692915050565b600081156109fc5761181060cc838154811061225e5761225e613674565b6000918252602090912001546001600160a01b0316612538565b6060600061229e845184106122975761229284600161364e565b612cbc565b8451612cbc565b90508067ffffffffffffffff8111156122b9576122b9612fc4565b6040519080825280602002602001820160405280156122e2578160200160208202803683370190505b50845190925060005b82811015610f5d57818560011810612304576000612322565b85856001188151811061231957612319613674565b60200260200101515b84828151811061233457612334613674565b60200260200101818152505060005b828110156123d4576000816001019050600088838151811061236757612367613674565b60200260200101519050600085831061238157600061239c565b89838151811061239357612393613674565b60200260200101515b90506123a88282612cd5565b8a600186901c815181106123be576123be613674565b6020908102919091010152505050600201612343565b50600194851c94918201821c91016122eb565b6002815160058111156123fc576123fc61316d565b14611cc6576040517fe637af9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6098546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c3490604401600060405180830381600087803b15801561249f57600080fd5b505af11580156124b3573d6000803e3d6000fd5b505060c9546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b03909116925063a2155c3491506044015b600060405180830381600087803b15801561252457600080fd5b505af1158015610902573d6000803e3d6000fd5b600080612544836120b5565b905060008151600581111561255b5761255b61316d565b1461257357611f1b8160000151826020015185611eeb565b50919050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615612680578160ff1660011480156126065750303b155b6126785760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105bb565b506000919050565b60005460ff8084169116106126fd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016105bb565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b600054610100900460ff166127b25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105bb565b609780546001600160a01b039485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff166128865760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105bb565b610fc0612d1d565b6004815160058111156128a3576128a361316d565b14611cc6576040517f0a06903700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84546000906128ec8686866020612da3565b14612923576040517f18b00be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6129308583856020612da3565b958690555093949350505050565b6001815160058111156129535761295361316d565b1415801561297457506002815160058111156129715761297161316d565b14155b15611cc6576040517fec3d0d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff1660028111156129e2576129e261316d565b60028111156129f3576129f361316d565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b03166040909101529050600281516002811115612a4457612a4461316d565b03612a7b576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a6020522082518154849383917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016906001908490811115612ae457612ae461316d565b021790555060208281015182546040909401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff928316610100021660ff90951694909417939093179091558201516000911615612cb257600060018360200151612b5f91906139b4565b6affffffffffffffffffffff1690506000609b8281548110612b8357612b83613674565b600091825260209182902060408051606081018252919092015463ffffffff8082168352640100000000820481169483019490945268010000000000000000900490921690820152609b8054919250879184908110612be457612be4613674565b60009182526020918290200180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff94851602179055820151878216911614612c41578060200151612c44565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b61123c8482612e4b565b600060015b82811015612573576001918201911b612cc1565b600082158015612ce3575081155b15612cf057506000611810565b50604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff16612d9a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016105bb565b610fc033612579565b815160009082811115612de2576040517fc5360feb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84915060005b81811015612e1f57612e1583868381518110612e0657612e06613674565b60200260200101518984612f26565b9250600101612de8565b50805b83811015612e4157612e378360008984612f26565b9250600101612e22565b5050949350505050565b6098546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401600060405180830381600087803b158015612eb757600080fd5b505af1158015612ecb573d6000803e3d6000fd5b505060c9546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b0390911692506361169218915060440161250a565b6000600183831c168103612f4557612f3e8585612cd5565b9050612f4f565b612f3e8486612cd5565b949350505050565b6020808252825182820181905260009190848201906040850190845b81811015612f8f57835183529284019291840191600101612f73565b50909695505050505050565b63ffffffff81168114611cc657600080fd5b80356001600160a01b03811681146109fc57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561303a5761303a612fc4565b604052919050565b60008060006060848603121561305757600080fd5b833561306281612f9b565b92506020613071858201612fad565b9250604085013567ffffffffffffffff8082111561308e57600080fd5b818701915087601f8301126130a257600080fd5b8135818111156130b4576130b4612fc4565b8060051b91506130c5848301612ff3565b818152918301840191848101908a8411156130df57600080fd5b938501935b838510156130fd578435825293850193908501906130e4565b8096505050505050509250925092565b60008060006060848603121561312257600080fd5b833561312d81612f9b565b925061313b60208501612fad565b915061314960408501612fad565b90509250925092565b60006020828403121561316457600080fd5b611f1b82612fad565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600681106131ac576131ac61316d565b9052565b6131bb82825161319c565b60208181015163ffffffff9081169184019190915260409182015116910152565b6060810161181082846131b0565b6000602082840312156131fc57600080fd5b5035919050565b6001600160a01b038316815260808101611f1b60208301846131b0565b6000806040838503121561323357600080fd5b50508035926020909101359150565b60808101600386106132565761325661316d565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b8381101561329457818101518382015260200161327c565b50506000910152565b600081518084526132b5816020860160208601613279565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611f1b602083018461329d565b6000806020838503121561330d57600080fd5b823567ffffffffffffffff8082111561332557600080fd5b818501915085601f83011261333957600080fd5b81358181111561334857600080fd5b8660208260051b850101111561335d57600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b838110156133f5578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc001855281518051151584528701518784018790526133e28785018261329d565b9588019593505090860190600101613396565b509098975050505050505050565b6000806040838503121561341657600080fd5b823561342181612f9b565b915061342f60208401612fad565b90509250929050565b600080600080600060a0868803121561345057600080fd5b853561345b81612f9b565b945060208601359350604086013561347281612f9b565b925061348060608701612fad565b915061348e60808701612fad565b90509295509295909350565b600080604083850312156134ad57600080fd5b82356134b881612f9b565b915060208301356134c881612f9b565b809150509250929050565b6000602082840312156134e557600080fd5b8135611f1b81612f9b565b6020808252825182820181905260009190848201906040850190845b81811015612f8f5783516001600160a01b03168352928401929184019160010161350c565b60008060006060848603121561354657600080fd5b61354f84612fad565b9250602084013561355f81612f9b565b929592945050506040919091013590565b60006001600160a01b0380891683528088166020840152808716604084015280861660608401525060c060808301526135ac60c083018561329d565b82810360a08401526135be818561329d565b9998505050505050505050565b600080600080608085870312156135e157600080fd5b6135ea85612fad565b93506135f860208601612fad565b925061360660408601612fad565b915061361460608601612fad565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156118105761181061361f565b818103818111156118105761181061361f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036136d4576136d461361f565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc183360301811261370f57600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261374e57600080fd5b83018035915067ffffffffffffffff82111561376957600080fd5b60200191503681900382131561377e57600080fd5b9250929050565b8183823760009101908152919050565b805164ffffffffff811681146109fc57600080fd5b6000806000606084860312156137bf57600080fd5b6137c884613795565b92506137d660208501613795565b915060408401516137e681612f9b565b809150509250925092565b600063ffffffff808616835280851660208401525060606040830152610d06606083018461329d565b6000806040838503121561382d57600080fd5b825161383881612f9b565b6020939093015192949293505050565b600082601f83011261385957600080fd5b815167ffffffffffffffff81111561387357613873612fc4565b6138a460207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601612ff3565b8181528460208386010111156138b957600080fd5b612f4f826020830160208701613279565b600080604083850312156138dd57600080fd5b825167ffffffffffffffff808211156138f557600080fd5b61390186838701613848565b9350602085015191508082111561391757600080fd5b5061392485828601613848565b9150509250929050565b6000600685106139405761394061316d565b5060f89390931b835260e09190911b7fffffffff0000000000000000000000000000000000000000000000000000000016600183015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600582015260190190565b60208101611810828461319c565b6affffffffffffffffffffff8281168282160390808211156139d8576139d861361f565b509291505056fea2646970667358221220e309f9bffc15890b051ed3430856c060a8f43710dfae59ee291e1ab157bc0db564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"127038:15971:0:-:0;;;128289:133;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;56994:120;;;;;;;;;;;;;-1:-1:-1;;;56994:120:0;;;;37545:32;;128339:6;56994:120;37811:24;37825:8;37811:24;:::i;:::-;37803:32;;-1:-1:-1;57081:26:0::1;::::0;;::::1;;::::0;128361:24;::::1;4063:2;128361:24;::::0;-1:-1:-1;128357:58:0::1;;128394:21;;-1:-1:-1::0;;;128394:21:0::1;;;;;;;;;;;128357:58;128289:133:::0;127038:15971;;14:280:1;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;184:9;178:16;234:10;227:5;223:22;216:5;213:33;203:61;;260:1;257;250:12;203:61;283:5;14:280;-1:-1:-1;;;14:280:1:o;299:297::-;417:12;;464:4;453:16;;;447:23;;417:12;482:16;;479:111;;;576:1;572:6;562;556:4;552:17;549:1;545:25;541:38;534:5;530:50;521:59;;479:111;;299:297;;;:::o;:::-;127038:15971:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"127038:15971:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;138914:116;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;131252:988;;;;;;:::i;:::-;;:::i;:::-;;129288:1914;;;;;;:::i;:::-;;:::i;103354:136::-;;;;;;:::i;:::-;;:::i;104105:417::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;103864:201::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;138258:100::-;138337:7;:14;138258:100;;;4885:25:1;;;4873:2;4858:18;138258:100:0;4739:177:1;139080:463:0;;;;;;:::i;:::-;;:::i;105542:633::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;137165:101::-;137244:10;:15;137165:101;;104562;104640:9;:16;104562:101;;138408:456;;;;;;:::i;:::-;;:::i;132290:1077::-;;;;;;:::i;:::-;;:::i;37848:401::-;38019:28;;;;;;;;38032:7;38019:28;;38041:5;38019:28;;;;37848:401;;;;38019:28;37848:401;:::i;35226:1352::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;57339:57::-;;;:::i;101169:751::-;;;;;;:::i;:::-;;:::i;56511:35::-;;;;;;;;8963:10:1;8951:23;;;8933:42;;8921:2;8906:18;56511:35:0;8789:192:1;54089:85:0;54161:6;;-1:-1:-1;;;;;54161:6:0;54089:85;;;-1:-1:-1;;;;;9150:55:1;;;9132:74;;9120:2;9105:18;54089:85:0;8986:226:1;99703:21:0;;;;;-1:-1:-1;;;;;99703:21:0;;;134725:794;;;;;;:::i;:::-;;:::i;:::-;;;9998:66:1;9986:79;;;9968:98;;9956:2;9941:18;134725:794:0;9824:248:1;127482:21:0;;;;;-1:-1:-1;;;;;127482:21:0;;;102284:1030;;;;;;:::i;:::-;;:::i;99731:26::-;;;;;-1:-1:-1;;;;;99731:26:0;;;137316:732;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;138098:110::-;;;;;;:::i;:::-;;:::i;135893:898::-;;;;;;:::i;:::-;;:::i;104703:799::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;54971:198::-;;;;;;:::i;:::-;;:::i;128428:427::-;;;;;;:::i;:::-;;:::i;99764:20::-;;;;;-1:-1:-1;;;;;99764:20:0;;;133733:942;;;;;;:::i;:::-;;:::i;138914:116::-;138955:22;138996:27;139005:1;139008:7;:14;;;;138996:8;:27::i;:::-;138989:34;;138914:116;:::o;131252:988::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;13179:2:1;54293:68:0;;;13161:21:1;;;13198:18;;;13191:30;13257:34;13237:18;;;13230:62;13309:18;;54293:68:0;;;;;;;;;131421:25:::1;131449:18;131461:5;131449:11;:18::i;:::-;131421:46;;131558:21;:6;:19;:21::i;:::-;131610:6;131593:23;;:6;:13;;;:23;;;131589:58;;131625:22;;;;;;;;;;;;;;131589:58;131998:16;132017:43;132028:16;132046:6;132054:5;132017:10;:43::i;:::-;131998:62;;132142:91;132154:8;132164:5;132171:54;;;;;;;;132183:19;132171:54;;;;;;;;:::i;:::-;;;;;132204:6;132171:54;;;;;;132212:6;:12;;;132171:54;;;;::::0;132227:5:::1;132142:11;:91::i;:::-;131352:888;;131252:988:::0;;;:::o;129288:1914::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;13179:2:1;54293:68:0;;;13161:21:1;;;13198:18;;;13191:30;13257:34;13237:18;;;13230:62;13309:18;;54293:68:0;12977:356:1;54293:68:0;129393:24;::::1;::::0;::::1;::::0;129389:61:::1;;129426:24;;;;;;;;;;;;;;129389:61;129533:25;129561;129580:5;129561:18;:25::i;:::-;129533:53:::0;-1:-1:-1;129632:12:0::1;::::0;;129759:11;;:32:::1;::::0;::::1;;;;;;:::i;:::-;::::0;129755:1278:::1;;129975:7;:14:::0;129993:16:::1;-1:-1:-1::0;129971:63:0::1;;130018:16;;;;;;;;;;;;;;129971:63;130063:7;:14:::0;;130181:19:::1;::::0;;::::1;::::0;;;;;::::1;::::0;;-1:-1:-1;;;;;130181:19:0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;130214:21:::1;::::0;::::1;-1:-1:-1::0;130214:21:0;;;:13:::1;130181:19;130214:21:::0;;;;;;:33;;;;::::1;::::0;;;;;;;;::::1;::::0;;;;::::1;;::::0;;;130063:14;-1:-1:-1;129755:1278:0::1;;;130283:17;130268:11:::0;;:32:::1;::::0;::::1;;;;;;:::i;:::-;;:59;;;;;130321:6;130304:23;;:6;:13;;;:23;;;130268:59;130264:769;;;130492:6;:12;;;130484:20;;130852:44;130863:17;130882:6;130890:5;130852:10;:44::i;:::-;130841:55;;130264:769;;;131004:18;;;;;;;;;;;;;;130264:769;131114:81;131126:8;131136:5;131143:44;;;;;;;;131155:16;131143:44;;;;;;;;:::i;:::-;;;;;131173:6;131143:44;;;;;;131181:5;131143:44;;;;::::0;131189:5:::1;131114:11;:81::i;:::-;129379:1823;;;129288:1914:::0;;;:::o;103354:136::-;100131:5;;-1:-1:-1;;;;;100131:5:0;100117:10;:19;100113:48;;100145:16;;;;;;;;;;;;;;100113:48;103449:34:::1;103461:6;103469:5;103476:6;103449:11;:34::i;:::-;103354:136:::0;;;:::o;104105:417::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;104208:25:0;104227:5;104208:18;:25::i;:::-;-1:-1:-1;;;;;142233:16:0;;104360:31;142233:16;;;:9;:16;;;;;;;;:22;;;;;;104360:31;;:13;:31;;;;;:36;104199:34;;-1:-1:-1;104400:19:0;;104360:36;;:59;;;;;;;;:::i;:::-;;:95;;;;-1:-1:-1;104438:17:0;104423:11;;:32;;;;;;;;:::i;:::-;;;104360:95;104356:160;;;104485:20;104471:34;;104356:160;104105:417;;;:::o;103864:201::-;-1:-1:-1;;;;;;;;103920:13:0;-1:-1:-1;;;;;;;;;;;;;;;103980:16:0;103990:5;103980:9;:16::i;:::-;103972:24;-1:-1:-1;;;;;;104010:19:0;;;104006:52;;104040:18;104052:5;104040:11;:18::i;:::-;104031:27;;104006:52;103864:201;;;:::o;139080:463::-;139210:7;:14;139154:22;;139238:24;;;139234:54;;139271:17;;;;;;;;;;;;;;139234:54;139323:11;139302:18;139314:6;139302:9;:18;:::i;:::-;:32;139298:95;;;139359:23;139373:9;139359:11;:23;:::i;:::-;139350:32;;139298:95;139424:6;139410:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;139410:21:0;;139402:29;;139446:9;139441:96;139465:6;139461:1;:10;139441:96;;;139503:23;139512:13;139524:1;139512:9;:13;:::i;:::-;139503:8;:23::i;:::-;139492:5;139498:1;139492:8;;;;;;;;:::i;:::-;;;;;;;;;;:34;139473:3;;;:::i;:::-;;;139441:96;;;;139178:365;139080:463;;;;:::o;105542:633::-;105627:16;105645:13;105660:19;105681:18;105715;105736:16;105746:5;-1:-1:-1;;;;;142233:16:0;142201:13;142233:16;;;:9;:16;;;;;:22;;;;;;;;142135:127;105736:16;105762:32;105797:25;;;:13;:25;;;;;;105762:60;;;;;;;;;;105715:37;;-1:-1:-1;105762:32:0;;:60;;105797:25;105762:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;105762:60:0;;;;;;105839:17;;105880:24;;;;105927:23;;;;105839:17;;-1:-1:-1;105880:24:0;;-1:-1:-1;105914:36:0;;-1:-1:-1;105839:17:0;-1:-1:-1;105964:14:0;;105960:209;;105994:28;106025:9;106035:14;106048:1;106035:10;:14;:::i;:::-;106025:25;;;;;;;;:::i;:::-;;;;;;;;;;105994:56;;;;;;;;106025:25;;;;105994:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;106072:86:0;;106082:32;;:75;;106139:18;;106082:75;;;106117:7;:19;;;106082:75;106072:86;;:9;:86::i;:::-;106064:94;;105980:189;105960:209;105705:470;;105542:633;;;;;:::o;138408:456::-;138464:22;138498;138523:10;:8;:10::i;:::-;138498:35;;138603:25;138631;138650:5;138631:18;:25::i;:::-;138603:53;-1:-1:-1;138721:13:0;;138737:11;;:32;;;;;;;;:::i;:::-;;:64;;138789:6;:12;;;138737:64;;;;;138772:7;:14;138737:64;138721:80;;138818:39;138844:5;138851;138818:25;:39::i;:::-;138811:46;138408:456;-1:-1:-1;;;;;138408:456:0:o;132290:1077::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;13179:2:1;54293:68:0;;;13161:21:1;;;13198:18;;;13191:30;13257:34;13237:18;;;13230:62;13309:18;;54293:68:0;12977:356:1;54293:68:0;132459:25:::1;132487:18;132499:5;132487:11;:18::i;:::-;132459:46;;132682:24;:6;:22;:24::i;:::-;132737:6;132720:23;;:6;:13;;;:23;;;132716:58;;132752:22;;;;;;;;;;;;;;132716:58;133124:16;133143:46;133154:19;133175:6;133183:5;133143:10;:46::i;:::-;133124:65;;133271:89;133283:8;133293:5;133300:52;;;;;;;;133312:17;133300:52;;;;;;;;:::i;35226:1352::-:0;35286:27;35342:5;;35378:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;35378:20:0;;;;;;;;;;;;;;;;35364:34;;35408:19;35442:9;35437:1135;35461:6;35457:1;:10;35437:1135;;;35492:5;;35498:1;35492:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;35484:16;;35514:20;35537:11;35549:1;35537:14;;;;;;;;:::i;:::-;;;;;;;35514:37;;35894:4;-1:-1:-1;;;;;35886:26:0;35913:5;:14;;;;;;;;:::i;:::-;35886:42;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;35865:17:0;;;35848:80;;;;;;36201:19;;36198:38;36188:301;;36365:66;36359:4;36352:80;36466:4;36460;36453:18;36188:301;-1:-1:-1;36544:3:0;;35437:1135;;;;35315:1263;;35226:1352;;;;:::o;57339:57::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;13179:2:1;54293:68:0;;;13161:21:1;;;13198:18;;;13191:30;13257:34;13237:18;;;13230:62;13309:18;;54293:68:0;12977:356:1;54293:68:0;57339:57::o;101169:751::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;13179:2:1;54293:68:0;;;13161:21:1;;;13198:18;;;13191:30;13257:34;13237:18;;;13230:62;13309:18;;54293:68:0;12977:356:1;54293:68:0;-1:-1:-1;;;;;142233:16:0;;101264:34:::1;142233:16:::0;;;:9;:16;;;;;;;;:22;;;;;;101301:38;;:13:::1;:38:::0;;;;;;101264:75;;::::1;::::0;::::1;::::0;;;;;;;::::1;;;::::0;::::1;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;::::0;;;;::::1;::::0;::::1;;;;::::0;::::1;::::0;;;::::1;-1:-1:-1::0;;;;;101264:75:0::1;::::0;;;;;;-1:-1:-1;;101353:19:0;;:39:::1;::::0;::::1;;;;;;:::i;:::-;::::0;101349:70:::1;;101401:18;;;;;;;;;;;;;;101349:70;101456:19;101433::::0;;:42:::1;::::0;::::1;;;;;;:::i;:::-;::::0;101429:79:::1;;101484:24;;;;;;;;;;;;;;101429:79;101645:11;::::0;101624:46:::1;::::0;;;;;;;101599:19:::1;::::0;-1:-1:-1;;;;;101645:11:0::1;::::0;101624:44:::1;::::0;:46:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;101645:11;101624:46:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;101598:72;;;;101723:12;101702:33;;3769:7;101702:33;;;;:::i;:::-;101684:15;:51;101680:81;;;101744:17;;;;;;;;;;;;;;101680:81;101843:70;101864:6;101879:12;101909:1;101843:11;:70::i;:::-;101254:666;;101169:751:::0;;:::o;134725:794::-;134977:11;;134872:17;;-1:-1:-1;;;;;134977:11:0;134963:10;:25;134959:60;;134997:22;;;;;;;;;;;;;;134959:60;3608:6;135151:41;;135147:82;;;135201:28;;;;;;;;;;;;;;135147:82;135363:34;135375:6;135383:5;135390:6;135363:11;:34::i;:::-;-1:-1:-1;135482:30:0;134725:794;;;;;;;:::o;102284:1030::-;100131:5;;-1:-1:-1;;;;;100131:5:0;100117:10;:19;100113:48;;100145:16;;;;;;;;;;;;;;100113:48;102435:25:::1;::::0;::::1;102469:16;102435:25:::0;;;:13:::1;:25;::::0;;;;:30;::::1;;:50;::::0;::::1;;;;;;:::i;:::-;;102431:79;;102494:16;;;;;;;;;;;;;;102431:79;102524:26;::::0;::::1;102559:16;102524:26:::0;;;:13:::1;:26;::::0;;;;:31;::::1;;:51;::::0;::::1;;;;;;:::i;:::-;;102520:81;;102584:17;;;;;;;;;;;;;;102520:81;102626:41;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;-1:-1:-1;102626:41:0;;;;;;102611:9:::1;:57:::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;;::::1;::::0;;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;::::1;;::::0;;;::::1;::::0;;;102808:16;;102862:65;;;;::::1;::::0;;;;;;;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;102862:65:0;;;;;;;102834:25:::1;::::0;::::1;::::0;;:13:::1;:25:::0;;;;:93;;;;:25;;:93;::::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;102834:93:0::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;102834:93:0::1;::::0;::::1;::::0;::::1;::::0;;::::1;;;::::0;;;;;;;;;::::1;::::0;;102966:65;;::::1;::::0;::::1;::::0;;;;102834:93:::1;102966:65:::0;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;102966:65:0;;;;;;;102937:26:::1;::::0;::::1;::::0;;:13:::1;:26:::0;;;;:94;;;;:26;;:94;::::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;102937:94:0::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;102937:94:0::1;::::0;::::1;::::0;::::1;::::0;;::::1;;;::::0;;;;;;;;;;;;;;;::::1;::::0;;103157:95:::1;103186:14;102937:94;103186:10:::0;:14:::1;:::i;:::-;103157:95;::::0;;16217:25:1;;;16261:10;16307:15;;;16302:2;16287:18;;16280:43;16359:15;;16339:18;;;16332:43;16205:2;16190:18;103157:95:0::1;;;;;;;103262:45;103283:10;103295:11;103262:20;:45::i;137316:732::-:0;137431:21;;;137414:14;137431:21;;;:13;:21;;;;;:28;137379:23;;137431:28;137478:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;137478:21:0;;137469:30;;137509:20;137548:9;137543:227;137567:6;137563:1;:10;137543:227;;;137610:21;;;137594:13;137610:21;;;:13;:21;;;;;:24;;137632:1;;137610:24;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;137610:24:0;;-1:-1:-1;137610:24:0;137652:18;137664:5;137652:11;:18::i;:::-;:23;:43;;;;;;;;:::i;:::-;;137648:112;;137740:5;137715:6;137722:14;;;;:::i;:::-;;;137715:22;;;;;;;;:::i;:::-;;;;;;:30;-1:-1:-1;;;;;137715:30:0;;;-1:-1:-1;;;;;137715:30:0;;;;;137648:112;-1:-1:-1;137575:3:0;;;:::i;:::-;;;137543:227;;;;137799:6;137783:12;:22;137779:263;;138005:12;137997:6;137990:28;137779:263;137404:644;;137316:732;;;:::o;138098:110::-;138155:12;138186:15;138195:5;138186:8;:15::i;:::-;138179:22;138098:110;-1:-1:-1;;138098:110:0:o;135893:898::-;136044:6;;-1:-1:-1;;;;;136044:6:0;136030:10;:20;136026:50;;136059:17;;;;;;;;;;;;;;136026:50;136101:11;136090:22;;:7;:22;;;136086:699;;136202:6;;136178:64;;;;;-1:-1:-1;;;;;16578:55:1;;;136178:64:0;;;16560:74:1;16650:18;;;16643:34;;;136202:6:0;;;;136178:45;;16533:18:1;;136178:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103354:136;;;:::o;136086:699::-;136514:6;;136667:92;;;-1:-1:-1;;;;;16578:55:1;;;136667:92:0;;;16560:74:1;16650:18;;;;16643:34;;;136667:92:0;;;;;;;;;;16533:18:1;;;;136667:92:0;;;;;;;;;136690:49;136667:92;;;136498:276;;;;;136514:6;;;;;136498:42;;:276;;136572:7;;3608:6;;136667:92;136498:276;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;104703:799::-;104798:13;104825:14;104853:20;104887:19;104920:26;104960:28;105026:9;:16;;;;105017:5;:25;105013:55;;105051:17;;;;;;;;;;;;;;105013:55;105078:28;105109:9;105119:5;105109:16;;;;;;;;:::i;:::-;;;;;;;;;;105078:47;;;;;;;;105109:16;;;;105078:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;105143:29:0;;:9;:29::i;:::-;105135:37;;105191:30;105201:7;:19;;;105191:30;;:9;:30::i;:::-;105235:20;;;;105182:39;;-1:-1:-1;105235:24:0;;;105231:176;;105290:31;105300:7;:20;;;105290:31;;:9;:31::i;:::-;105363:20;;;;;105349:35;;;;;;:13;:35;;;:47;105275:46;;-1:-1:-1;105349:47:0;;;-1:-1:-1;;;;;105349:47:0;;-1:-1:-1;105231:176:0;105467:5;;105451:44;;;;;;;;4885:25:1;;;-1:-1:-1;;;;;105467:5:0;;;;105451:37;;4858:18:1;;105451:44:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;104703:799;;;;-1:-1:-1;104703:799:0;;;;;-1:-1:-1;;;104703:799:0:o;54971:198::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;13179:2:1;54293:68:0;;;13161:21:1;;;13198:18;;;13191:30;13257:34;13237:18;;;13230:62;13309:18;;54293:68:0;12977:356:1;54293:68:0;-1:-1:-1;;;;;55059:22:0;::::1;55051:73;;;::::0;-1:-1:-1;;;55051:73:0;;18749:2:1;55051:73:0::1;::::0;::::1;18731:21:1::0;18788:2;18768:18;;;18761:30;18827:34;18807:18;;;18800:62;18898:8;18878:18;;;18871:36;18924:19;;55051:73:0::1;18547:402:1::0;55051:73:0::1;55134:28;55153:8;55134:18;:28::i;:::-;54971:198:::0;:::o;128428:427::-;48831:19;48853:25;48876:1;48853:22;:25::i;:::-;48831:47;;48892:14;48888:65;;;48922:13;:20;;;;;;;;48888:65;128551:50:::1;128571:7;128580:12;128594:6;128551:19;:50::i;:::-;128611:6;:16:::0;;;::::1;-1:-1:-1::0;;;;;128611:16:0;::::1;;::::0;;128637::::1;:14;:16::i;:::-;128824:7;:24:::0;;::::1;::::0;::::1;::::0;;128845:1:::1;128824:24:::0;;;;;::::1;::::0;;;::::1;::::0;;48973:99;;;;49023:5;49007:21;;;;;;49047:14;;-1:-1:-1;19106:36:1;;49047:14:0;;19094:2:1;19079:18;49047:14:0;;;;;;;48821:257;128428:427;;;;:::o;133733:942::-;133891:25;133919:18;133931:5;133919:11;:18::i;:::-;133891:46;;134023:25;:6;:23;:25::i;:::-;134079:6;134062:23;;:6;:13;;;:23;;;134058:58;;134094:22;;;;;;;;;;;;;;134058:58;134463:16;134482:15;134491:5;134482:8;:15::i;:::-;134463:34;;134579:89;134591:8;134601:5;134608:52;;;;;;;;134620:17;134608:52;;;;;;;;:::i;32865:164::-;32957:16;32942:11;;:31;;;;;;;;:::i;:::-;;32938:85;;32996:16;;;;;;;;;;;;;;109696:170;109785:7;109838:4;109844:6;109852:5;109821:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;109811:48;;;;;;109804:55;;109696:170;;;;;;:::o;140016:584::-;140220:16;140239:51;140250:9;:14;;;140266:9;:16;;;140284:5;140239:10;:51::i;:::-;140220:70;;140372:15;140390:61;140408:9;:15;;;140390:61;;140425:8;140435:5;140442:8;140390:10;:17;;:61;;;;;;;:::i;:::-;-1:-1:-1;;;;;140461:16:0;;;;;;:9;:16;;;;;:28;;;;140372:79;;-1:-1:-1;140480:9:0;;140461:16;;:28;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;140461:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;140534:16;;;140518:14;;140504:54;;-1:-1:-1;;;;;140504:54:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;140573:20;;4885:25:1;;;140573:20:0;;4873:2:1;4858:18;140573:20:0;;;;;;;140145:455;;140016:584;;;;:::o;141613:135::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;141725:16:0;;;;;;:9;:16;;;;;;;141718:23;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;141613:135;-1:-1:-1;;141613:135:0:o;107358:775::-;107519:25;107547;107566:5;107547:18;:25::i;:::-;107519:53;;107582:30;:6;:28;:30::i;:::-;107643:6;107626:23;;:6;:13;;;:23;;;107622:58;;107658:22;;;;;;;;;;;;;;107622:58;107851:5;-1:-1:-1;;;;;107807:50:0;107843:6;107807:50;;;107821:20;107807:50;;;;;;:::i;:::-;;;;;;;;107933:37;107949:6;:12;;;107963:6;107933:15;:37::i;:::-;108085:41;103354:136;141849:172;141952:7;:14;141915:13;;141944:22;;141940:75;;;141990:7;141998:5;141990:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;141990:14:0;;141849:172;-1:-1:-1;;141849:172:0:o;142803:204::-;142859:12;142887:10;;142883:72;;142920:24;142929:7;142937:5;142929:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;142929:14:0;142920:8;:24::i;15934:2253::-;16021:22;16224:14;16241:62;16259:6;:13;16251:5;:21;:51;;16292:9;:5;16300:1;16292:9;:::i;:::-;16241;:62::i;16251:51::-;16275:6;:13;16241:9;:62::i;:::-;16224:79;;16335:6;16321:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16321:21:0;-1:-1:-1;16374:13:0;;16313:29;;-1:-1:-1;16352:19:0;16652:1519;16676:6;16672:1;:10;16652:1519;;;16818:11;16806:5;16814:1;16806:9;:23;16805:58;;16861:1;16805:58;;;16833:6;16840:5;16848:1;16840:9;16833:17;;;;;;;;:::i;:::-;;;;;;;16805:58;16794:5;16800:1;16794:8;;;;;;;;:::i;:::-;;;;;;:69;;;;;17365:17;17360:618;17400:11;17388:9;:23;17360:618;;;17451:18;17472:9;17484:1;17472:13;17451:34;;17507:17;17527:6;17534:9;17527:17;;;;;;;;:::i;:::-;;;;;;;17507:37;;17620:18;17654:11;17641:10;:24;:58;;17697:1;17641:58;;;17668:6;17675:10;17668:18;;;;;;;;:::i;:::-;;;;;;;17641:58;17620:79;;17927:32;17937:9;17948:10;17927:9;:32::i;:::-;17902:6;17922:1;17909:9;:14;;17902:22;;;;;;;;:::i;:::-;;;;;;;;;;:57;-1:-1:-1;;;17426:1:0;17413:14;17360:618;;;-1:-1:-1;18083:1:0;18145:11;;;;18063:15;;;18062:22;;;16684:3;16652:1519;;33082:173;33177:19;33162:11;;:34;;;;;;;;:::i;:::-;;33158:91;;33219:19;;;;;;;;;;;;;;140681:235;140792:11;;140778:63;;;;;20102:10:1;20139:15;;;140778:63:0;;;20121:34:1;20191:15;;20171:18;;;20164:43;-1:-1:-1;;;;;140792:11:0;;;;140778:38;;20065:18:1;;140778:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;140865:6:0;;140851:58;;;;;20102:10:1;20139:15;;;140851:58:0;;;20121:34:1;20191:15;;20171:18;;;20164:43;-1:-1:-1;;;;;140865:6:0;;;;-1:-1:-1;140851:33:0;;-1:-1:-1;20065:18:1;;140851:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;142351:371;142407:12;142489:25;142517;142536:5;142517:18;:25::i;:::-;142489:53;-1:-1:-1;142571:17:0;142556:11;;:32;;;;;;;;:::i;:::-;;142552:115;;142611:45;142622:6;:11;;;142635:6;:13;;;142650:5;142611:10;:45::i;142552:115::-;142421:301;142351:371;;;:::o;55323:187::-;55415:6;;;-1:-1:-1;;;;;55431:17:0;;;;;;;;;;;55463:40;;55415:6;;;55431:17;55415:6;;55463:40;;55396:16;;55463:40;55386:124;55323:187;:::o;51007:808::-;51071:4;51404:13;;;;;;;51400:409;;;51458:7;:12;;51469:1;51458:12;:61;;;;-1:-1:-1;51513:4:0;40062:19;:23;51458:61;51433:166;;;;-1:-1:-1;;;51433:166:0;;20420:2:1;51433:166:0;;;20402:21:1;20459:2;20439:18;;;20432:30;20498:34;20478:18;;;20471:62;20569:16;20549:18;;;20542:44;20603:19;;51433:166:0;20218:410:1;51433:166:0;-1:-1:-1;51620:5:0;;51007:808;-1:-1:-1;51007:808:0:o;51400:409::-;51664:12;;:22;;;;:12;;:22;51656:81;;;;-1:-1:-1;;;51656:81:0;;20420:2:1;51656:81:0;;;20402:21:1;20459:2;20439:18;;;20432:30;20498:34;20478:18;;;20471:62;20569:16;20549:18;;;20542:44;20603:19;;51656:81:0;20218:410:1;51656:81:0;-1:-1:-1;51751:12:0;:22;;;;;;;;;;;;;;;-1:-1:-1;;51007:808:0:o;100560:203::-;50418:13;;;;;;;50410:69;;;;-1:-1:-1;;;50410:69:0;;20835:2:1;50410:69:0;;;20817:21:1;20874:2;20854:18;;;20847:30;20913:34;20893:18;;;20886:62;20984:13;20964:18;;;20957:41;21015:19;;50410:69:0;20633:407:1;50410:69:0;100680:6:::1;:16:::0;;-1:-1:-1;;;;;100680:16:0;;::::1;::::0;;;::::1;;::::0;;;100706:11:::1;:26:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;100742:5:::1;:14:::0;;;;;::::1;::::0;::::1;;::::0;;100560:203::o;53801:95::-;50418:13;;;;;;;50410:69;;;;-1:-1:-1;;;50410:69:0;;20835:2:1;50410:69:0;;;20817:21:1;20874:2;20854:18;;;20847:30;20913:34;20893:18;;;20886:62;20984:13;20964:18;;;20957:41;21015:19;;50410:69:0;20633:407:1;50410:69:0;53863:26:::1;:24;:26::i;33595:176::-:0;33691:20;33676:11;;:35;;;;;;;;:::i;:::-;;33672:93;;33734:20;;;;;;;;;;;;;;29031:650;29381:9;;29213:15;;29313:64;29334:5;29341:8;29351:6;630:2;29313:20;:64::i;:::-;:77;29309:130;;29413:15;;;;;;;;;;;;;;29309:130;29551:64;29572:5;29579:8;29589:6;630:2;29551:20;:64::i;:::-;29655:19;;;;-1:-1:-1;29541:74:0;;29031:650;-1:-1:-1;;;;29031:650:0:o;33318:223::-;33419:16;33404:11;;:31;;;;;;;;:::i;:::-;;;:69;;;;-1:-1:-1;33454:19:0;33439:11;;:34;;;;;;;;:::i;:::-;;;33404:69;33400:135;;;33496:28;;;;;;;;;;;;;;108231:1078;108347:27;;;108312:32;108347:27;;;:13;:27;;;;;;108312:62;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;108312:62:0;;;;;;;-1:-1:-1;108409:19:0;108388:17;;:40;;;;;;;;:::i;:::-;;108384:77;;108437:24;;;;;;;;;;;;;;108384:77;108491:19;108471:39;;;-1:-1:-1;;;;;108520:33:0;;:24;;;;:33;;;;108563:27;;;-1:-1:-1;108563:27:0;;;:13;:27;;;:42;;;;108471:12;;108563:27;;:42;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;108563:42:0;;;;;;;;;;;;-1:-1:-1;;;;;108563:42:0;;;;;;;;;;;;;;;;;;;;;;;;;;108720:23;;;108563:42;;108720:28;;108716:529;;108764:20;108813:1;108787:12;:23;;;:27;;;;:::i;:::-;108764:50;;;;108828:28;108859:9;108869:12;108859:23;;;;;;;;:::i;:::-;;;;;;;;;;108828:54;;;;;;;;108859:23;;;;108828:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;108896:9;:23;;108828:54;;-1:-1:-1;108935:12:0;;108906;;108896:23;;;;;;:::i;:::-;;;;;;;;;;;:51;;;;;;;;;;;;;109028:19;;;:35;;;;;;:78;;109087:7;:19;;;109028:78;;;109066:18;;109028:78;109127:25;;;;;;;;:13;:25;;;;;;;;109120:32;;;;109171:63;;21466:25:1;;;21556:15;;;21536:18;;;21529:43;21588:18;;21581:43;-1:-1:-1;;;;;21660:55:1;;21655:2;21640:18;;21633:83;109127:25:0;;-1:-1:-1;109171:63:0;;21453:3:1;21438:19;109171:63:0;;;;;;;108750:495;;108716:529;109254:48;109277:12;109291:10;109254:22;:48::i;18272:241::-;18329:14;18372:1;18383:124;18399:5;18390:6;:14;18383:124;;;18448:8;;;;;18484:12;18383:124;;11679:287;11760:14;11790:23;;:51;;;;-1:-1:-1;11817:24:0;;11790:51;11786:174;;;-1:-1:-1;11864:1:0;11857:8;;11786:174;-1:-1:-1;11913:35:0;;;;;;;21884:19:1;;;;21919:12;;;21912:28;;;;11913:35:0;;;;;;;;;21956:12:1;;;;11913:35:0;;11903:46;;;;;;11679:287::o;53902:111::-;50418:13;;;;;;;50410:69;;;;-1:-1:-1;;;50410:69:0;;20835:2:1;50410:69:0;;;20817:21:1;20874:2;20854:18;;;20847:30;20913:34;20893:18;;;20886:62;20984:13;20964:18;;;20957:41;21015:19;;50410:69:0;20633:407:1;50410:69:0;53974:32:::1;52594:10:::0;53974:18:::1;:32::i;9407:900::-:0;9647:12;;9542:13;;9673:17;;;9669:48;;;9699:18;;;;;;;;;;;;;;9669:48;9735:4;9727:12;;9904:9;9899:189;9923:8;9919:1;:12;9899:189;;;10037:36;10047:5;10054;10060:1;10054:8;;;;;;;;:::i;:::-;;;;;;;10064:5;10071:1;10037:9;:36::i;:::-;10029:44;-1:-1:-1;9933:3:0;;9899:189;;;-1:-1:-1;10185:8:0;10168:123;10199:6;10195:1;:10;10168:123;;;10238:38;10248:5;10263:1;10267:5;10274:1;10238:9;:38::i;:::-;10230:46;-1:-1:-1;10207:3:0;;10168:123;;;;9561:746;9407:900;;;;;;:::o;140999:246::-;141113:11;;141099:67;;;;;20102:10:1;20139:15;;;141099:67:0;;;20121:34:1;20191:15;;20171:18;;;20164:43;-1:-1:-1;;;;;141113:11:0;;;;141099:41;;20065:18:1;;141099:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;141190:6:0;;141176:62;;;;;20102:10:1;20139:15;;;141176:62:0;;;20121:34:1;20191:15;;20171:18;;;20164:43;-1:-1:-1;;;;;141190:6:0;;;;-1:-1:-1;141176:36:0;;-1:-1:-1;20065:18:1;;141176:62:0;19922:291:1;10689:526:0;10825:14;11030:1;11003:23;;;11002:29;:34;;10998:211;;11085:24;11095:4;11101:7;11085:9;:24::i;:::-;11078:31;;;;10998:211;11174:24;11184:7;11193:4;11174:9;:24::i;10998:211::-;10689:526;;;;;;:::o;14:632:1:-;185:2;237:21;;;307:13;;210:18;;;329:22;;;156:4;;185:2;408:15;;;;382:2;367:18;;;156:4;451:169;465:6;462:1;459:13;451:169;;;526:13;;514:26;;595:15;;;;560:12;;;;487:1;480:9;451:169;;;-1:-1:-1;637:3:1;;14:632;-1:-1:-1;;;;;;14:632:1:o;651:121::-;736:10;729:5;725:22;718:5;715:33;705:61;;762:1;759;752:12;777:196;845:20;;-1:-1:-1;;;;;894:54:1;;884:65;;874:93;;963:1;960;953:12;978:184;1030:77;1027:1;1020:88;1127:4;1124:1;1117:15;1151:4;1148:1;1141:15;1167:334;1238:2;1232:9;1294:2;1284:13;;1299:66;1280:86;1268:99;;1397:18;1382:34;;1418:22;;;1379:62;1376:88;;;1444:18;;:::i;:::-;1480:2;1473:22;1167:334;;-1:-1:-1;1167:334:1:o;1506:1153::-;1607:6;1615;1623;1676:2;1664:9;1655:7;1651:23;1647:32;1644:52;;;1692:1;1689;1682:12;1644:52;1731:9;1718:23;1750:30;1774:5;1750:30;:::i;:::-;1799:5;-1:-1:-1;1823:2:1;1844:38;1863:18;;;1844:38;:::i;:::-;1834:48;;1933:2;1922:9;1918:18;1905:32;1956:18;1997:2;1989:6;1986:14;1983:34;;;2013:1;2010;2003:12;1983:34;2051:6;2040:9;2036:22;2026:32;;2096:7;2089:4;2085:2;2081:13;2077:27;2067:55;;2118:1;2115;2108:12;2067:55;2154:2;2141:16;2176:2;2172;2169:10;2166:36;;;2182:18;;:::i;:::-;2228:2;2225:1;2221:10;2211:20;;2251:28;2275:2;2271;2267:11;2251:28;:::i;:::-;2313:15;;;2383:11;;;2379:20;;;2344:12;;;;2411:19;;;2408:39;;;2443:1;2440;2433:12;2408:39;2467:11;;;;2487:142;2503:6;2498:3;2495:15;2487:142;;;2569:17;;2557:30;;2520:12;;;;2607;;;;2487:142;;;2648:5;2638:15;;;;;;;;1506:1153;;;;;:::o;2664:393::-;2740:6;2748;2756;2809:2;2797:9;2788:7;2784:23;2780:32;2777:52;;;2825:1;2822;2815:12;2777:52;2864:9;2851:23;2883:30;2907:5;2883:30;:::i;:::-;2932:5;-1:-1:-1;2956:38:1;2990:2;2975:18;;2956:38;:::i;:::-;2946:48;;3013:38;3047:2;3036:9;3032:18;3013:38;:::i;:::-;3003:48;;2664:393;;;;;:::o;3062:186::-;3121:6;3174:2;3162:9;3153:7;3149:23;3145:32;3142:52;;;3190:1;3187;3180:12;3142:52;3213:29;3232:9;3213:29;:::i;3253:184::-;3305:77;3302:1;3295:88;3402:4;3399:1;3392:15;3426:4;3423:1;3416:15;3442:140;3523:1;3516:5;3513:12;3503:46;;3529:18;;:::i;:::-;3558;;3442:140::o;3587:315::-;3652:44;3692:3;3684:5;3678:12;3652:44;:::i;:::-;3742:4;3731:16;;;3725:23;3767:10;3809:21;;;3793:14;;;3786:45;;;;3884:4;3873:16;;;3867:23;3863:32;3847:14;;3840:56;3587:315::o;3907:258::-;4099:2;4084:18;;4111:48;4088:9;4141:6;4111:48;:::i;4170:180::-;4229:6;4282:2;4270:9;4261:7;4257:23;4253:32;4250:52;;;4298:1;4295;4288:12;4250:52;-1:-1:-1;4321:23:1;;4170:180;-1:-1:-1;4170:180:1:o;4355:379::-;-1:-1:-1;;;;;4606:55:1;;4588:74;;4575:3;4560:19;;4671:57;4724:2;4709:18;;4701:6;4671:57;:::i;4921:248::-;4989:6;4997;5050:2;5038:9;5029:7;5025:23;5021:32;5018:52;;;5066:1;5063;5056:12;5018:52;-1:-1:-1;;5089:23:1;;;5159:2;5144:18;;;5131:32;;-1:-1:-1;4921:248:1:o;5174:540::-;5406:3;5391:19;;5440:1;5429:13;;5419:47;;5446:18;;:::i;:::-;5475:25;;;-1:-1:-1;;;;;5597:15:1;;;5592:2;5577:18;;5570:43;5649:15;;;;5644:2;5629:18;;5622:43;5696:2;5681:18;5674:34;5174:540;:::o;5901:250::-;5986:1;5996:113;6010:6;6007:1;6004:13;5996:113;;;6086:11;;;6080:18;6067:11;;;6060:39;6032:2;6025:10;5996:113;;;-1:-1:-1;;6143:1:1;6125:16;;6118:27;5901:250::o;6156:330::-;6198:3;6236:5;6230:12;6263:6;6258:3;6251:19;6279:76;6348:6;6341:4;6336:3;6332:14;6325:4;6318:5;6314:16;6279:76;:::i;:::-;6400:2;6388:15;6405:66;6384:88;6375:98;;;;6475:4;6371:109;;6156:330;-1:-1:-1;;6156:330:1:o;6491:220::-;6640:2;6629:9;6622:21;6603:4;6660:45;6701:2;6690:9;6686:18;6678:6;6660:45;:::i;6716:639::-;6826:6;6834;6887:2;6875:9;6866:7;6862:23;6858:32;6855:52;;;6903:1;6900;6893:12;6855:52;6943:9;6930:23;6972:18;7013:2;7005:6;7002:14;6999:34;;;7029:1;7026;7019:12;6999:34;7067:6;7056:9;7052:22;7042:32;;7112:7;7105:4;7101:2;7097:13;7093:27;7083:55;;7134:1;7131;7124:12;7083:55;7174:2;7161:16;7200:2;7192:6;7189:14;7186:34;;;7216:1;7213;7206:12;7186:34;7269:7;7264:2;7254:6;7251:1;7247:14;7243:2;7239:23;7235:32;7232:45;7229:65;;;7290:1;7287;7280:12;7229:65;7321:2;7313:11;;;;;7343:6;;-1:-1:-1;6716:639:1;;-1:-1:-1;;;;6716:639:1:o;7360:1100::-;7550:4;7579:2;7619;7608:9;7604:18;7649:2;7638:9;7631:21;7672:6;7707;7701:13;7738:6;7730;7723:22;7764:2;7754:12;;7797:2;7786:9;7782:18;7775:25;;7859:2;7849:6;7846:1;7842:14;7831:9;7827:30;7823:39;7897:2;7889:6;7885:15;7918:1;7928:503;7942:6;7939:1;7936:13;7928:503;;;8007:22;;;8031:66;8003:95;7991:108;;8122:13;;8177:9;;8170:17;8163:25;8148:41;;8228:11;;8222:18;8260:15;;;8253:27;;;8303:48;8335:15;;;8222:18;8303:48;:::i;:::-;8409:12;;;;8293:58;-1:-1:-1;;8374:15:1;;;;7964:1;7957:9;7928:503;;;-1:-1:-1;8448:6:1;;7360:1100;-1:-1:-1;;;;;;;;7360:1100:1:o;8465:319::-;8532:6;8540;8593:2;8581:9;8572:7;8568:23;8564:32;8561:52;;;8609:1;8606;8599:12;8561:52;8648:9;8635:23;8667:30;8691:5;8667:30;:::i;:::-;8716:5;-1:-1:-1;8740:38:1;8774:2;8759:18;;8740:38;:::i;:::-;8730:48;;8465:319;;;;;:::o;9217:602::-;9310:6;9318;9326;9334;9342;9395:3;9383:9;9374:7;9370:23;9366:33;9363:53;;;9412:1;9409;9402:12;9363:53;9451:9;9438:23;9470:30;9494:5;9470:30;:::i;:::-;9519:5;-1:-1:-1;9571:2:1;9556:18;;9543:32;;-1:-1:-1;9627:2:1;9612:18;;9599:32;9640;9599;9640;:::i;:::-;9691:7;-1:-1:-1;9717:38:1;9751:2;9736:18;;9717:38;:::i;:::-;9707:48;;9774:39;9808:3;9797:9;9793:19;9774:39;:::i;:::-;9764:49;;9217:602;;;;;;;;:::o;10077:384::-;10143:6;10151;10204:2;10192:9;10183:7;10179:23;10175:32;10172:52;;;10220:1;10217;10210:12;10172:52;10259:9;10246:23;10278:30;10302:5;10278:30;:::i;:::-;10327:5;-1:-1:-1;10384:2:1;10369:18;;10356:32;10397;10356;10397;:::i;:::-;10448:7;10438:17;;;10077:384;;;;;:::o;10466:245::-;10524:6;10577:2;10565:9;10556:7;10552:23;10548:32;10545:52;;;10593:1;10590;10583:12;10545:52;10632:9;10619:23;10651:30;10675:5;10651:30;:::i;10716:681::-;10887:2;10939:21;;;11009:13;;10912:18;;;11031:22;;;10858:4;;10887:2;11110:15;;;;11084:2;11069:18;;;10858:4;11153:218;11167:6;11164:1;11161:13;11153:218;;;11232:13;;-1:-1:-1;;;;;11228:62:1;11216:75;;11346:15;;;;11311:12;;;;11189:1;11182:9;11153:218;;11402:387;11478:6;11486;11494;11547:2;11535:9;11526:7;11522:23;11518:32;11515:52;;;11563:1;11560;11553:12;11515:52;11586:29;11605:9;11586:29;:::i;:::-;11576:39;;11665:2;11654:9;11650:18;11637:32;11678:30;11702:5;11678:30;:::i;:::-;11402:387;;11727:5;;-1:-1:-1;;;11779:2:1;11764:18;;;;11751:32;;11402:387::o;11794:764::-;12062:4;-1:-1:-1;;;;;12172:2:1;12164:6;12160:15;12149:9;12142:34;12224:2;12216:6;12212:15;12207:2;12196:9;12192:18;12185:43;12276:2;12268:6;12264:15;12259:2;12248:9;12244:18;12237:43;12328:2;12320:6;12316:15;12311:2;12300:9;12296:18;12289:43;;12369:3;12363;12352:9;12348:19;12341:32;12396:46;12437:3;12426:9;12422:19;12414:6;12396:46;:::i;:::-;12491:9;12483:6;12479:22;12473:3;12462:9;12458:19;12451:51;12519:33;12545:6;12537;12519:33;:::i;:::-;12511:41;11794:764;-1:-1:-1;;;;;;;;;11794:764:1:o;12563:409::-;12649:6;12657;12665;12673;12726:3;12714:9;12705:7;12701:23;12697:33;12694:53;;;12743:1;12740;12733:12;12694:53;12766:29;12785:9;12766:29;:::i;:::-;12756:39;;12814:38;12848:2;12837:9;12833:18;12814:38;:::i;:::-;12804:48;;12871:38;12905:2;12894:9;12890:18;12871:38;:::i;:::-;12861:48;;12928:38;12962:2;12951:9;12947:18;12928:38;:::i;:::-;12918:48;;12563:409;;;;;;;:::o;13338:184::-;13390:77;13387:1;13380:88;13487:4;13484:1;13477:15;13511:4;13508:1;13501:15;13527:125;13592:9;;;13613:10;;;13610:36;;;13626:18;;:::i;13657:128::-;13724:9;;;13745:11;;;13742:37;;;13759:18;;:::i;13790:184::-;13842:77;13839:1;13832:88;13939:4;13936:1;13929:15;13963:4;13960:1;13953:15;13979:195;14018:3;14049:66;14042:5;14039:77;14036:103;;14119:18;;:::i;:::-;-1:-1:-1;14166:1:1;14155:13;;13979:195::o;14179:380::-;14269:4;14327:11;14314:25;14417:66;14406:8;14390:14;14386:29;14382:102;14362:18;14358:127;14348:155;;14499:1;14496;14489:12;14348:155;14520:33;;;;;14179:380;-1:-1:-1;;14179:380:1:o;14564:580::-;14641:4;14647:6;14707:11;14694:25;14797:66;14786:8;14770:14;14766:29;14762:102;14742:18;14738:127;14728:155;;14879:1;14876;14869:12;14728:155;14906:33;;14958:20;;;-1:-1:-1;15001:18:1;14990:30;;14987:50;;;15033:1;15030;15023:12;14987:50;15066:4;15054:17;;-1:-1:-1;15097:14:1;15093:27;;;15083:38;;15080:58;;;15134:1;15131;15124:12;15080:58;14564:580;;;;;:::o;15149:271::-;15332:6;15324;15319:3;15306:33;15288:3;15358:16;;15383:13;;;15358:16;15149:271;-1:-1:-1;15149:271:1:o;15425:169::-;15503:13;;15556:12;15545:24;;15535:35;;15525:63;;15584:1;15581;15574:12;15599:415;15684:6;15692;15700;15753:2;15741:9;15732:7;15728:23;15724:32;15721:52;;;15769:1;15766;15759:12;15721:52;15792:39;15821:9;15792:39;:::i;:::-;15782:49;;15850:48;15894:2;15883:9;15879:18;15850:48;:::i;:::-;15840:58;;15941:2;15930:9;15926:18;15920:25;15954:30;15978:5;15954:30;:::i;:::-;16003:5;15993:15;;;15599:415;;;;;:::o;16688:403::-;16850:4;16879:10;16928:2;16920:6;16916:15;16905:9;16898:34;16980:2;16972:6;16968:15;16963:2;16952:9;16948:18;16941:43;;17020:2;17015;17004:9;17000:18;16993:30;17040:45;17081:2;17070:9;17066:18;17058:6;17040:45;:::i;17096:310::-;17174:6;17182;17235:2;17223:9;17214:7;17210:23;17206:32;17203:52;;;17251:1;17248;17241:12;17203:52;17283:9;17277:16;17302:30;17326:5;17302:30;:::i;:::-;17396:2;17381:18;;;;17375:25;17351:5;;17375:25;;-1:-1:-1;;;17096:310:1:o;17411:568::-;17464:5;17517:3;17510:4;17502:6;17498:17;17494:27;17484:55;;17535:1;17532;17525:12;17484:55;17564:6;17558:13;17590:18;17586:2;17583:26;17580:52;;;17612:18;;:::i;:::-;17656:114;17764:4;17695:66;17688:4;17684:2;17680:13;17676:86;17672:97;17656:114;:::i;:::-;17795:2;17786:7;17779:19;17841:3;17834:4;17829:2;17821:6;17817:15;17813:26;17810:35;17807:55;;;17858:1;17855;17848:12;17807:55;17871:77;17945:2;17938:4;17929:7;17925:18;17918:4;17910:6;17906:17;17871:77;:::i;17984:558::-;18081:6;18089;18142:2;18130:9;18121:7;18117:23;18113:32;18110:52;;;18158:1;18155;18148:12;18110:52;18191:9;18185:16;18220:18;18261:2;18253:6;18250:14;18247:34;;;18277:1;18274;18267:12;18247:34;18300:60;18352:7;18343:6;18332:9;18328:22;18300:60;:::i;:::-;18290:70;;18406:2;18395:9;18391:18;18385:25;18369:41;;18435:2;18425:8;18422:16;18419:36;;;18451:1;18448;18441:12;18419:36;;18474:62;18528:7;18517:8;18506:9;18502:24;18474:62;:::i;:::-;18464:72;;;17984:558;;;;;:::o;19153:551::-;19330:3;19369:1;19361:6;19358:13;19348:47;;19375:18;;:::i;:::-;-1:-1:-1;19420:3:1;19416:16;;;;19404:29;;19470:3;19466:16;;;;19484:66;19462:89;19458:1;19449:11;;19442:110;19589:2;19585:15;19602:66;19581:88;19577:1;19568:11;;19561:109;19695:2;19686:12;;19153:551::o;19709:208::-;19855:2;19840:18;;19867:44;19844:9;19893:6;19867:44;:::i;21045:189::-;21113:24;21170:10;;;21158;;;21154:27;;21193:12;;;21190:38;;;21208:18;;:::i;:::-;21190:38;21045:189;;;;:::o","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AgentCantBeAdded","type":"error"},{"inputs":[],"name":"AgentNotActive","type":"error"},{"inputs":[],"name":"AgentNotActiveNorUnstaking","type":"error"},{"inputs":[],"name":"AgentNotFraudulent","type":"error"},{"inputs":[],"name":"AgentNotUnstaking","type":"error"},{"inputs":[],"name":"CallerNotDestination","type":"error"},{"inputs":[],"name":"CallerNotInbox","type":"error"},{"inputs":[],"name":"CallerNotSummit","type":"error"},{"inputs":[],"name":"DisputeAlreadyResolved","type":"error"},{"inputs":[],"name":"DisputeNotOpened","type":"error"},{"inputs":[],"name":"DisputeNotStuck","type":"error"},{"inputs":[],"name":"GuardInDispute","type":"error"},{"inputs":[],"name":"IncorrectAgentDomain","type":"error"},{"inputs":[],"name":"IncorrectVersionLength","type":"error"},{"inputs":[],"name":"IndexOutOfRange","type":"error"},{"inputs":[],"name":"LeafNotProven","type":"error"},{"inputs":[],"name":"MerkleTreeFull","type":"error"},{"inputs":[],"name":"MustBeSynapseDomain","type":"error"},{"inputs":[],"name":"NotaryInDispute","type":"error"},{"inputs":[],"name":"SlashAgentOptimisticPeriod","type":"error"},{"inputs":[],"name":"SynapseDomainForbidden","type":"error"},{"inputs":[],"name":"TreeHeightTooLow","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"guardIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"DisputeOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"slashedIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"rivalIndex","type":"uint32"},{"indexed":false,"internalType":"address","name":"fraudProver","type":"address"}],"name":"DisputeResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"addAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentLeaf","outputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeSlashing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"destination","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"disputeStatus","outputs":[{"internalType":"enum DisputeFlag","name":"flag","type":"uint8"},{"internalType":"address","name":"rival","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"uint256","name":"disputePtr","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"name":"getActiveAgents","outputs":[{"internalType":"address[]","name":"agents","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDispute","outputs":[{"internalType":"address","name":"guard","type":"address"},{"internalType":"address","name":"notary","type":"address"},{"internalType":"address","name":"slashedAgent","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"bytes","name":"reportPayload","type":"bytes"},{"internalType":"bytes","name":"reportSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDisputesAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"indexFrom","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"getProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"origin_","type":"address"},{"internalType":"address","name":"destination_","type":"address"},{"internalType":"address","name":"inbox_","type":"address"},{"internalType":"address","name":"summit_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"initiateUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"leafsAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct MultiCallable.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct MultiCallable.Result[]","name":"callResults","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"guardIndex","type":"uint32"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"openDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"msgOrigin","type":"uint32"},{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"remoteSlashAgent","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"slashedAgent","type":"address"}],"name":"resolveStuckDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"summit","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"origin_","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTips","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"events":{"DisputeOpened(uint256,uint32,uint32)":{"notice":"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`."},"DisputeResolved(uint256,uint32,uint32,address)":{"notice":"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute."},"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{"addAgent(uint32,address,bytes32[])":{"notice":"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting)."},"agentLeaf(address)":{"notice":"Returns a leaf representing the current status of agent in the Agent Merkle Tree."},"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"allLeafs()":{"notice":"Returns a full list of leafs from the Agent Merkle Tree."},"completeSlashing(uint32,address,bytes32[])":{"notice":"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root."},"completeUnstaking(uint32,address,bytes32[])":{"notice":"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains."},"disputeStatus(address)":{"notice":"Returns the current Dispute status of a given agent. See Structures.sol for details."},"getActiveAgents(uint32)":{"notice":"Returns all active agents for a given domain."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"getDispute(uint256)":{"notice":"Returns information about the dispute with the given index."},"getDisputesAmount()":{"notice":"Returns the number of opened Disputes."},"getLeafs(uint256,uint256)":{"notice":"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount)."},"getProof(address)":{"notice":"Returns a proof of inclusion of the agent in the Agent Merkle Tree."},"initiateUnstaking(uint32,address,bytes32[])":{"notice":"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains."},"leafsAmount()":{"notice":"Returns a total amount of leafs representing known agents."},"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"multicall((bool,bytes)[])":{"notice":"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."},"openDispute(uint32,uint32)":{"notice":"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute."},"remoteSlashAgent(uint32,uint256,uint32,address,address)":{"notice":"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain."},"resolveStuckDispute(uint32,address)":{"notice":"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."},"slashAgent(uint32,address,address)":{"notice":"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain."},"withdrawTips(address,uint32,uint256)":{"notice":"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain."}},"notice":"BondingManager keeps track of all existing agents on the Synapse Chain. It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains, so that the agents could \"register\" themselves by proving their current status against this root. `BondingManager` is responsible for the following: - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and   the agent slashing is still possible, though with no reward/penalty for the reporter/reported. - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root. - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain. - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud   is proven on the remote chain.","version":1},"developerDoc":{"kind":"dev","methods":{"addAgent(uint32,address,bytes32[])":{"details":"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent will be active","proof":"Merkle proof of the Inactive/Resting status for the agent"}},"agentLeaf(address)":{"details":"Will return an empty leaf, if agent is not added to the tree yet.","params":{"agent":"Agent address"},"returns":{"leaf":"    Agent leaf in the Agent Merkle Tree"}},"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"status":"Status for the given agent: (flag, domain, index)."}},"allLeafs()":{"details":"This might consume a lot of gas, do not use this on-chain."},"completeSlashing(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the active/unstaking status for the agent"}},"completeUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the unstaking status for the agent"}},"disputeStatus(address)":{"details":"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.","params":{"agent":"Agent address"},"returns":{"disputePtr":"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.","flag":"        Flag describing the current Dispute status for the agent: None/Pending/Slashed","fraudProver":" Address who provided fraud proof to resolve the Dispute","rival":"       Address of the rival agent in the Dispute"}},"getActiveAgents(uint32)":{"params":{"agents":"List of active agents for the domain","domain":"Domain to get agents from (ZERO for Guards)"}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"getDispute(uint256)":{"details":"Will revert if dispute with given index hasn't been opened yet.","params":{"index":"Dispute index"},"returns":{"fraudProver":"     Address who provided fraud proof to resolve the Dispute","guard":"           Address of the Guard in the Dispute","notary":"          Address of the Notary in the Dispute","reportPayload":"   Raw payload with report data that led to the Dispute","reportSignature":" Guard signature for the report payload","slashedAgent":"    Address of the Agent who was slashed when Dispute was resolved"}},"getDisputesAmount()":{"details":"This includes the Disputes that have been resolved already."},"getLeafs(uint256,uint256)":{"details":"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount"},"getProof(address)":{"details":"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.","params":{"agent":"Agent address"},"returns":{"proof":"   Merkle proof for the agent"}},"initiateUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","proof":"Merkle proof of the Active status for the agent"}},"leafsAmount()":{"details":"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry."},"openDispute(uint32,uint32)":{"params":{"guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"owner()":{"details":"Returns the address of the current owner."},"remoteSlashAgent(uint32,uint256,uint32,address,address)":{"details":"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \"remote\" function was called when executing a manager message.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof to remote AgentManager"},"returns":{"magicValue":"  Selector of this function"}},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"resolveStuckDispute(uint32,address)":{"params":{"slashedAgent":"Agent that is being slashed"}},"slashAgent(uint32,address,address)":{"params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","prover":"Address that initially provided fraud proof"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"withdrawTips(address,uint32,uint256)":{"details":"Could only be called by the Summit contract.","params":{"amount":"Tips value to withdraw","origin":"Domain where tips need to be withdrawn","recipient":"Address to withdraw tips to"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AgentCantBeAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotActiveNorUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotFraudulent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotInbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotSummit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotStuck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeafNotProven\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeSynapseDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotaryInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlashAgentOptimisticPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseDomainForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TreeHeightTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getActiveAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"summit_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initiateUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"msgOrigin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"remoteSlashAgent\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"details\":\"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent will be active\",\"proof\":\"Merkle proof of the Inactive/Resting status for the agent\"}},\"agentLeaf(address)\":{\"details\":\"Will return an empty leaf, if agent is not added to the tree yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"leaf\":\"    Agent leaf in the Agent Merkle Tree\"}},\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"allLeafs()\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the active/unstaking status for the agent\"}},\"completeUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the unstaking status for the agent\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getActiveAgents(uint32)\":{\"params\":{\"agents\":\"List of active agents for the domain\",\"domain\":\"Domain to get agents from (ZERO for Guards)\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"getLeafs(uint256,uint256)\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\"},\"getProof(address)\":{\"details\":\"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"proof\":\"   Merkle proof for the agent\"}},\"initiateUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"proof\":\"Merkle proof of the Active status for the agent\"}},\"leafsAmount()\":{\"details\":\"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"details\":\"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \\\"remote\\\" function was called when executing a manager message.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof to remote AgentManager\"},\"returns\":{\"magicValue\":\"  Selector of this function\"}},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawTips(address,uint32,uint256)\":{\"details\":\"Could only be called by the Summit contract.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"origin\":\"Domain where tips need to be withdrawn\",\"recipient\":\"Address to withdraw tips to\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"notice\":\"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting).\"},\"agentLeaf(address)\":{\"notice\":\"Returns a leaf representing the current status of agent in the Agent Merkle Tree.\"},\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"allLeafs()\":{\"notice\":\"Returns a full list of leafs from the Agent Merkle Tree.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"notice\":\"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root.\"},\"completeUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getActiveAgents(uint32)\":{\"notice\":\"Returns all active agents for a given domain.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"getLeafs(uint256,uint256)\":{\"notice\":\"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount).\"},\"getProof(address)\":{\"notice\":\"Returns a proof of inclusion of the agent in the Agent Merkle Tree.\"},\"initiateUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains.\"},\"leafsAmount()\":{\"notice\":\"Returns a total amount of leafs representing known agents.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"notice\":\"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain.\"},\"withdrawTips(address,uint32,uint256)\":{\"notice\":\"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain.\"}},\"notice\":\"BondingManager keeps track of all existing agents on the Synapse Chain. It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains, so that the agents could \\\"register\\\" themselves by proving their current status against this root. `BondingManager` is responsible for the following: - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and   the agent slashing is still possible, though with no reward/penalty for the reporter/reported. - Marking agents as \\\"ready to be slashed\\\" once their fraud is proven on the local or remote chain. Anyone could   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root. - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain. - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud   is proven on the remote chain.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"BondingManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"addAgent(uint32,address,bytes32[])":"237a85a5","agentLeaf(address)":"c99dcb9e","agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","allLeafs()":"12db2ef6","completeSlashing(uint32,address,bytes32[])":"fbc5265e","completeUnstaking(uint32,address,bytes32[])":"4c3e1c1f","destination()":"b269681d","disputeStatus(address)":"3463d1b1","getActiveAgents(uint32)":"c1c0f4f6","getAgent(uint256)":"2de5aaf7","getDispute(uint256)":"e3a96cbd","getDisputesAmount()":"3aaeccc6","getLeafs(uint256,uint256)":"33d1b2e8","getProof(address)":"3eea79d1","inbox()":"fb0e722b","initialize(address,address,address,address)":"f8c8765e","initiateUnstaking(uint32,address,bytes32[])":"130c5673","leafsAmount()":"33c3a8f3","localDomain()":"8d3638f4","multicall((bool,bytes)[])":"60fc8466","openDispute(uint32,uint32)":"a2155c34","origin()":"938b5f32","owner()":"8da5cb5b","remoteSlashAgent(uint32,uint256,uint32,address,address)":"9d228a51","renounceOwnership()":"715018a6","resolveStuckDispute(uint32,address)":"89791e17","slashAgent(uint32,address,address)":"2853a0e6","summit()":"9fbcb9cb","transferOwnership(address)":"f2fde38b","version()":"54fd4d50","withdrawTips(address,uint32,uint256)":"cc875501"}},"solidity/BondingManagerHarness.t.sol:BondingManagerHarness":{"code":"0x60e06040523480156200001157600080fd5b5060405162003ee938038062003ee983398101604081905262000034916200009f565b60408051808201909152600580825264302e302e3360d81b6020830152608052819081816200006381620000ce565b60a0525063ffffffff90811660c0528216600a1490506200009757604051632b3a807f60e01b815260040160405180910390fd5b5050620000f6565b600060208284031215620000b257600080fd5b815163ffffffff81168114620000c757600080fd5b9392505050565b80516020808301519190811015620000f0576000198160200360031b1b821691505b50919050565b60805160a05160c051613dbc6200012d600039600081816104a30152611b3f01526000610420015260006103fd0152613dbc6000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c8063715018a611610160578063b269681d116100d8578063e3a96cbd1161008c578063f8c8765e11610071578063f8c8765e14610633578063fb0e722b14610646578063fbc5265e1461065957600080fd5b8063e3a96cbd146105fb578063f2fde38b1461062057600080fd5b8063c99dcb9e116100bd578063c99dcb9e146105c2578063c9f1a03f146105d5578063cc875501146105e857600080fd5b8063b269681d1461058f578063c1c0f4f6146105a257600080fd5b8063938b5f321161012f5780639fbcb9cb116101145780639fbcb9cb14610556578063a149352c14610569578063a2155c341461057c57600080fd5b8063938b5f32146104ff5780639d228a511461051257600080fd5b8063715018a61461048357806389791e171461048b5780638d3638f41461049e5780638da5cb5b146104da57600080fd5b806333d1b2e8116101f35780633eea79d1116101c257806354fd4d50116101a757806354fd4d50146103f257806360fc84661461045057806369978b0d1461047057600080fd5b80633eea79d1146103cc5780634c3e1c1f146103df57600080fd5b806333d1b2e8146103865780633463d1b11461039957806336cba43c146103bc5780633aaeccc6146103c457600080fd5b8063237a85a51161024a57806328f3fac91161022f57806328f3fac91461033d5780632de5aaf71461035d57806333c3a8f31461037e57600080fd5b8063237a85a5146103175780632853a0e61461032a57600080fd5b80630e6bfcd51461027c578063127a2c9d146102cc57806312db2ef6146102ed578063130c567314610302575b600080fd5b61028f61028a366004613239565b61066c565b604080517fffffffff0000000000000000000000000000000000000000000000000000000090931683526020830191909152015b60405180910390f35b6102df6102da3660046132bd565b6106e1565b6040519081526020016102c3565b6102f561077d565b6040516102c391906132f1565b6103156103103660046133c5565b610794565b005b6103156103253660046133c5565b6108b1565b610315610338366004613490565b610b39565b61035061034b3660046134d5565b610b8d565b6040516102c3919061355f565b61037061036b36600461356d565b610c30565b6040516102c3929190613586565b60cc546102df565b6102f56103943660046135a3565b610c77565b6103ac6103a73660046134d5565b610d6b565b6040516102c394939291906135c5565b60cd546102df565b609b546102df565b6102f56103da3660046134d5565b610edf565b6103156103ed3660046133c5565b610f3e565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000602082015290516102c3919061366a565b61046361045e36600461367d565b61102a565b6040516102c391906136f2565b61031561047e366004613490565b610b7d565b610315611195565b610315610499366004613786565b6111f1565b6104c57f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102c3565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016102c3565b6097546104e7906001600160a01b031681565b6105256105203660046137bb565b611471565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016102c3565b60c9546104e7906001600160a01b031681565b61052561057736600461381d565b61152b565b61031561058a366004613852565b61159b565b6098546104e7906001600160a01b031681565b6105b56105b036600461388b565b611977565b6040516102c391906138a8565b6102df6105d03660046134d5565b611aa4565b6103156105e3366004613239565b611ab5565b6103156105f63660046138e9565b611af9565b61060e61060936600461356d565b611cf2565b6040516102c396959493929190613917565b61031561062e3660046134d5565b611eca565b610315610641366004613972565b611fac565b6099546104e7906001600160a01b031681565b6103156106673660046133c5565b6120f4565b60985460009081906001600160a01b031633146106b5576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f0e6bfcd5000000000000000000000000000000000000000000000000000000009491935090915050565b6098546000906001600160a01b03163314610728576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81610751577f474d00000000000000000000000000000000000000000000000000000000000091505b507f127a2c9d0000000000000000000000000000000000000000000000000000000081185b9392505050565b606061078f600060cc80549050610c77565b905090565b6033546001600160a01b031633146107f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60006107fe83610b8d565b905061080981612182565b8363ffffffff16816020015163ffffffff1614610852576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610860600186866121ce565b90506108aa8184604051806060016040528060026005811115610885576108856134f0565b81526020018963ffffffff168152602001866040015163ffffffff1681525087612204565b5050505050565b6033546001600160a01b0316331461090b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff663ffffffff84160161096a576040517ff2b2faa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061097583612397565b9050600080808351600581111561098e5761098e6134f0565b03610a6b5760cc5463ffffffff116109d2576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc805460018082019092557f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe810180546001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925563ffffffff8a16600090815260cb60209081526040822080549687018155825290209093018054909316179091559150610aed565b600383516005811115610a8057610a806134f0565b148015610a9c57508563ffffffff16836020015163ffffffff16145b15610abb5782604001519150610ab4600387876121ce565b9050610aed565b6040517f86511bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b318185604051806060016040528060016005811115610b1057610b106134f0565b81526020018a63ffffffff1681526020018663ffffffff1681525088612204565b505050505050565b6099546001600160a01b03163314610b7d576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b8883838361242c565b505050565b6040805160608101825260008082526020820181905291810191909152610bb382612397565b6001600160a01b038316600090815260ca602090815260408083205465010000000000900463ffffffff168352609a90915290205490915060029060ff1681811115610c0157610c016134f0565b148015610c215750600581516005811115610c1e57610c1e6134f0565b14155b15610c2b57600481525b919050565b60408051606081018252600080825260208201819052918101829052610c55836124e7565b91506001600160a01b03821615610c7257610c6f82610b8d565b90505b915091565b60cc54606090808410610cb6576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610cc184866139f5565b1115610cd457610cd18482613a08565b92505b8267ffffffffffffffff811115610ced57610ced613347565b604051908082528060200260200182016040528015610d16578160200160208202803683370190505b50915060005b83811015610d6357610d36610d3182876139f5565b612522565b838281518110610d4857610d48613a1b565b6020908102919091010152610d5c81613a4a565b9050610d1c565b505092915050565b6000806000806000610da2866001600160a01b0316600090815260ca602052604090205463ffffffff650100000000009091041690565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff166002811115610dda57610dda6134f0565b6002811115610deb57610deb6134f0565b8152905461010081046affffffffffffffffffffff9081166020808501919091526c010000000000000000000000009092046001600160a01b03166040938401528351928401519184015192995090965016935090508215610ed6576000609b610e56600186613a08565b81548110610e6657610e66613a1b565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150610ed2908414610ec1578151610ec7565b81602001515b63ffffffff166124e7565b9550505b50509193509193565b60606000610eeb61077d565b90506000610ef884612397565b905060008082516005811115610f1057610f106134f0565b14610f2557816040015163ffffffff16610f29565b60cc545b9050610f35838261255a565b95945050505050565b6033546001600160a01b03163314610f985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b6000610fa383610b8d565b9050610fae816126c9565b8363ffffffff16816020015163ffffffff1614610ff7576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611005600286866121ce565b90506108aa8184604051806060016040528060036005811115610885576108856134f0565b6060818067ffffffffffffffff81111561104657611046613347565b60405190808252806020026020018201604052801561108c57816020015b6040805180820190915260008152606060208201528152602001906001900390816110645790505b5091503660005b8281101561118c578585828181106110ad576110ad613a1b565b90506020028101906110bf9190613a82565b915060008482815181106110d5576110d5613a1b565b60200260200101519050306001600160a01b03168380602001906110f99190613ac0565b604051611107929190613b2c565b600060405180830381855af49150503d8060008114611142576040519150601f19603f3d011682016040523d82523d6000602084013e611147565b606091505b5060208301521515808252833517611183577f4d6a23280000000000000000000000000000000000000000000000000000000060005260046000fd5b50600101611093565b50505092915050565b6033546001600160a01b031633146111ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b565b6033546001600160a01b0316331461124b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b6001600160a01b038116600090815260ca602090815260408083205465010000000000900463ffffffff168352609a9091528082208151606081019092528054829060ff1660028111156112a1576112a16134f0565b60028111156112b2576112b26134f0565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b03166040909101529050600081516002811115611303576113036134f0565b0361133a576040517fb3a71fa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028151600281111561134f5761134f6134f0565b03611386576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609854604080517f4098915200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa1580156113e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140d9190613b51565b505090508064ffffffffff1661384061142691906139f5565b42101561145f576040517f6fdc56c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61146b8484600061242c565b50505050565b6098546000906001600160a01b031633146114b8576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620151808510156114f5576040517fa8928dd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61150084848461242c565b507f9d228a510000000000000000000000000000000000000000000000000000000095945050505050565b6098546000906001600160a01b03163314611572576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fa149352c000000000000000000000000000000000000000000000000000000009392505050565b6099546001600160a01b031633146115df576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff166002811115611609576116096134f0565b14611640576040517fd9d49b4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff16600281111561166a5761166a6134f0565b146116a1576040517f6893014300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc349909701805494519251861668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff938716640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090961698909616979097179390931716929092179093559154835191820190935290819081526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff87168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156117ee576117ee6134f0565b0217905550602082015181546040938401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909316610100029290921660ff9091161717905580516060810190915280600181526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff86168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156118bf576118bf6134f0565b0217905550602082015181546040909301516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe0530611948600183613a08565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a1610b888383612715565b63ffffffff8116600090815260cb60205260409020546060908067ffffffffffffffff8111156119a9576119a9613347565b6040519080825280602002602001820160405280156119d2578160200160208202803683370190505b5091506000805b82811015611a915763ffffffff8516600090815260cb60205260408120805483908110611a0857611a08613a1b565b6000918252602090912001546001600160a01b031690506001611a2a82610b8d565b516005811115611a3c57611a3c6134f0565b03611a8057808584611a4d81613a4a565b955081518110611a5f57611a5f613a1b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50611a8a81613a4a565b90506119d9565b50818114611a9d578083525b5050919050565b6000611aaf8261281a565b92915050565b6098546001600160a01b03163314610b88576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c9546001600160a01b03163314611b3d576040517fc9c49ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff1603611bf4576097546040517f4e04e7a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820184905290911690634e04e7a790604401600060405180830381600087803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b50505050505050565b609754604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1fa071380000000000000000000000000000000000000000000000000000000017905291517fa1c702a7000000000000000000000000000000000000000000000000000000008152919092169163a1c702a791611cb0918691620151809190600401613b98565b60408051808303816000875af1158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190613bc1565b600080600080606080609b805490508710611d39576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609b8881548110611d4e57611d4e613a1b565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150611da1906124e7565b9650611db6816020015163ffffffff166124e7565b604082015190965063ffffffff1615611e1357611ddc816040015163ffffffff166124e7565b60408281015163ffffffff166000908152609a60205220549095506c0100000000000000000000000090046001600160a01b031693505b6099546040517fc495912b000000000000000000000000000000000000000000000000000000008152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa158015611e75573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611ebb9190810190613c71565b97999698509496939592505050565b6033546001600160a01b03163314611f245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b6001600160a01b038116611fa05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ea565b611fa98161285b565b50565b6000611fb860016128c5565b90508015611fed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611ff8858585612a17565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416179055612033612aeb565b60cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905580156108aa57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60006120ff83610b8d565b905061210a81612b70565b8363ffffffff16816020015163ffffffff1614612153576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061215e8461281a565b90506108aa81846040518060600160405280600580811115610885576108856134f0565b600181516005811115612197576121976134f0565b14611fa9576040517f486fcee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008383836040516020016121e593929190613cd5565b6040516020818303038152906040528051906020012090509392505050565b600061221983600001518460200151846121ce565b90506000612241846040015163ffffffff1687878560cd612bbc90949392919063ffffffff16565b6001600160a01b038416600090815260ca6020526040902085518154929350869282907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600581111561229a5761229a6134f0565b021790555060208281015182546040948501517fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911661010063ffffffff938416027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff1617650100000000009183169190910217909255860151865192516001600160a01b0387169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e9161235491613d4d565b60405180910390a36040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a1505050505050565b60408051606081018252600080825260208201819052918101919091526001600160a01b038216600090815260ca6020526040908190208151606081019092528054829060ff1660058111156123ef576123ef6134f0565b6005811115612400576124006134f0565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b600061243783612397565b905061244281612c20565b8363ffffffff16816020015163ffffffff161461248b576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e60046040516124cc9190613d4d565b60405180910390a36124e2816040015183612c8d565b61146b565b60cc54600090821015610c2b5760cc828154811061250757612507613a1b565b6000918252602090912001546001600160a01b031692915050565b60008115610c2b57611aaf60cc838154811061254057612540613a1b565b6000918252602090912001546001600160a01b031661281a565b6060600061258084518410612579576125748460016139f5565b612f9e565b8451612f9e565b90508067ffffffffffffffff81111561259b5761259b613347565b6040519080825280602002602001820160405280156125c4578160200160208202803683370190505b50845190925060005b8281101561118c578185600118106125e6576000612604565b8585600118815181106125fb576125fb613a1b565b60200260200101515b84828151811061261657612616613a1b565b60200260200101818152505060005b828110156126b6576000816001019050600088838151811061264957612649613a1b565b60200260200101519050600085831061266357600061267e565b89838151811061267557612675613a1b565b60200260200101515b905061268a8282612fb7565b8a600186901c815181106126a0576126a0613a1b565b6020908102919091010152505050600201612625565b50600194851c94918201821c91016125cd565b6002815160058111156126de576126de6134f0565b14611fa9576040517fe637af9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6098546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c3490604401600060405180830381600087803b15801561278157600080fd5b505af1158015612795573d6000803e3d6000fd5b505060c9546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b03909116925063a2155c3491506044015b600060405180830381600087803b15801561280657600080fd5b505af1158015610b31573d6000803e3d6000fd5b60008061282683612397565b905060008151600581111561283d5761283d6134f0565b146128555761077681600001518260200151856121ce565b50919050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615612962578160ff1660011480156128e85750303b155b61295a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107ea565b506000919050565b60005460ff8084169116106129df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107ea565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b600054610100900460ff16612a945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ea565b609780546001600160a01b039485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff16612b685760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ea565b6111ef612fff565b600481516005811115612b8557612b856134f0565b14611fa9576040517f0a06903700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8454600090612bce8686866020613085565b14612c05576040517f18b00be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c128583856020613085565b958690555093949350505050565b600181516005811115612c3557612c356134f0565b14158015612c565750600281516005811115612c5357612c536134f0565b14155b15611fa9576040517fec3d0d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff166002811115612cc457612cc46134f0565b6002811115612cd557612cd56134f0565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b03166040909101529050600281516002811115612d2657612d266134f0565b03612d5d576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a6020522082518154849383917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016906001908490811115612dc657612dc66134f0565b021790555060208281015182546040909401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff928316610100021660ff90951694909417939093179091558201516000911615612f9457600060018360200151612e419190613d5b565b6affffffffffffffffffffff1690506000609b8281548110612e6557612e65613a1b565b600091825260209182902060408051606081018252919092015463ffffffff8082168352640100000000820481169483019490945268010000000000000000900490921690820152609b8054919250879184908110612ec657612ec6613a1b565b60009182526020918290200180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff94851602179055820151878216911614612f23578060200151612f26565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b61146b848261312d565b600060015b82811015612855576001918201911b612fa3565b600082158015612fc5575081155b15612fd257506000611aaf565b50604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff1661307c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ea565b6111ef3361285b565b8151600090828111156130c4576040517fc5360feb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84915060005b81811015613101576130f7838683815181106130e8576130e8613a1b565b60200260200101518984613208565b92506001016130ca565b50805b83811015613123576131198360008984613208565b9250600101613104565b5050949350505050565b6098546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401600060405180830381600087803b15801561319957600080fd5b505af11580156131ad573d6000803e3d6000fd5b505060c9546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b039091169250636116921891506044016127ec565b6000600183831c168103613227576132208585612fb7565b9050613231565b6132208486612fb7565b949350505050565b60008060006060848603121561324e57600080fd5b833561ffff8116811461326057600080fd5b925060208401357fffffffff000000000000000000000000000000000000000000000000000000008116811461329557600080fd5b929592945050506040919091013590565b80356001600160a01b0381168114610c2b57600080fd5b6000806000606084860312156132d257600080fd5b6132db846132a6565b9250602084013560ff8116811461329557600080fd5b6020808252825182820181905260009190848201906040850190845b818110156133295783518352928401929184019160010161330d565b50909695505050505050565b63ffffffff81168114611fa957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156133bd576133bd613347565b604052919050565b6000806000606084860312156133da57600080fd5b83356133e581613335565b925060206133f48582016132a6565b9250604085013567ffffffffffffffff8082111561341157600080fd5b818701915087601f83011261342557600080fd5b81358181111561343757613437613347565b8060051b9150613448848301613376565b818152918301840191848101908a84111561346257600080fd5b938501935b8385101561348057843582529385019390850190613467565b8096505050505050509250925092565b6000806000606084860312156134a557600080fd5b83356134b081613335565b92506134be602085016132a6565b91506134cc604085016132a6565b90509250925092565b6000602082840312156134e757600080fd5b610776826132a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6006811061352f5761352f6134f0565b9052565b61353e82825161351f565b60208181015163ffffffff9081169184019190915260409182015116910152565b60608101611aaf8284613533565b60006020828403121561357f57600080fd5b5035919050565b6001600160a01b0383168152608081016107766020830184613533565b600080604083850312156135b657600080fd5b50508035926020909101359150565b60808101600386106135d9576135d96134f0565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b838110156136175781810151838201526020016135ff565b50506000910152565b600081518084526136388160208601602086016135fc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107766020830184613620565b6000806020838503121561369057600080fd5b823567ffffffffffffffff808211156136a857600080fd5b818501915085601f8301126136bc57600080fd5b8135818111156136cb57600080fd5b8660208260051b85010111156136e057600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613778578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180511515845287015187840187905261376587850182613620565b9588019593505090860190600101613719565b509098975050505050505050565b6000806040838503121561379957600080fd5b82356137a481613335565b91506137b2602084016132a6565b90509250929050565b600080600080600060a086880312156137d357600080fd5b85356137de81613335565b94506020860135935060408601356137f581613335565b9250613803606087016132a6565b9150613811608087016132a6565b90509295509295909350565b60008060006060848603121561383257600080fd5b833561383d81613335565b95602085013595506040909401359392505050565b6000806040838503121561386557600080fd5b823561387081613335565b9150602083013561388081613335565b809150509250929050565b60006020828403121561389d57600080fd5b813561077681613335565b6020808252825182820181905260009190848201906040850190845b818110156133295783516001600160a01b0316835292840192918401916001016138c4565b6000806000606084860312156138fe57600080fd5b613907846132a6565b9250602084013561329581613335565b60006001600160a01b0380891683528088166020840152808716604084015280861660608401525060c0608083015261395360c0830185613620565b82810360a08401526139658185613620565b9998505050505050505050565b6000806000806080858703121561398857600080fd5b613991856132a6565b935061399f602086016132a6565b92506139ad604086016132a6565b91506139bb606086016132a6565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115611aaf57611aaf6139c6565b81810381811115611aaf57611aaf6139c6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a7b57613a7b6139c6565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613ab657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613af557600080fd5b83018035915067ffffffffffffffff821115613b1057600080fd5b602001915036819003821315613b2557600080fd5b9250929050565b8183823760009101908152919050565b805164ffffffffff81168114610c2b57600080fd5b600080600060608486031215613b6657600080fd5b613b6f84613b3c565b9250613b7d60208501613b3c565b91506040840151613b8d81613335565b809150509250925092565b600063ffffffff808616835280851660208401525060606040830152610f356060830184613620565b60008060408385031215613bd457600080fd5b8251613bdf81613335565b6020939093015192949293505050565b600082601f830112613c0057600080fd5b815167ffffffffffffffff811115613c1a57613c1a613347565b613c4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613376565b818152846020838601011115613c6057600080fd5b6132318260208301602087016135fc565b60008060408385031215613c8457600080fd5b825167ffffffffffffffff80821115613c9c57600080fd5b613ca886838701613bef565b93506020850151915080821115613cbe57600080fd5b50613ccb85828601613bef565b9150509250929050565b600060068510613ce757613ce76134f0565b5060f89390931b835260e09190911b7fffffffff0000000000000000000000000000000000000000000000000000000016600183015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600582015260190190565b60208101611aaf828461351f565b6affffffffffffffffffffff828116828216039080821115613d7f57613d7f6139c6565b509291505056fea26469706673582212200c09e05890eb17a97f8b585c9bc6ef377477291e2f36d1c4eb870fb3bd3dce4964736f6c63430008110033","runtime-code":"0x608060405234801561001057600080fd5b50600436106102775760003560e01c8063715018a611610160578063b269681d116100d8578063e3a96cbd1161008c578063f8c8765e11610071578063f8c8765e14610633578063fb0e722b14610646578063fbc5265e1461065957600080fd5b8063e3a96cbd146105fb578063f2fde38b1461062057600080fd5b8063c99dcb9e116100bd578063c99dcb9e146105c2578063c9f1a03f146105d5578063cc875501146105e857600080fd5b8063b269681d1461058f578063c1c0f4f6146105a257600080fd5b8063938b5f321161012f5780639fbcb9cb116101145780639fbcb9cb14610556578063a149352c14610569578063a2155c341461057c57600080fd5b8063938b5f32146104ff5780639d228a511461051257600080fd5b8063715018a61461048357806389791e171461048b5780638d3638f41461049e5780638da5cb5b146104da57600080fd5b806333d1b2e8116101f35780633eea79d1116101c257806354fd4d50116101a757806354fd4d50146103f257806360fc84661461045057806369978b0d1461047057600080fd5b80633eea79d1146103cc5780634c3e1c1f146103df57600080fd5b806333d1b2e8146103865780633463d1b11461039957806336cba43c146103bc5780633aaeccc6146103c457600080fd5b8063237a85a51161024a57806328f3fac91161022f57806328f3fac91461033d5780632de5aaf71461035d57806333c3a8f31461037e57600080fd5b8063237a85a5146103175780632853a0e61461032a57600080fd5b80630e6bfcd51461027c578063127a2c9d146102cc57806312db2ef6146102ed578063130c567314610302575b600080fd5b61028f61028a366004613239565b61066c565b604080517fffffffff0000000000000000000000000000000000000000000000000000000090931683526020830191909152015b60405180910390f35b6102df6102da3660046132bd565b6106e1565b6040519081526020016102c3565b6102f561077d565b6040516102c391906132f1565b6103156103103660046133c5565b610794565b005b6103156103253660046133c5565b6108b1565b610315610338366004613490565b610b39565b61035061034b3660046134d5565b610b8d565b6040516102c3919061355f565b61037061036b36600461356d565b610c30565b6040516102c3929190613586565b60cc546102df565b6102f56103943660046135a3565b610c77565b6103ac6103a73660046134d5565b610d6b565b6040516102c394939291906135c5565b60cd546102df565b609b546102df565b6102f56103da3660046134d5565b610edf565b6103156103ed3660046133c5565b610f3e565b6040805180820182527f000000000000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000602082015290516102c3919061366a565b61046361045e36600461367d565b61102a565b6040516102c391906136f2565b61031561047e366004613490565b610b7d565b610315611195565b610315610499366004613786565b6111f1565b6104c57f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016102c3565b6033546001600160a01b03165b6040516001600160a01b0390911681526020016102c3565b6097546104e7906001600160a01b031681565b6105256105203660046137bb565b611471565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016102c3565b60c9546104e7906001600160a01b031681565b61052561057736600461381d565b61152b565b61031561058a366004613852565b61159b565b6098546104e7906001600160a01b031681565b6105b56105b036600461388b565b611977565b6040516102c391906138a8565b6102df6105d03660046134d5565b611aa4565b6103156105e3366004613239565b611ab5565b6103156105f63660046138e9565b611af9565b61060e61060936600461356d565b611cf2565b6040516102c396959493929190613917565b61031561062e3660046134d5565b611eca565b610315610641366004613972565b611fac565b6099546104e7906001600160a01b031681565b6103156106673660046133c5565b6120f4565b60985460009081906001600160a01b031633146106b5576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f0e6bfcd5000000000000000000000000000000000000000000000000000000009491935090915050565b6098546000906001600160a01b03163314610728576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81610751577f474d00000000000000000000000000000000000000000000000000000000000091505b507f127a2c9d0000000000000000000000000000000000000000000000000000000081185b9392505050565b606061078f600060cc80549050610c77565b905090565b6033546001600160a01b031633146107f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b60006107fe83610b8d565b905061080981612182565b8363ffffffff16816020015163ffffffff1614610852576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610860600186866121ce565b90506108aa8184604051806060016040528060026005811115610885576108856134f0565b81526020018963ffffffff168152602001866040015163ffffffff1681525087612204565b5050505050565b6033546001600160a01b0316331461090b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff663ffffffff84160161096a576040517ff2b2faa000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061097583612397565b9050600080808351600581111561098e5761098e6134f0565b03610a6b5760cc5463ffffffff116109d2576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60cc805460018082019092557f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe810180546001600160a01b0389167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216811790925563ffffffff8a16600090815260cb60209081526040822080549687018155825290209093018054909316179091559150610aed565b600383516005811115610a8057610a806134f0565b148015610a9c57508563ffffffff16836020015163ffffffff16145b15610abb5782604001519150610ab4600387876121ce565b9050610aed565b6040517f86511bd900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b318185604051806060016040528060016005811115610b1057610b106134f0565b81526020018a63ffffffff1681526020018663ffffffff1681525088612204565b505050505050565b6099546001600160a01b03163314610b7d576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610b8883838361242c565b505050565b6040805160608101825260008082526020820181905291810191909152610bb382612397565b6001600160a01b038316600090815260ca602090815260408083205465010000000000900463ffffffff168352609a90915290205490915060029060ff1681811115610c0157610c016134f0565b148015610c215750600581516005811115610c1e57610c1e6134f0565b14155b15610c2b57600481525b919050565b60408051606081018252600080825260208201819052918101829052610c55836124e7565b91506001600160a01b03821615610c7257610c6f82610b8d565b90505b915091565b60cc54606090808410610cb6576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610cc184866139f5565b1115610cd457610cd18482613a08565b92505b8267ffffffffffffffff811115610ced57610ced613347565b604051908082528060200260200182016040528015610d16578160200160208202803683370190505b50915060005b83811015610d6357610d36610d3182876139f5565b612522565b838281518110610d4857610d48613a1b565b6020908102919091010152610d5c81613a4a565b9050610d1c565b505092915050565b6000806000806000610da2866001600160a01b0316600090815260ca602052604090205463ffffffff650100000000009091041690565b6000818152609a602052604080822081516060810190925280549394509192909190829060ff166002811115610dda57610dda6134f0565b6002811115610deb57610deb6134f0565b8152905461010081046affffffffffffffffffffff9081166020808501919091526c010000000000000000000000009092046001600160a01b03166040938401528351928401519184015192995090965016935090508215610ed6576000609b610e56600186613a08565b81548110610e6657610e66613a1b565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150610ed2908414610ec1578151610ec7565b81602001515b63ffffffff166124e7565b9550505b50509193509193565b60606000610eeb61077d565b90506000610ef884612397565b905060008082516005811115610f1057610f106134f0565b14610f2557816040015163ffffffff16610f29565b60cc545b9050610f35838261255a565b95945050505050565b6033546001600160a01b03163314610f985760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b6000610fa383610b8d565b9050610fae816126c9565b8363ffffffff16816020015163ffffffff1614610ff7576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611005600286866121ce565b90506108aa8184604051806060016040528060036005811115610885576108856134f0565b6060818067ffffffffffffffff81111561104657611046613347565b60405190808252806020026020018201604052801561108c57816020015b6040805180820190915260008152606060208201528152602001906001900390816110645790505b5091503660005b8281101561118c578585828181106110ad576110ad613a1b565b90506020028101906110bf9190613a82565b915060008482815181106110d5576110d5613a1b565b60200260200101519050306001600160a01b03168380602001906110f99190613ac0565b604051611107929190613b2c565b600060405180830381855af49150503d8060008114611142576040519150601f19603f3d011682016040523d82523d6000602084013e611147565b606091505b5060208301521515808252833517611183577f4d6a23280000000000000000000000000000000000000000000000000000000060005260046000fd5b50600101611093565b50505092915050565b6033546001600160a01b031633146111ef5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b565b6033546001600160a01b0316331461124b5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b6001600160a01b038116600090815260ca602090815260408083205465010000000000900463ffffffff168352609a9091528082208151606081019092528054829060ff1660028111156112a1576112a16134f0565b60028111156112b2576112b26134f0565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b03166040909101529050600081516002811115611303576113036134f0565b0361133a576040517fb3a71fa200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028151600281111561134f5761134f6134f0565b03611386576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b609854604080517f4098915200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b03169163409891529160048083019260609291908290030181865afa1580156113e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140d9190613b51565b505090508064ffffffffff1661384061142691906139f5565b42101561145f576040517f6fdc56c000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61146b8484600061242c565b50505050565b6098546000906001600160a01b031633146114b8576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620151808510156114f5576040517fa8928dd000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61150084848461242c565b507f9d228a510000000000000000000000000000000000000000000000000000000095945050505050565b6098546000906001600160a01b03163314611572576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507fa149352c000000000000000000000000000000000000000000000000000000009392505050565b6099546001600160a01b031633146115df576040517fdbc2fa8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a602052604081205460ff166002811115611609576116096134f0565b14611640576040517fd9d49b4c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff81166000908152609a602052604081205460ff16600281111561166a5761166a6134f0565b146116a1576040517f6893014300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516060808201835263ffffffff8086168352848116602084019081526000848601818152609b8054600181810183559382905296517fbba9db4cdbea0a37c207bbb83e20f828cd4441c49891101dc94fd20dc8efc349909701805494519251861668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff938716640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090961698909616979097179390931716929092179093559154835191820190935290819081526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff87168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156117ee576117ee6134f0565b0217905550602082015181546040938401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909316610100029290921660ff9091161717905580516060810190915280600181526affffffffffffffffffffff83166020808301919091526000604092830181905263ffffffff86168152609a909152208151815482907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660018360028111156118bf576118bf6134f0565b0217905550602082015181546040909301516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff909216610100029190911660ff909316929092179190911790557fd0672fae056abe2bf0637742527d49add67fdb68192a6c6f6bf86eac19fe0530611948600183613a08565b6040805191825263ffffffff808716602084015285169082015260600160405180910390a1610b888383612715565b63ffffffff8116600090815260cb60205260409020546060908067ffffffffffffffff8111156119a9576119a9613347565b6040519080825280602002602001820160405280156119d2578160200160208202803683370190505b5091506000805b82811015611a915763ffffffff8516600090815260cb60205260408120805483908110611a0857611a08613a1b565b6000918252602090912001546001600160a01b031690506001611a2a82610b8d565b516005811115611a3c57611a3c6134f0565b03611a8057808584611a4d81613a4a565b955081518110611a5f57611a5f613a1b565b60200260200101906001600160a01b031690816001600160a01b0316815250505b50611a8a81613a4a565b90506119d9565b50818114611a9d578083525b5050919050565b6000611aaf8261281a565b92915050565b6098546001600160a01b03163314610b88576040517f6efcc49f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60c9546001600160a01b03163314611b3d576040517fc9c49ce600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff168263ffffffff1603611bf4576097546040517f4e04e7a70000000000000000000000000000000000000000000000000000000081526001600160a01b0385811660048301526024820184905290911690634e04e7a790604401600060405180830381600087803b158015611bd757600080fd5b505af1158015611beb573d6000803e3d6000fd5b50505050505050565b609754604080516001600160a01b038681166024830152604480830186905283518084039091018152606490920183526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f1fa071380000000000000000000000000000000000000000000000000000000017905291517fa1c702a7000000000000000000000000000000000000000000000000000000008152919092169163a1c702a791611cb0918691620151809190600401613b98565b60408051808303816000875af1158015611cce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108aa9190613bc1565b600080600080606080609b805490508710611d39576040517f1390f2a100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000609b8881548110611d4e57611d4e613a1b565b600091825260209182902060408051606081018252929091015463ffffffff80821680855264010000000083048216958501959095526801000000000000000090910416908201529150611da1906124e7565b9650611db6816020015163ffffffff166124e7565b604082015190965063ffffffff1615611e1357611ddc816040015163ffffffff166124e7565b60408281015163ffffffff166000908152609a60205220549095506c0100000000000000000000000090046001600160a01b031693505b6099546040517fc495912b000000000000000000000000000000000000000000000000000000008152600481018a90526001600160a01b039091169063c495912b90602401600060405180830381865afa158015611e75573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611ebb9190810190613c71565b97999698509496939592505050565b6033546001600160a01b03163314611f245760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016107ea565b6001600160a01b038116611fa05760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016107ea565b611fa98161285b565b50565b6000611fb860016128c5565b90508015611fed57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611ff8858585612a17565b60c980547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038416179055612033612aeb565b60cc80546001810182556000919091527f47197230e1e4b29fc0bd84d7d78966c0925452aff72a2a121538b102457e9ebe0180547fffffffffffffffffffffffff000000000000000000000000000000000000000016905580156108aa57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050505050565b60006120ff83610b8d565b905061210a81612b70565b8363ffffffff16816020015163ffffffff1614612153576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061215e8461281a565b90506108aa81846040518060600160405280600580811115610885576108856134f0565b600181516005811115612197576121976134f0565b14611fa9576040517f486fcee200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008383836040516020016121e593929190613cd5565b6040516020818303038152906040528051906020012090509392505050565b600061221983600001518460200151846121ce565b90506000612241846040015163ffffffff1687878560cd612bbc90949392919063ffffffff16565b6001600160a01b038416600090815260ca6020526040902085518154929350869282907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600183600581111561229a5761229a6134f0565b021790555060208281015182546040948501517fffffffffffffffffffffffffffffffffffffffffffffff0000000000000000ff90911661010063ffffffff938416027fffffffffffffffffffffffffffffffffffffffffffffff00000000ffffffffff1617650100000000009183169190910217909255860151865192516001600160a01b0387169391909216917f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e9161235491613d4d565b60405180910390a36040518181527f2cbc14f49c068133583f7cb530018af451c87c1cf1327cf2a4ff4698c4730aa49060200160405180910390a1505050505050565b60408051606081018252600080825260208201819052918101919091526001600160a01b038216600090815260ca6020526040908190208151606081019092528054829060ff1660058111156123ef576123ef6134f0565b6005811115612400576124006134f0565b8152905463ffffffff610100820481166020840152650100000000009091041660409091015292915050565b600061243783612397565b905061244281612c20565b8363ffffffff16816020015163ffffffff161461248b576040517f1612d2ee00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b826001600160a01b03168463ffffffff167f8f9b8b0f4f062833bec85ea9a8465e4a1207b4be6eb565bbd0ae8b913588d04e60046040516124cc9190613d4d565b60405180910390a36124e2816040015183612c8d565b61146b565b60cc54600090821015610c2b5760cc828154811061250757612507613a1b565b6000918252602090912001546001600160a01b031692915050565b60008115610c2b57611aaf60cc838154811061254057612540613a1b565b6000918252602090912001546001600160a01b031661281a565b6060600061258084518410612579576125748460016139f5565b612f9e565b8451612f9e565b90508067ffffffffffffffff81111561259b5761259b613347565b6040519080825280602002602001820160405280156125c4578160200160208202803683370190505b50845190925060005b8281101561118c578185600118106125e6576000612604565b8585600118815181106125fb576125fb613a1b565b60200260200101515b84828151811061261657612616613a1b565b60200260200101818152505060005b828110156126b6576000816001019050600088838151811061264957612649613a1b565b60200260200101519050600085831061266357600061267e565b89838151811061267557612675613a1b565b60200260200101515b905061268a8282612fb7565b8a600186901c815181106126a0576126a0613a1b565b6020908102919091010152505050600201612625565b50600194851c94918201821c91016125cd565b6002815160058111156126de576126de6134f0565b14611fa9576040517fe637af9400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6098546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b039091169063a2155c3490604401600060405180830381600087803b15801561278157600080fd5b505af1158015612795573d6000803e3d6000fd5b505060c9546040517fa2155c3400000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b03909116925063a2155c3491506044015b600060405180830381600087803b15801561280657600080fd5b505af1158015610b31573d6000803e3d6000fd5b60008061282683612397565b905060008151600581111561283d5761283d6134f0565b146128555761077681600001518260200151856121ce565b50919050565b603380546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60008054610100900460ff1615612962578160ff1660011480156128e85750303b155b61295a5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107ea565b506000919050565b60005460ff8084169116106129df5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084016107ea565b50600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff92909216919091179055600190565b600054610100900460ff16612a945760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ea565b609780546001600160a01b039485167fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155609880549385169382169390931790925560998054919093169116179055565b600054610100900460ff16612b685760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ea565b6111ef612fff565b600481516005811115612b8557612b856134f0565b14611fa9576040517f0a06903700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8454600090612bce8686866020613085565b14612c05576040517f18b00be200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b612c128583856020613085565b958690555093949350505050565b600181516005811115612c3557612c356134f0565b14158015612c565750600281516005811115612c5357612c536134f0565b14155b15611fa9576040517fec3d0d8500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b63ffffffff82166000908152609a60205260408082208151606081019092528054829060ff166002811115612cc457612cc46134f0565b6002811115612cd557612cd56134f0565b8152905461010081046affffffffffffffffffffff1660208301526c0100000000000000000000000090046001600160a01b03166040909101529050600281516002811115612d2657612d266134f0565b03612d5d576040517ff10068b500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60028082526001600160a01b03831660408084019190915263ffffffff85166000908152609a6020522082518154849383917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016906001908490811115612dc657612dc66134f0565b021790555060208281015182546040909401516001600160a01b03166c01000000000000000000000000026bffffffffffffffffffffffff6affffffffffffffffffffff928316610100021660ff90951694909417939093179091558201516000911615612f9457600060018360200151612e419190613d5b565b6affffffffffffffffffffff1690506000609b8281548110612e6557612e65613a1b565b600091825260209182902060408051606081018252919092015463ffffffff8082168352640100000000820481169483019490945268010000000000000000900490921690820152609b8054919250879184908110612ec657612ec6613a1b565b60009182526020918290200180547fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff166801000000000000000063ffffffff94851602179055820151878216911614612f23578060200151612f26565b80515b63ffffffff8181166000818152609a60209081526040808320929092558151878152938b16908401528201526001600160a01b03871660608201529093507fb4cad5624e1d1c6c622ec70516ee582fe3f6519440c5b47e5165141edc9c54cf9060800160405180910390a150505b61146b848261312d565b600060015b82811015612855576001918201911b612fa3565b600082158015612fc5575081155b15612fd257506000611aaf565b50604080516020808201949094528082019290925280518083038201815260609092019052805191012090565b600054610100900460ff1661307c5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e6700000000000000000000000000000000000000000060648201526084016107ea565b6111ef3361285b565b8151600090828111156130c4576040517fc5360feb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84915060005b81811015613101576130f7838683815181106130e8576130e8613a1b565b60200260200101518984613208565b92506001016130ca565b50805b83811015613123576131198360008984613208565b9250600101613104565b5050949350505050565b6098546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8085166004830152831660248201526001600160a01b0390911690636116921890604401600060405180830381600087803b15801561319957600080fd5b505af11580156131ad573d6000803e3d6000fd5b505060c9546040517f6116921800000000000000000000000000000000000000000000000000000000815263ffffffff8087166004830152851660248201526001600160a01b039091169250636116921891506044016127ec565b6000600183831c168103613227576132208585612fb7565b9050613231565b6132208486612fb7565b949350505050565b60008060006060848603121561324e57600080fd5b833561ffff8116811461326057600080fd5b925060208401357fffffffff000000000000000000000000000000000000000000000000000000008116811461329557600080fd5b929592945050506040919091013590565b80356001600160a01b0381168114610c2b57600080fd5b6000806000606084860312156132d257600080fd5b6132db846132a6565b9250602084013560ff8116811461329557600080fd5b6020808252825182820181905260009190848201906040850190845b818110156133295783518352928401929184019160010161330d565b50909695505050505050565b63ffffffff81168114611fa957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156133bd576133bd613347565b604052919050565b6000806000606084860312156133da57600080fd5b83356133e581613335565b925060206133f48582016132a6565b9250604085013567ffffffffffffffff8082111561341157600080fd5b818701915087601f83011261342557600080fd5b81358181111561343757613437613347565b8060051b9150613448848301613376565b818152918301840191848101908a84111561346257600080fd5b938501935b8385101561348057843582529385019390850190613467565b8096505050505050509250925092565b6000806000606084860312156134a557600080fd5b83356134b081613335565b92506134be602085016132a6565b91506134cc604085016132a6565b90509250925092565b6000602082840312156134e757600080fd5b610776826132a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6006811061352f5761352f6134f0565b9052565b61353e82825161351f565b60208181015163ffffffff9081169184019190915260409182015116910152565b60608101611aaf8284613533565b60006020828403121561357f57600080fd5b5035919050565b6001600160a01b0383168152608081016107766020830184613533565b600080604083850312156135b657600080fd5b50508035926020909101359150565b60808101600386106135d9576135d96134f0565b9481526001600160a01b0393841660208201529190921660408201526060015290565b60005b838110156136175781810151838201526020016135ff565b50506000910152565b600081518084526136388160208601602086016135fc565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006107766020830184613620565b6000806020838503121561369057600080fd5b823567ffffffffffffffff808211156136a857600080fd5b818501915085601f8301126136bc57600080fd5b8135818111156136cb57600080fd5b8660208260051b85010111156136e057600080fd5b60209290920196919550909350505050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015613778578883037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0018552815180511515845287015187840187905261376587850182613620565b9588019593505090860190600101613719565b509098975050505050505050565b6000806040838503121561379957600080fd5b82356137a481613335565b91506137b2602084016132a6565b90509250929050565b600080600080600060a086880312156137d357600080fd5b85356137de81613335565b94506020860135935060408601356137f581613335565b9250613803606087016132a6565b9150613811608087016132a6565b90509295509295909350565b60008060006060848603121561383257600080fd5b833561383d81613335565b95602085013595506040909401359392505050565b6000806040838503121561386557600080fd5b823561387081613335565b9150602083013561388081613335565b809150509250929050565b60006020828403121561389d57600080fd5b813561077681613335565b6020808252825182820181905260009190848201906040850190845b818110156133295783516001600160a01b0316835292840192918401916001016138c4565b6000806000606084860312156138fe57600080fd5b613907846132a6565b9250602084013561329581613335565b60006001600160a01b0380891683528088166020840152808716604084015280861660608401525060c0608083015261395360c0830185613620565b82810360a08401526139658185613620565b9998505050505050505050565b6000806000806080858703121561398857600080fd5b613991856132a6565b935061399f602086016132a6565b92506139ad604086016132a6565b91506139bb606086016132a6565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b80820180821115611aaf57611aaf6139c6565b81810381811115611aaf57611aaf6139c6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613a7b57613a7b6139c6565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc1833603018112613ab657600080fd5b9190910192915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613af557600080fd5b83018035915067ffffffffffffffff821115613b1057600080fd5b602001915036819003821315613b2557600080fd5b9250929050565b8183823760009101908152919050565b805164ffffffffff81168114610c2b57600080fd5b600080600060608486031215613b6657600080fd5b613b6f84613b3c565b9250613b7d60208501613b3c565b91506040840151613b8d81613335565b809150509250925092565b600063ffffffff808616835280851660208401525060606040830152610f356060830184613620565b60008060408385031215613bd457600080fd5b8251613bdf81613335565b6020939093015192949293505050565b600082601f830112613c0057600080fd5b815167ffffffffffffffff811115613c1a57613c1a613347565b613c4b60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601613376565b818152846020838601011115613c6057600080fd5b6132318260208301602087016135fc565b60008060408385031215613c8457600080fd5b825167ffffffffffffffff80821115613c9c57600080fd5b613ca886838701613bef565b93506020850151915080821115613cbe57600080fd5b50613ccb85828601613bef565b9150509250929050565b600060068510613ce757613ce76134f0565b5060f89390931b835260e09190911b7fffffffff0000000000000000000000000000000000000000000000000000000016600183015260601b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600582015260190190565b60208101611aaf828461351f565b6affffffffffffffffffffff828116828216039080821115613d7f57613d7f6139c6565b509291505056fea26469706673582212200c09e05890eb17a97f8b585c9bc6ef377477291e2f36d1c4eb870fb3bd3dce4964736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"145164:130:0:-:0;;;145240:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;56994:120;;;;;;;;;;;;;-1:-1:-1;;;56994:120:0;;;;37545:32;;145282:6;;;56994:120;37811:24;37825:8;37811:24;:::i;:::-;37803:32;;-1:-1:-1;57081:26:0::1;::::0;;::::1;;::::0;128361:24;::::1;4063:2;128361:24;::::0;-1:-1:-1;128357:58:0::1;;128394:21;;-1:-1:-1::0;;;128394:21:0::1;;;;;;;;;;;128357:58;128289:133:::0;145240:52;145164:130;;14:280:1;83:6;136:2;124:9;115:7;111:23;107:32;104:52;;;152:1;149;142:12;104:52;184:9;178:16;234:10;227:5;223:22;216:5;213:33;203:61;;260:1;257;250:12;203:61;283:5;14:280;-1:-1:-1;;;14:280:1:o;299:297::-;417:12;;464:4;453:16;;;447:23;;417:12;482:16;;479:111;;;576:1;572:6;562;556:4;552:17;549:1;545:25;541:38;534:5;530:50;521:59;;479:111;;299:297;;;:::o;:::-;145164:130:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"145164:130:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;144591:325;;;;;;:::i;:::-;;:::i;:::-;;;;789:66:1;777:79;;;759:98;;888:2;873:18;;866:34;;;;732:18;144591:325:0;;;;;;;;143722:345;;;;;;:::i;:::-;;:::i;:::-;;;1674:25:1;;;1662:2;1647:18;143722:345:0;1528:177:1;138914:116:0;;;:::i;:::-;;;;;;;:::i;131252:988::-;;;;;;:::i;:::-;;:::i;:::-;;129288:1914;;;;;;:::i;:::-;;:::i;103354:136::-;;;;;;:::i;:::-;;:::i;104105:417::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;103864:201::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;:::i;138258:100::-;138337:7;:14;138258:100;;139080:463;;;;;;:::i;:::-;;:::i;105542:633::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;:::i;137165:101::-;137244:10;:15;137165:101;;104562;104640:9;:16;104562:101;;138408:456;;;;;;:::i;:::-;;:::i;132290:1077::-;;;;;;:::i;:::-;;:::i;37848:401::-;38019:28;;;;;;;;38032:7;38019:28;;38041:5;38019:28;;;;37848:401;;;;38019:28;37848:401;:::i;35226:1352::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;143120:133::-;;;;;;:::i;:::-;;:::i;57339:57::-;;;:::i;101169:751::-;;;;;;:::i;:::-;;:::i;56511:35::-;;;;;;;;10276:10:1;10264:23;;;10246:42;;10234:2;10219:18;56511:35:0;10102:192:1;54089:85:0;54161:6;;-1:-1:-1;;;;;54161:6:0;54089:85;;;-1:-1:-1;;;;;10463:55:1;;;10445:74;;10433:2;10418:18;54089:85:0;10299:226:1;99703:21:0;;;;;-1:-1:-1;;;;;99703:21:0;;;134725:794;;;;;;:::i;:::-;;:::i;:::-;;;11311:66:1;11299:79;;;11281:98;;11269:2;11254:18;134725:794:0;11137:248:1;127482:21:0;;;;;-1:-1:-1;;;;;127482:21:0;;;144922:203;;;;;;:::i;:::-;;:::i;102284:1030::-;;;;;;:::i;:::-;;:::i;99731:26::-;;;;;-1:-1:-1;;;;;99731:26:0;;;137316:732;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;138098:110::-;;;;;;:::i;:::-;;:::i;144238:182::-;;;;;;:::i;:::-;;:::i;135893:898::-;;;;;;:::i;:::-;;:::i;104703:799::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;:::i;54971:198::-;;;;;;:::i;:::-;;:::i;128428:427::-;;;;;;:::i;:::-;;:::i;99764:20::-;;;;;-1:-1:-1;;;;;99764:20:0;;;133733:942;;;;;;:::i;:::-;;:::i;144591:325::-;144727:11;;144682:6;;;;-1:-1:-1;;;;;144727:11:0;144713:10;:25;144709:60;;144747:22;;;;;;;;;;;;;;144709:60;-1:-1:-1;144860:42:0;;144904:4;;-1:-1:-1;144591:325:0;;-1:-1:-1;;144591:325:0:o;143722:345::-;143839:11;;143802:7;;-1:-1:-1;;;;;143839:11:0;143825:10;:25;143821:60;;143859:22;;;;;;;;;;;;;;143821:60;143895:4;143891:35;;143915:11;;;143891:35;-1:-1:-1;144022:31:0;:38;;143722:345;;;;;;:::o;138914:116::-;138955:22;138996:27;139005:1;139008:7;:14;;;;138996:8;:27::i;:::-;138989:34;;138914:116;:::o;131252:988::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;14878:2:1;54293:68:0;;;14860:21:1;;;14897:18;;;14890:30;14956:34;14936:18;;;14929:62;15008:18;;54293:68:0;;;;;;;;;131421:25:::1;131449:18;131461:5;131449:11;:18::i;:::-;131421:46;;131558:21;:6;:19;:21::i;:::-;131610:6;131593:23;;:6;:13;;;:23;;;131589:58;;131625:22;;;;;;;;;;;;;;131589:58;131998:16;132017:43;132028:16;132046:6;132054:5;132017:10;:43::i;:::-;131998:62;;132142:91;132154:8;132164:5;132171:54;;;;;;;;132183:19;132171:54;;;;;;;;:::i;:::-;;;;;132204:6;132171:54;;;;;;132212:6;:12;;;132171:54;;;;::::0;132227:5:::1;132142:11;:91::i;:::-;131352:888;;131252:988:::0;;;:::o;129288:1914::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;14878:2:1;54293:68:0;;;14860:21:1;;;14897:18;;;14890:30;14956:34;14936:18;;;14929:62;15008:18;;54293:68:0;14676:356:1;54293:68:0;129393:24;::::1;::::0;::::1;::::0;129389:61:::1;;129426:24;;;;;;;;;;;;;;129389:61;129533:25;129561;129580:5;129561:18;:25::i;:::-;129533:53:::0;-1:-1:-1;129632:12:0::1;::::0;;129759:11;;:32:::1;::::0;::::1;;;;;;:::i;:::-;::::0;129755:1278:::1;;129975:7;:14:::0;129993:16:::1;-1:-1:-1::0;129971:63:0::1;;130018:16;;;;;;;;;;;;;;129971:63;130063:7;:14:::0;;130181:19:::1;::::0;;::::1;::::0;;;;;::::1;::::0;;-1:-1:-1;;;;;130181:19:0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;130214:21:::1;::::0;::::1;-1:-1:-1::0;130214:21:0;;;:13:::1;130181:19;130214:21:::0;;;;;;:33;;;;::::1;::::0;;;;;;;;::::1;::::0;;;;::::1;;::::0;;;130063:14;-1:-1:-1;129755:1278:0::1;;;130283:17;130268:11:::0;;:32:::1;::::0;::::1;;;;;;:::i;:::-;;:59;;;;;130321:6;130304:23;;:6;:13;;;:23;;;130268:59;130264:769;;;130492:6;:12;;;130484:20;;130852:44;130863:17;130882:6;130890:5;130852:10;:44::i;:::-;130841:55;;130264:769;;;131004:18;;;;;;;;;;;;;;130264:769;131114:81;131126:8;131136:5;131143:44;;;;;;;;131155:16;131143:44;;;;;;;;:::i;:::-;;;;;131173:6;131143:44;;;;;;131181:5;131143:44;;;;::::0;131189:5:::1;131114:11;:81::i;:::-;129379:1823;;;129288:1914:::0;;;:::o;103354:136::-;100131:5;;-1:-1:-1;;;;;100131:5:0;100117:10;:19;100113:48;;100145:16;;;;;;;;;;;;;;100113:48;103449:34:::1;103461:6;103469:5;103476:6;103449:11;:34::i;:::-;103354:136:::0;;;:::o;104105:417::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;104208:25:0;104227:5;104208:18;:25::i;:::-;-1:-1:-1;;;;;142233:16:0;;104360:31;142233:16;;;:9;:16;;;;;;;;:22;;;;;;104360:31;;:13;:31;;;;;:36;104199:34;;-1:-1:-1;104400:19:0;;104360:36;;:59;;;;;;;;:::i;:::-;;:95;;;;-1:-1:-1;104438:17:0;104423:11;;:32;;;;;;;;:::i;:::-;;;104360:95;104356:160;;;104485:20;104471:34;;104356:160;104105:417;;;:::o;103864:201::-;-1:-1:-1;;;;;;;;103920:13:0;-1:-1:-1;;;;;;;;;;;;;;;103980:16:0;103990:5;103980:9;:16::i;:::-;103972:24;-1:-1:-1;;;;;;104010:19:0;;;104006:52;;104040:18;104052:5;104040:11;:18::i;:::-;104031:27;;104006:52;103864:201;;;:::o;139080:463::-;139210:7;:14;139154:22;;139238:24;;;139234:54;;139271:17;;;;;;;;;;;;;;139234:54;139323:11;139302:18;139314:6;139302:9;:18;:::i;:::-;:32;139298:95;;;139359:23;139373:9;139359:11;:23;:::i;:::-;139350:32;;139298:95;139424:6;139410:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;139410:21:0;;139402:29;;139446:9;139441:96;139465:6;139461:1;:10;139441:96;;;139503:23;139512:13;139524:1;139512:9;:13;:::i;:::-;139503:8;:23::i;:::-;139492:5;139498:1;139492:8;;;;;;;;:::i;:::-;;;;;;;;;;:34;139473:3;;;:::i;:::-;;;139441:96;;;;139178:365;139080:463;;;;:::o;105542:633::-;105627:16;105645:13;105660:19;105681:18;105715;105736:16;105746:5;-1:-1:-1;;;;;142233:16:0;142201:13;142233:16;;;:9;:16;;;;;:22;;;;;;;;142135:127;105736:16;105762:32;105797:25;;;:13;:25;;;;;;105762:60;;;;;;;;;;105715:37;;-1:-1:-1;105762:32:0;;:60;;105797:25;105762:60;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;105762:60:0;;;;;;105839:17;;105880:24;;;;105927:23;;;;105839:17;;-1:-1:-1;105880:24:0;;-1:-1:-1;105914:36:0;;-1:-1:-1;105839:17:0;-1:-1:-1;105964:14:0;;105960:209;;105994:28;106025:9;106035:14;106048:1;106035:10;:14;:::i;:::-;106025:25;;;;;;;;:::i;:::-;;;;;;;;;;105994:56;;;;;;;;106025:25;;;;105994:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;106072:86:0;;106082:32;;:75;;106139:18;;106082:75;;;106117:7;:19;;;106082:75;106072:86;;:9;:86::i;:::-;106064:94;;105980:189;105960:209;105705:470;;105542:633;;;;;:::o;138408:456::-;138464:22;138498;138523:10;:8;:10::i;:::-;138498:35;;138603:25;138631;138650:5;138631:18;:25::i;:::-;138603:53;-1:-1:-1;138721:13:0;;138737:11;;:32;;;;;;;;:::i;:::-;;:64;;138789:6;:12;;;138737:64;;;;;138772:7;:14;138737:64;138721:80;;138818:39;138844:5;138851;138818:25;:39::i;:::-;138811:46;138408:456;-1:-1:-1;;;;;138408:456:0:o;132290:1077::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;14878:2:1;54293:68:0;;;14860:21:1;;;14897:18;;;14890:30;14956:34;14936:18;;;14929:62;15008:18;;54293:68:0;14676:356:1;54293:68:0;132459:25:::1;132487:18;132499:5;132487:11;:18::i;:::-;132459:46;;132682:24;:6;:22;:24::i;:::-;132737:6;132720:23;;:6;:13;;;:23;;;132716:58;;132752:22;;;;;;;;;;;;;;132716:58;133124:16;133143:46;133154:19;133175:6;133183:5;133143:10;:46::i;:::-;133124:65;;133271:89;133283:8;133293:5;133300:52;;;;;;;;133312:17;133300:52;;;;;;;;:::i;35226:1352::-:0;35286:27;35342:5;;35378:20;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;;;;;;;;;;;;35378:20:0;;;;;;;;;;;;;;;;35364:34;;35408:19;35442:9;35437:1135;35461:6;35457:1;:10;35437:1135;;;35492:5;;35498:1;35492:8;;;;;;;:::i;:::-;;;;;;;;;;;;:::i;:::-;35484:16;;35514:20;35537:11;35549:1;35537:14;;;;;;;;:::i;:::-;;;;;;;35514:37;;35894:4;-1:-1:-1;;;;;35886:26:0;35913:5;:14;;;;;;;;:::i;:::-;35886:42;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;35865:17:0;;;35848:80;;;;;;36201:19;;36198:38;36188:301;;36365:66;36359:4;36352:80;36466:4;36460;36453:18;36188:301;-1:-1:-1;36544:3:0;;35437:1135;;;;35315:1263;;35226:1352;;;;:::o;57339:57::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;14878:2:1;54293:68:0;;;14860:21:1;;;14897:18;;;14890:30;14956:34;14936:18;;;14929:62;15008:18;;54293:68:0;14676:356:1;54293:68:0;57339:57::o;101169:751::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;14878:2:1;54293:68:0;;;14860:21:1;;;14897:18;;;14890:30;14956:34;14936:18;;;14929:62;15008:18;;54293:68:0;14676:356:1;54293:68:0;-1:-1:-1;;;;;142233:16:0;;101264:34:::1;142233:16:::0;;;:9;:16;;;;;;;;:22;;;;;;101301:38;;:13:::1;:38:::0;;;;;;101264:75;;::::1;::::0;::::1;::::0;;;;;;;::::1;;;::::0;::::1;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;::::0;;;;::::1;::::0;::::1;;;;::::0;::::1;::::0;;;::::1;-1:-1:-1::0;;;;;101264:75:0::1;::::0;;;;;;-1:-1:-1;;101353:19:0;;:39:::1;::::0;::::1;;;;;;:::i;:::-;::::0;101349:70:::1;;101401:18;;;;;;;;;;;;;;101349:70;101456:19;101433::::0;;:42:::1;::::0;::::1;;;;;;:::i;:::-;::::0;101429:79:::1;;101484:24;;;;;;;;;;;;;;101429:79;101645:11;::::0;101624:46:::1;::::0;;;;;;;101599:19:::1;::::0;-1:-1:-1;;;;;101645:11:0::1;::::0;101624:44:::1;::::0;:46:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;101645:11;101624:46:::1;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;101598:72;;;;101723:12;101702:33;;3769:7;101702:33;;;;:::i;:::-;101684:15;:51;101680:81;;;101744:17;;;;;;;;;;;;;;101680:81;101843:70;101864:6;101879:12;101909:1;101843:11;:70::i;:::-;101254:666;;101169:751:::0;;:::o;134725:794::-;134977:11;;134872:17;;-1:-1:-1;;;;;134977:11:0;134963:10;:25;134959:60;;134997:22;;;;;;;;;;;;;;134959:60;3608:6;135151:41;;135147:82;;;135201:28;;;;;;;;;;;;;;135147:82;135363:34;135375:6;135383:5;135390:6;135363:11;:34::i;:::-;-1:-1:-1;135482:30:0;134725:794;;;;;;;:::o;144922:203::-;145031:11;;144995:6;;-1:-1:-1;;;;;145031:11:0;145017:10;:25;145013:60;;145051:22;;;;;;;;;;;;;;145013:60;-1:-1:-1;145090:28:0;144922:203;;;;;:::o;102284:1030::-;100131:5;;-1:-1:-1;;;;;100131:5:0;100117:10;:19;100113:48;;100145:16;;;;;;;;;;;;;;100113:48;102435:25:::1;::::0;::::1;102469:16;102435:25:::0;;;:13:::1;:25;::::0;;;;:30;::::1;;:50;::::0;::::1;;;;;;:::i;:::-;;102431:79;;102494:16;;;;;;;;;;;;;;102431:79;102524:26;::::0;::::1;102559:16;102524:26:::0;;;:13:::1;:26;::::0;;;;:31;::::1;;:51;::::0;::::1;;;;;;:::i;:::-;;102520:81;;102584:17;;;;;;;;;;;;;;102520:81;102626:41;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;::::1;::::0;;;;::::1;;::::0;::::1;::::0;;;-1:-1:-1;102626:41:0;;;;;;102611:9:::1;:57:::0;;::::1;::::0;;::::1;::::0;;;;;;;;;;;::::1;::::0;;;;;;;::::1;::::0;::::1;::::0;;;::::1;::::0;::::1;::::0;;;;;;;::::1;::::0;;;;;;;::::1;;::::0;;;::::1;::::0;;;102808:16;;102862:65;;;;::::1;::::0;;;;;;;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;102862:65:0;;;;;;;102834:25:::1;::::0;::::1;::::0;;:13:::1;:25:::0;;;;:93;;;;:25;;:93;::::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;102834:93:0::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;102834:93:0::1;::::0;::::1;::::0;::::1;::::0;;::::1;;;::::0;;;;;;;;;::::1;::::0;;102966:65;;::::1;::::0;::::1;::::0;;;;102834:93:::1;102966:65:::0;;::::1;::::0;::::1;;::::0;;::::1;::::0;;;;-1:-1:-1;102966:65:0;;;;;;;102937:26:::1;::::0;::::1;::::0;;:13:::1;:26:::0;;;;:94;;;;:26;;:94;::::1;::::0;;::::1;::::0;::::1;;;;;;:::i;:::-;;;::::0;;-1:-1:-1;102937:94:0::1;::::0;::::1;::::0;;;::::1;::::0;;::::1;::::0;-1:-1:-1;;;;;102937:94:0::1;::::0;::::1;::::0;::::1;::::0;;::::1;;;::::0;;;;;;;;;;;;;;;::::1;::::0;;103157:95:::1;103186:14;102937:94;103186:10:::0;:14:::1;:::i;:::-;103157:95;::::0;;17916:25:1;;;17960:10;18006:15;;;18001:2;17986:18;;17979:43;18058:15;;18038:18;;;18031:43;17904:2;17889:18;103157:95:0::1;;;;;;;103262:45;103283:10;103295:11;103262:20;:45::i;137316:732::-:0;137431:21;;;137414:14;137431:21;;;:13;:21;;;;;:28;137379:23;;137431:28;137478:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;137478:21:0;;137469:30;;137509:20;137548:9;137543:227;137567:6;137563:1;:10;137543:227;;;137610:21;;;137594:13;137610:21;;;:13;:21;;;;;:24;;137632:1;;137610:24;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;137610:24:0;;-1:-1:-1;137610:24:0;137652:18;137664:5;137652:11;:18::i;:::-;:23;:43;;;;;;;;:::i;:::-;;137648:112;;137740:5;137715:6;137722:14;;;;:::i;:::-;;;137715:22;;;;;;;;:::i;:::-;;;;;;:30;-1:-1:-1;;;;;137715:30:0;;;-1:-1:-1;;;;;137715:30:0;;;;;137648:112;-1:-1:-1;137575:3:0;;;:::i;:::-;;;137543:227;;;;137799:6;137783:12;:22;137779:263;;138005:12;137997:6;137990:28;137779:263;137404:644;;137316:732;;;:::o;138098:110::-;138155:12;138186:15;138195:5;138186:8;:15::i;:::-;138179:22;138098:110;-1:-1:-1;;138098:110:0:o;144238:182::-;144336:11;;-1:-1:-1;;;;;144336:11:0;144322:10;:25;144318:60;;144356:22;;;;;;;;;;;;;;135893:898;136044:6;;-1:-1:-1;;;;;136044:6:0;136030:10;:20;136026:50;;136059:17;;;;;;;;;;;;;;136026:50;136101:11;136090:22;;:7;:22;;;136086:699;;136202:6;;136178:64;;;;;-1:-1:-1;;;;;18277:55:1;;;136178:64:0;;;18259:74:1;18349:18;;;18342:34;;;136202:6:0;;;;136178:45;;18232:18:1;;136178:64:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;103354:136;;;:::o;136086:699::-;136514:6;;136667:92;;;-1:-1:-1;;;;;18277:55:1;;;136667:92:0;;;18259:74:1;18349:18;;;;18342:34;;;136667:92:0;;;;;;;;;;18232:18:1;;;;136667:92:0;;;;;;;;;136690:49;136667:92;;;136498:276;;;;;136514:6;;;;;136498:42;;:276;;136572:7;;3608:6;;136667:92;136498:276;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;104703:799::-;104798:13;104825:14;104853:20;104887:19;104920:26;104960:28;105026:9;:16;;;;105017:5;:25;105013:55;;105051:17;;;;;;;;;;;;;;105013:55;105078:28;105109:9;105119:5;105109:16;;;;;;;;:::i;:::-;;;;;;;;;;105078:47;;;;;;;;105109:16;;;;105078:47;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;105143:29:0;;:9;:29::i;:::-;105135:37;;105191:30;105201:7;:19;;;105191:30;;:9;:30::i;:::-;105235:20;;;;105182:39;;-1:-1:-1;105235:24:0;;;105231:176;;105290:31;105300:7;:20;;;105290:31;;:9;:31::i;:::-;105363:20;;;;;105349:35;;;;;;:13;:35;;;:47;105275:46;;-1:-1:-1;105349:47:0;;;-1:-1:-1;;;;;105349:47:0;;-1:-1:-1;105231:176:0;105467:5;;105451:44;;;;;;;;1674:25:1;;;-1:-1:-1;;;;;105467:5:0;;;;105451:37;;1647:18:1;;105451:44:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;104703:799;;;;-1:-1:-1;104703:799:0;;;;;-1:-1:-1;;;104703:799:0:o;54971:198::-;54161:6;;-1:-1:-1;;;;;54161:6:0;52594:10;54301:23;54293:68;;;;-1:-1:-1;;;54293:68:0;;14878:2:1;54293:68:0;;;14860:21:1;;;14897:18;;;14890:30;14956:34;14936:18;;;14929:62;15008:18;;54293:68:0;14676:356:1;54293:68:0;-1:-1:-1;;;;;55059:22:0;::::1;55051:73;;;::::0;-1:-1:-1;;;55051:73:0;;20448:2:1;55051:73:0::1;::::0;::::1;20430:21:1::0;20487:2;20467:18;;;20460:30;20526:34;20506:18;;;20499:62;20597:8;20577:18;;;20570:36;20623:19;;55051:73:0::1;20246:402:1::0;55051:73:0::1;55134:28;55153:8;55134:18;:28::i;:::-;54971:198:::0;:::o;128428:427::-;48831:19;48853:25;48876:1;48853:22;:25::i;:::-;48831:47;;48892:14;48888:65;;;48922:13;:20;;;;;;;;48888:65;128551:50:::1;128571:7;128580:12;128594:6;128551:19;:50::i;:::-;128611:6;:16:::0;;;::::1;-1:-1:-1::0;;;;;128611:16:0;::::1;;::::0;;128637::::1;:14;:16::i;:::-;128824:7;:24:::0;;::::1;::::0;::::1;::::0;;128845:1:::1;128824:24:::0;;;;;::::1;::::0;;;::::1;::::0;;48973:99;;;;49023:5;49007:21;;;;;;49047:14;;-1:-1:-1;20805:36:1;;49047:14:0;;20793:2:1;20778:18;49047:14:0;;;;;;;48821:257;128428:427;;;;:::o;133733:942::-;133891:25;133919:18;133931:5;133919:11;:18::i;:::-;133891:46;;134023:25;:6;:23;:25::i;:::-;134079:6;134062:23;;:6;:13;;;:23;;;134058:58;;134094:22;;;;;;;;;;;;;;134058:58;134463:16;134482:15;134491:5;134482:8;:15::i;:::-;134463:34;;134579:89;134591:8;134601:5;134608:52;;;;;;;;134620:17;134608:52;;;;;;;;:::i;32865:164::-;32957:16;32942:11;;:31;;;;;;;;:::i;:::-;;32938:85;;32996:16;;;;;;;;;;;;;;109696:170;109785:7;109838:4;109844:6;109852:5;109821:37;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;109811:48;;;;;;109804:55;;109696:170;;;;;:::o;140016:584::-;140220:16;140239:51;140250:9;:14;;;140266:9;:16;;;140284:5;140239:10;:51::i;:::-;140220:70;;140372:15;140390:61;140408:9;:15;;;140390:61;;140425:8;140435:5;140442:8;140390:10;:17;;:61;;;;;;;:::i;:::-;-1:-1:-1;;;;;140461:16:0;;;;;;:9;:16;;;;;:28;;;;140372:79;;-1:-1:-1;140480:9:0;;140461:16;;:28;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;140461:28:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;140534:16;;;140518:14;;140504:54;;-1:-1:-1;;;;;140504:54:0;;;;;;;;;;;;;:::i;:::-;;;;;;;;140573:20;;1674:25:1;;;140573:20:0;;1662:2:1;1647:18;140573:20:0;;;;;;;140145:455;;140016:584;;;;:::o;141613:135::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;141725:16:0;;;;;;:9;:16;;;;;;;141718:23;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;141613:135;-1:-1:-1;;141613:135:0:o;107358:775::-;107519:25;107547;107566:5;107547:18;:25::i;:::-;107519:53;;107582:30;:6;:28;:30::i;:::-;107643:6;107626:23;;:6;:13;;;:23;;;107622:58;;107658:22;;;;;;;;;;;;;;107622:58;107851:5;-1:-1:-1;;;;;107807:50:0;107843:6;107807:50;;;107821:20;107807:50;;;;;;:::i;:::-;;;;;;;;107933:37;107949:6;:12;;;107963:6;107933:15;:37::i;:::-;108085:41;103354:136;141849:172;141952:7;:14;141915:13;;141944:22;;141940:75;;;141990:7;141998:5;141990:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;141990:14:0;;141849:172;-1:-1:-1;;141849:172:0:o;142803:204::-;142859:12;142887:10;;142883:72;;142920:24;142929:7;142937:5;142929:14;;;;;;;;:::i;:::-;;;;;;;;;;;-1:-1:-1;;;;;142929:14:0;142920:8;:24::i;15934:2253::-;16021:22;16224:14;16241:62;16259:6;:13;16251:5;:21;:51;;16292:9;:5;16300:1;16292:9;:::i;:::-;16241;:62::i;16251:51::-;16275:6;:13;16241:9;:62::i;:::-;16224:79;;16335:6;16321:21;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;16321:21:0;-1:-1:-1;16374:13:0;;16313:29;;-1:-1:-1;16352:19:0;16652:1519;16676:6;16672:1;:10;16652:1519;;;16818:11;16806:5;16814:1;16806:9;:23;16805:58;;16861:1;16805:58;;;16833:6;16840:5;16848:1;16840:9;16833:17;;;;;;;;:::i;:::-;;;;;;;16805:58;16794:5;16800:1;16794:8;;;;;;;;:::i;:::-;;;;;;:69;;;;;17365:17;17360:618;17400:11;17388:9;:23;17360:618;;;17451:18;17472:9;17484:1;17472:13;17451:34;;17507:17;17527:6;17534:9;17527:17;;;;;;;;:::i;:::-;;;;;;;17507:37;;17620:18;17654:11;17641:10;:24;:58;;17697:1;17641:58;;;17668:6;17675:10;17668:18;;;;;;;;:::i;:::-;;;;;;;17641:58;17620:79;;17927:32;17937:9;17948:10;17927:9;:32::i;:::-;17902:6;17922:1;17909:9;:14;;17902:22;;;;;;;;:::i;:::-;;;;;;;;;;:57;-1:-1:-1;;;17426:1:0;17413:14;17360:618;;;-1:-1:-1;18083:1:0;18145:11;;;;18063:15;;;18062:22;;;16684:3;16652:1519;;33082:173;33177:19;33162:11;;:34;;;;;;;;:::i;:::-;;33158:91;;33219:19;;;;;;;;;;;;;;140681:235;140792:11;;140778:63;;;;;21801:10:1;21838:15;;;140778:63:0;;;21820:34:1;21890:15;;21870:18;;;21863:43;-1:-1:-1;;;;;140792:11:0;;;;140778:38;;21764:18:1;;140778:63:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;140865:6:0;;140851:58;;;;;21801:10:1;21838:15;;;140851:58:0;;;21820:34:1;21890:15;;21870:18;;;21863:43;-1:-1:-1;;;;;140865:6:0;;;;-1:-1:-1;140851:33:0;;-1:-1:-1;21764:18:1;;140851:58:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;142351:371;142407:12;142489:25;142517;142536:5;142517:18;:25::i;:::-;142489:53;-1:-1:-1;142571:17:0;142556:11;;:32;;;;;;;;:::i;:::-;;142552:115;;142611:45;142622:6;:11;;;142635:6;:13;;;142650:5;142611:10;:45::i;142552:115::-;142421:301;142351:371;;;:::o;55323:187::-;55415:6;;;-1:-1:-1;;;;;55431:17:0;;;;;;;;;;;55463:40;;55415:6;;;55431:17;55415:6;;55463:40;;55396:16;;55463:40;55386:124;55323:187;:::o;51007:808::-;51071:4;51404:13;;;;;;;51400:409;;;51458:7;:12;;51469:1;51458:12;:61;;;;-1:-1:-1;51513:4:0;40062:19;:23;51458:61;51433:166;;;;-1:-1:-1;;;51433:166:0;;22119:2:1;51433:166:0;;;22101:21:1;22158:2;22138:18;;;22131:30;22197:34;22177:18;;;22170:62;22268:16;22248:18;;;22241:44;22302:19;;51433:166:0;21917:410:1;51433:166:0;-1:-1:-1;51620:5:0;;51007:808;-1:-1:-1;51007:808:0:o;51400:409::-;51664:12;;:22;;;;:12;;:22;51656:81;;;;-1:-1:-1;;;51656:81:0;;22119:2:1;51656:81:0;;;22101:21:1;22158:2;22138:18;;;22131:30;22197:34;22177:18;;;22170:62;22268:16;22248:18;;;22241:44;22302:19;;51656:81:0;21917:410:1;51656:81:0;-1:-1:-1;51751:12:0;:22;;;;;;;;;;;;;;;-1:-1:-1;;51007:808:0:o;100560:203::-;50418:13;;;;;;;50410:69;;;;-1:-1:-1;;;50410:69:0;;22534:2:1;50410:69:0;;;22516:21:1;22573:2;22553:18;;;22546:30;22612:34;22592:18;;;22585:62;22683:13;22663:18;;;22656:41;22714:19;;50410:69:0;22332:407:1;50410:69:0;100680:6:::1;:16:::0;;-1:-1:-1;;;;;100680:16:0;;::::1;::::0;;;::::1;;::::0;;;100706:11:::1;:26:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;100742:5:::1;:14:::0;;;;;::::1;::::0;::::1;;::::0;;100560:203::o;53801:95::-;50418:13;;;;;;;50410:69;;;;-1:-1:-1;;;50410:69:0;;22534:2:1;50410:69:0;;;22516:21:1;22573:2;22553:18;;;22546:30;22612:34;22592:18;;;22585:62;22683:13;22663:18;;;22656:41;22714:19;;50410:69:0;22332:407:1;50410:69:0;53863:26:::1;:24;:26::i;33595:176::-:0;33691:20;33676:11;;:35;;;;;;;;:::i;:::-;;33672:93;;33734:20;;;;;;;;;;;;;;29031:650;29381:9;;29213:15;;29313:64;29334:5;29341:8;29351:6;630:2;29313:20;:64::i;:::-;:77;29309:130;;29413:15;;;;;;;;;;;;;;29309:130;29551:64;29572:5;29579:8;29589:6;630:2;29551:20;:64::i;:::-;29655:19;;;;-1:-1:-1;29541:74:0;;29031:650;-1:-1:-1;;;;29031:650:0:o;33318:223::-;33419:16;33404:11;;:31;;;;;;;;:::i;:::-;;;:69;;;;-1:-1:-1;33454:19:0;33439:11;;:34;;;;;;;;:::i;:::-;;;33404:69;33400:135;;;33496:28;;;;;;;;;;;;;;108231:1078;108347:27;;;108312:32;108347:27;;;:13;:27;;;;;;108312:62;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;108312:62:0;;;;;;;-1:-1:-1;108409:19:0;108388:17;;:40;;;;;;;;:::i;:::-;;108384:77;;108437:24;;;;;;;;;;;;;;108384:77;108491:19;108471:39;;;-1:-1:-1;;;;;108520:33:0;;:24;;;;:33;;;;108563:27;;;-1:-1:-1;108563:27:0;;;:13;:27;;;:42;;;;108471:12;;108563:27;;:42;;;;;;;;;;;;;;:::i;:::-;;;;;-1:-1:-1;108563:42:0;;;;;;;;;;;;-1:-1:-1;;;;;108563:42:0;;;;;;;;;;;;;;;;;;;;;;;;;;108720:23;;;108563:42;;108720:28;;108716:529;;108764:20;108813:1;108787:12;:23;;;:27;;;;:::i;:::-;108764:50;;;;108828:28;108859:9;108869:12;108859:23;;;;;;;;:::i;:::-;;;;;;;;;;108828:54;;;;;;;;108859:23;;;;108828:54;;;;;;;;;;;;;;;;;;;;;;;;;;;;;108896:9;:23;;108828:54;;-1:-1:-1;108935:12:0;;108906;;108896:23;;;;;;:::i;:::-;;;;;;;;;;;:51;;;;;;;;;;;;;109028:19;;;:35;;;;;;:78;;109087:7;:19;;;109028:78;;;109066:18;;109028:78;109127:25;;;;;;;;:13;:25;;;;;;;;109120:32;;;;109171:63;;23165:25:1;;;23255:15;;;23235:18;;;23228:43;23287:18;;23280:43;-1:-1:-1;;;;;23359:55:1;;23354:2;23339:18;;23332:83;109127:25:0;;-1:-1:-1;109171:63:0;;23152:3:1;23137:19;109171:63:0;;;;;;;108750:495;;108716:529;109254:48;109277:12;109291:10;109254:22;:48::i;18272:241::-;18329:14;18372:1;18383:124;18399:5;18390:6;:14;18383:124;;;18448:8;;;;;18484:12;18383:124;;11679:287;11760:14;11790:23;;:51;;;;-1:-1:-1;11817:24:0;;11790:51;11786:174;;;-1:-1:-1;11864:1:0;11857:8;;11786:174;-1:-1:-1;11913:35:0;;;;;;;23583:19:1;;;;23618:12;;;23611:28;;;;11913:35:0;;;;;;;;;23655:12:1;;;;11913:35:0;;11903:46;;;;;;11679:287::o;53902:111::-;50418:13;;;;;;;50410:69;;;;-1:-1:-1;;;50410:69:0;;22534:2:1;50410:69:0;;;22516:21:1;22573:2;22553:18;;;22546:30;22612:34;22592:18;;;22585:62;22683:13;22663:18;;;22656:41;22714:19;;50410:69:0;22332:407:1;50410:69:0;53974:32:::1;52594:10:::0;53974:18:::1;:32::i;9407:900::-:0;9647:12;;9542:13;;9673:17;;;9669:48;;;9699:18;;;;;;;;;;;;;;9669:48;9735:4;9727:12;;9904:9;9899:189;9923:8;9919:1;:12;9899:189;;;10037:36;10047:5;10054;10060:1;10054:8;;;;;;;;:::i;:::-;;;;;;;10064:5;10071:1;10037:9;:36::i;:::-;10029:44;-1:-1:-1;9933:3:0;;9899:189;;;-1:-1:-1;10185:8:0;10168:123;10199:6;10195:1;:10;10168:123;;;10238:38;10248:5;10263:1;10267:5;10274:1;10238:9;:38::i;:::-;10230:46;-1:-1:-1;10207:3:0;;10168:123;;;;9561:746;9407:900;;;;;;:::o;140999:246::-;141113:11;;141099:67;;;;;21801:10:1;21838:15;;;141099:67:0;;;21820:34:1;21890:15;;21870:18;;;21863:43;-1:-1:-1;;;;;141113:11:0;;;;141099:41;;21764:18:1;;141099:67:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;141190:6:0;;141176:62;;;;;21801:10:1;21838:15;;;141176:62:0;;;21820:34:1;21890:15;;21870:18;;;21863:43;-1:-1:-1;;;;;141190:6:0;;;;-1:-1:-1;141176:36:0;;-1:-1:-1;21764:18:1;;141176:62:0;21621:291:1;10689:526:0;10825:14;11030:1;11003:23;;;11002:29;:34;;10998:211;;11085:24;11095:4;11101:7;11085:9;:24::i;:::-;11078:31;;;;10998:211;11174:24;11184:7;11193:4;11174:9;:24::i;10998:211::-;10689:526;;;;;;:::o;14:568:1:-;89:6;97;105;158:2;146:9;137:7;133:23;129:32;126:52;;;174:1;171;164:12;126:52;213:9;200:23;263:6;256:5;252:18;245:5;242:29;232:57;;285:1;282;275:12;232:57;308:5;-1:-1:-1;365:2:1;350:18;;337:32;413:66;400:80;;388:93;;378:121;;495:1;492;485:12;378:121;14:568;;518:7;;-1:-1:-1;;;572:2:1;557:18;;;;544:32;;14:568::o;911:196::-;979:20;;-1:-1:-1;;;;;1028:54:1;;1018:65;;1008:93;;1097:1;1094;1087:12;1112:411;1187:6;1195;1203;1256:2;1244:9;1235:7;1231:23;1227:32;1224:52;;;1272:1;1269;1262:12;1224:52;1295:29;1314:9;1295:29;:::i;:::-;1285:39;;1374:2;1363:9;1359:18;1346:32;1418:4;1411:5;1407:16;1400:5;1397:27;1387:55;;1438:1;1435;1428:12;1710:632;1881:2;1933:21;;;2003:13;;1906:18;;;2025:22;;;1852:4;;1881:2;2104:15;;;;2078:2;2063:18;;;1852:4;2147:169;2161:6;2158:1;2155:13;2147:169;;;2222:13;;2210:26;;2291:15;;;;2256:12;;;;2183:1;2176:9;2147:169;;;-1:-1:-1;2333:3:1;;1710:632;-1:-1:-1;;;;;;1710:632:1:o;2347:121::-;2432:10;2425:5;2421:22;2414:5;2411:33;2401:61;;2458:1;2455;2448:12;2473:184;2525:77;2522:1;2515:88;2622:4;2619:1;2612:15;2646:4;2643:1;2636:15;2662:334;2733:2;2727:9;2789:2;2779:13;;2794:66;2775:86;2763:99;;2892:18;2877:34;;2913:22;;;2874:62;2871:88;;;2939:18;;:::i;:::-;2975:2;2968:22;2662:334;;-1:-1:-1;2662:334:1:o;3001:1153::-;3102:6;3110;3118;3171:2;3159:9;3150:7;3146:23;3142:32;3139:52;;;3187:1;3184;3177:12;3139:52;3226:9;3213:23;3245:30;3269:5;3245:30;:::i;:::-;3294:5;-1:-1:-1;3318:2:1;3339:38;3358:18;;;3339:38;:::i;:::-;3329:48;;3428:2;3417:9;3413:18;3400:32;3451:18;3492:2;3484:6;3481:14;3478:34;;;3508:1;3505;3498:12;3478:34;3546:6;3535:9;3531:22;3521:32;;3591:7;3584:4;3580:2;3576:13;3572:27;3562:55;;3613:1;3610;3603:12;3562:55;3649:2;3636:16;3671:2;3667;3664:10;3661:36;;;3677:18;;:::i;:::-;3723:2;3720:1;3716:10;3706:20;;3746:28;3770:2;3766;3762:11;3746:28;:::i;:::-;3808:15;;;3878:11;;;3874:20;;;3839:12;;;;3906:19;;;3903:39;;;3938:1;3935;3928:12;3903:39;3962:11;;;;3982:142;3998:6;3993:3;3990:15;3982:142;;;4064:17;;4052:30;;4015:12;;;;4102;;;;3982:142;;;4143:5;4133:15;;;;;;;;3001:1153;;;;;:::o;4159:393::-;4235:6;4243;4251;4304:2;4292:9;4283:7;4279:23;4275:32;4272:52;;;4320:1;4317;4310:12;4272:52;4359:9;4346:23;4378:30;4402:5;4378:30;:::i;:::-;4427:5;-1:-1:-1;4451:38:1;4485:2;4470:18;;4451:38;:::i;:::-;4441:48;;4508:38;4542:2;4531:9;4527:18;4508:38;:::i;:::-;4498:48;;4159:393;;;;;:::o;4557:186::-;4616:6;4669:2;4657:9;4648:7;4644:23;4640:32;4637:52;;;4685:1;4682;4675:12;4637:52;4708:29;4727:9;4708:29;:::i;4748:184::-;4800:77;4797:1;4790:88;4897:4;4894:1;4887:15;4921:4;4918:1;4911:15;4937:140;5018:1;5011:5;5008:12;4998:46;;5024:18;;:::i;:::-;5053;;4937:140::o;5082:315::-;5147:44;5187:3;5179:5;5173:12;5147:44;:::i;:::-;5237:4;5226:16;;;5220:23;5262:10;5304:21;;;5288:14;;;5281:45;;;;5379:4;5368:16;;;5362:23;5358:32;5342:14;;5335:56;5082:315::o;5402:258::-;5594:2;5579:18;;5606:48;5583:9;5636:6;5606:48;:::i;5665:180::-;5724:6;5777:2;5765:9;5756:7;5752:23;5748:32;5745:52;;;5793:1;5790;5783:12;5745:52;-1:-1:-1;5816:23:1;;5665:180;-1:-1:-1;5665:180:1:o;5850:379::-;-1:-1:-1;;;;;6101:55:1;;6083:74;;6070:3;6055:19;;6166:57;6219:2;6204:18;;6196:6;6166:57;:::i;6416:248::-;6484:6;6492;6545:2;6533:9;6524:7;6520:23;6516:32;6513:52;;;6561:1;6558;6551:12;6513:52;-1:-1:-1;;6584:23:1;;;6654:2;6639:18;;;6626:32;;-1:-1:-1;6416:248:1:o;6669:540::-;6901:3;6886:19;;6935:1;6924:13;;6914:47;;6941:18;;:::i;:::-;6970:25;;;-1:-1:-1;;;;;7092:15:1;;;7087:2;7072:18;;7065:43;7144:15;;;;7139:2;7124:18;;7117:43;7191:2;7176:18;7169:34;6669:540;:::o;7214:250::-;7299:1;7309:113;7323:6;7320:1;7317:13;7309:113;;;7399:11;;;7393:18;7380:11;;;7373:39;7345:2;7338:10;7309:113;;;-1:-1:-1;;7456:1:1;7438:16;;7431:27;7214:250::o;7469:330::-;7511:3;7549:5;7543:12;7576:6;7571:3;7564:19;7592:76;7661:6;7654:4;7649:3;7645:14;7638:4;7631:5;7627:16;7592:76;:::i;:::-;7713:2;7701:15;7718:66;7697:88;7688:98;;;;7788:4;7684:109;;7469:330;-1:-1:-1;;7469:330:1:o;7804:220::-;7953:2;7942:9;7935:21;7916:4;7973:45;8014:2;8003:9;7999:18;7991:6;7973:45;:::i;8029:639::-;8139:6;8147;8200:2;8188:9;8179:7;8175:23;8171:32;8168:52;;;8216:1;8213;8206:12;8168:52;8256:9;8243:23;8285:18;8326:2;8318:6;8315:14;8312:34;;;8342:1;8339;8332:12;8312:34;8380:6;8369:9;8365:22;8355:32;;8425:7;8418:4;8414:2;8410:13;8406:27;8396:55;;8447:1;8444;8437:12;8396:55;8487:2;8474:16;8513:2;8505:6;8502:14;8499:34;;;8529:1;8526;8519:12;8499:34;8582:7;8577:2;8567:6;8564:1;8560:14;8556:2;8552:23;8548:32;8545:45;8542:65;;;8603:1;8600;8593:12;8542:65;8634:2;8626:11;;;;;8656:6;;-1:-1:-1;8029:639:1;;-1:-1:-1;;;;8029:639:1:o;8673:1100::-;8863:4;8892:2;8932;8921:9;8917:18;8962:2;8951:9;8944:21;8985:6;9020;9014:13;9051:6;9043;9036:22;9077:2;9067:12;;9110:2;9099:9;9095:18;9088:25;;9172:2;9162:6;9159:1;9155:14;9144:9;9140:30;9136:39;9210:2;9202:6;9198:15;9231:1;9241:503;9255:6;9252:1;9249:13;9241:503;;;9320:22;;;9344:66;9316:95;9304:108;;9435:13;;9490:9;;9483:17;9476:25;9461:41;;9541:11;;9535:18;9573:15;;;9566:27;;;9616:48;9648:15;;;9535:18;9616:48;:::i;:::-;9722:12;;;;9606:58;-1:-1:-1;;9687:15:1;;;;9277:1;9270:9;9241:503;;;-1:-1:-1;9761:6:1;;8673:1100;-1:-1:-1;;;;;;;;8673:1100:1:o;9778:319::-;9845:6;9853;9906:2;9894:9;9885:7;9881:23;9877:32;9874:52;;;9922:1;9919;9912:12;9874:52;9961:9;9948:23;9980:30;10004:5;9980:30;:::i;:::-;10029:5;-1:-1:-1;10053:38:1;10087:2;10072:18;;10053:38;:::i;:::-;10043:48;;9778:319;;;;;:::o;10530:602::-;10623:6;10631;10639;10647;10655;10708:3;10696:9;10687:7;10683:23;10679:33;10676:53;;;10725:1;10722;10715:12;10676:53;10764:9;10751:23;10783:30;10807:5;10783:30;:::i;:::-;10832:5;-1:-1:-1;10884:2:1;10869:18;;10856:32;;-1:-1:-1;10940:2:1;10925:18;;10912:32;10953;10912;10953;:::i;:::-;11004:7;-1:-1:-1;11030:38:1;11064:2;11049:18;;11030:38;:::i;:::-;11020:48;;11087:39;11121:3;11110:9;11106:19;11087:39;:::i;:::-;11077:49;;10530:602;;;;;;;;:::o;11390:381::-;11466:6;11474;11482;11535:2;11523:9;11514:7;11510:23;11506:32;11503:52;;;11551:1;11548;11541:12;11503:52;11590:9;11577:23;11609:30;11633:5;11609:30;:::i;:::-;11658:5;11710:2;11695:18;;11682:32;;-1:-1:-1;11761:2:1;11746:18;;;11733:32;;11390:381;-1:-1:-1;;;11390:381:1:o;11776:384::-;11842:6;11850;11903:2;11891:9;11882:7;11878:23;11874:32;11871:52;;;11919:1;11916;11909:12;11871:52;11958:9;11945:23;11977:30;12001:5;11977:30;:::i;:::-;12026:5;-1:-1:-1;12083:2:1;12068:18;;12055:32;12096;12055;12096;:::i;:::-;12147:7;12137:17;;;11776:384;;;;;:::o;12165:245::-;12223:6;12276:2;12264:9;12255:7;12251:23;12247:32;12244:52;;;12292:1;12289;12282:12;12244:52;12331:9;12318:23;12350:30;12374:5;12350:30;:::i;12415:681::-;12586:2;12638:21;;;12708:13;;12611:18;;;12730:22;;;12557:4;;12586:2;12809:15;;;;12783:2;12768:18;;;12557:4;12852:218;12866:6;12863:1;12860:13;12852:218;;;12931:13;;-1:-1:-1;;;;;12927:62:1;12915:75;;13045:15;;;;13010:12;;;;12888:1;12881:9;12852:218;;13101:387;13177:6;13185;13193;13246:2;13234:9;13225:7;13221:23;13217:32;13214:52;;;13262:1;13259;13252:12;13214:52;13285:29;13304:9;13285:29;:::i;:::-;13275:39;;13364:2;13353:9;13349:18;13336:32;13377:30;13401:5;13377:30;:::i;13493:764::-;13761:4;-1:-1:-1;;;;;13871:2:1;13863:6;13859:15;13848:9;13841:34;13923:2;13915:6;13911:15;13906:2;13895:9;13891:18;13884:43;13975:2;13967:6;13963:15;13958:2;13947:9;13943:18;13936:43;14027:2;14019:6;14015:15;14010:2;13999:9;13995:18;13988:43;;14068:3;14062;14051:9;14047:19;14040:32;14095:46;14136:3;14125:9;14121:19;14113:6;14095:46;:::i;:::-;14190:9;14182:6;14178:22;14172:3;14161:9;14157:19;14150:51;14218:33;14244:6;14236;14218:33;:::i;:::-;14210:41;13493:764;-1:-1:-1;;;;;;;;;13493:764:1:o;14262:409::-;14348:6;14356;14364;14372;14425:3;14413:9;14404:7;14400:23;14396:33;14393:53;;;14442:1;14439;14432:12;14393:53;14465:29;14484:9;14465:29;:::i;:::-;14455:39;;14513:38;14547:2;14536:9;14532:18;14513:38;:::i;:::-;14503:48;;14570:38;14604:2;14593:9;14589:18;14570:38;:::i;:::-;14560:48;;14627:38;14661:2;14650:9;14646:18;14627:38;:::i;:::-;14617:48;;14262:409;;;;;;;:::o;15037:184::-;15089:77;15086:1;15079:88;15186:4;15183:1;15176:15;15210:4;15207:1;15200:15;15226:125;15291:9;;;15312:10;;;15309:36;;;15325:18;;:::i;15356:128::-;15423:9;;;15444:11;;;15441:37;;;15458:18;;:::i;15489:184::-;15541:77;15538:1;15531:88;15638:4;15635:1;15628:15;15662:4;15659:1;15652:15;15678:195;15717:3;15748:66;15741:5;15738:77;15735:103;;15818:18;;:::i;:::-;-1:-1:-1;15865:1:1;15854:13;;15678:195::o;15878:380::-;15968:4;16026:11;16013:25;16116:66;16105:8;16089:14;16085:29;16081:102;16061:18;16057:127;16047:155;;16198:1;16195;16188:12;16047:155;16219:33;;;;;15878:380;-1:-1:-1;;15878:380:1:o;16263:580::-;16340:4;16346:6;16406:11;16393:25;16496:66;16485:8;16469:14;16465:29;16461:102;16441:18;16437:127;16427:155;;16578:1;16575;16568:12;16427:155;16605:33;;16657:20;;;-1:-1:-1;16700:18:1;16689:30;;16686:50;;;16732:1;16729;16722:12;16686:50;16765:4;16753:17;;-1:-1:-1;16796:14:1;16792:27;;;16782:38;;16779:58;;;16833:1;16830;16823:12;16779:58;16263:580;;;;;:::o;16848:271::-;17031:6;17023;17018:3;17005:33;16987:3;17057:16;;17082:13;;;17057:16;16848:271;-1:-1:-1;16848:271:1:o;17124:169::-;17202:13;;17255:12;17244:24;;17234:35;;17224:63;;17283:1;17280;17273:12;17298:415;17383:6;17391;17399;17452:2;17440:9;17431:7;17427:23;17423:32;17420:52;;;17468:1;17465;17458:12;17420:52;17491:39;17520:9;17491:39;:::i;:::-;17481:49;;17549:48;17593:2;17582:9;17578:18;17549:48;:::i;:::-;17539:58;;17640:2;17629:9;17625:18;17619:25;17653:30;17677:5;17653:30;:::i;:::-;17702:5;17692:15;;;17298:415;;;;;:::o;18387:403::-;18549:4;18578:10;18627:2;18619:6;18615:15;18604:9;18597:34;18679:2;18671:6;18667:15;18662:2;18651:9;18647:18;18640:43;;18719:2;18714;18703:9;18699:18;18692:30;18739:45;18780:2;18769:9;18765:18;18757:6;18739:45;:::i;18795:310::-;18873:6;18881;18934:2;18922:9;18913:7;18909:23;18905:32;18902:52;;;18950:1;18947;18940:12;18902:52;18982:9;18976:16;19001:30;19025:5;19001:30;:::i;:::-;19095:2;19080:18;;;;19074:25;19050:5;;19074:25;;-1:-1:-1;;;18795:310:1:o;19110:568::-;19163:5;19216:3;19209:4;19201:6;19197:17;19193:27;19183:55;;19234:1;19231;19224:12;19183:55;19263:6;19257:13;19289:18;19285:2;19282:26;19279:52;;;19311:18;;:::i;:::-;19355:114;19463:4;19394:66;19387:4;19383:2;19379:13;19375:86;19371:97;19355:114;:::i;:::-;19494:2;19485:7;19478:19;19540:3;19533:4;19528:2;19520:6;19516:15;19512:26;19509:35;19506:55;;;19557:1;19554;19547:12;19506:55;19570:77;19644:2;19637:4;19628:7;19624:18;19617:4;19609:6;19605:17;19570:77;:::i;19683:558::-;19780:6;19788;19841:2;19829:9;19820:7;19816:23;19812:32;19809:52;;;19857:1;19854;19847:12;19809:52;19890:9;19884:16;19919:18;19960:2;19952:6;19949:14;19946:34;;;19976:1;19973;19966:12;19946:34;19999:60;20051:7;20042:6;20031:9;20027:22;19999:60;:::i;:::-;19989:70;;20105:2;20094:9;20090:18;20084:25;20068:41;;20134:2;20124:8;20121:16;20118:36;;;20150:1;20147;20140:12;20118:36;;20173:62;20227:7;20216:8;20205:9;20201:24;20173:62;:::i;:::-;20163:72;;;19683:558;;;;;:::o;20852:551::-;21029:3;21068:1;21060:6;21057:13;21047:47;;21074:18;;:::i;:::-;-1:-1:-1;21119:3:1;21115:16;;;;21103:29;;21169:3;21165:16;;;;21183:66;21161:89;21157:1;21148:11;;21141:110;21288:2;21284:15;21301:66;21280:88;21276:1;21267:11;;21260:109;21394:2;21385:12;;20852:551::o;21408:208::-;21554:2;21539:18;;21566:44;21543:9;21592:6;21566:44;:::i;22744:189::-;22812:24;22869:10;;;22857;;;22853:27;;22892:12;;;22889:38;;;22907:18;;:::i;:::-;22889:38;22744:189;;;;:::o","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"AgentCantBeAdded","type":"error"},{"inputs":[],"name":"AgentNotActive","type":"error"},{"inputs":[],"name":"AgentNotActiveNorUnstaking","type":"error"},{"inputs":[],"name":"AgentNotFraudulent","type":"error"},{"inputs":[],"name":"AgentNotUnstaking","type":"error"},{"inputs":[],"name":"CallerNotDestination","type":"error"},{"inputs":[],"name":"CallerNotInbox","type":"error"},{"inputs":[],"name":"CallerNotSummit","type":"error"},{"inputs":[],"name":"DisputeAlreadyResolved","type":"error"},{"inputs":[],"name":"DisputeNotOpened","type":"error"},{"inputs":[],"name":"DisputeNotStuck","type":"error"},{"inputs":[],"name":"GuardInDispute","type":"error"},{"inputs":[],"name":"IncorrectAgentDomain","type":"error"},{"inputs":[],"name":"IncorrectVersionLength","type":"error"},{"inputs":[],"name":"IndexOutOfRange","type":"error"},{"inputs":[],"name":"LeafNotProven","type":"error"},{"inputs":[],"name":"MerkleTreeFull","type":"error"},{"inputs":[],"name":"MustBeSynapseDomain","type":"error"},{"inputs":[],"name":"NotaryInDispute","type":"error"},{"inputs":[],"name":"SlashAgentOptimisticPeriod","type":"error"},{"inputs":[],"name":"SynapseDomainForbidden","type":"error"},{"inputs":[],"name":"TreeHeightTooLow","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"guardIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"DisputeOpened","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"disputeIndex","type":"uint256"},{"indexed":false,"internalType":"uint32","name":"slashedIndex","type":"uint32"},{"indexed":false,"internalType":"uint32","name":"rivalIndex","type":"uint32"},{"indexed":false,"internalType":"address","name":"fraudProver","type":"address"}],"name":"DisputeResolved","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"newRoot","type":"bytes32"}],"name":"RootUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"indexed":true,"internalType":"uint32","name":"domain","type":"uint32"},{"indexed":true,"internalType":"address","name":"agent","type":"address"}],"name":"StatusUpdated","type":"event"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"addAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentLeaf","outputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeSlashing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"destination","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"disputeStatus","outputs":[{"internalType":"enum DisputeFlag","name":"flag","type":"uint8"},{"internalType":"address","name":"rival","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"uint256","name":"disputePtr","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"name":"getActiveAgents","outputs":[{"internalType":"address[]","name":"agents","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDispute","outputs":[{"internalType":"address","name":"guard","type":"address"},{"internalType":"address","name":"notary","type":"address"},{"internalType":"address","name":"slashedAgent","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"bytes","name":"reportPayload","type":"bytes"},{"internalType":"bytes","name":"reportSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDisputesAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"indexFrom","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"getProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"origin_","type":"address"},{"internalType":"address","name":"destination_","type":"address"},{"internalType":"address","name":"inbox_","type":"address"},{"internalType":"address","name":"summit_","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"initiateUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"leafsAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct MultiCallable.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct MultiCallable.Result[]","name":"callResults","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"guardIndex","type":"uint32"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"openDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"origin","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"","type":"uint32"},{"internalType":"uint256","name":"","type":"uint256"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"remoteMockFunc","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"msgOrigin","type":"uint32"},{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"remoteSlashAgent","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"slashedAgent","type":"address"}],"name":"resolveStuckDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"uint8","name":"","type":"uint8"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"sensitiveMockFunc","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes4","name":"","type":"bytes4"},{"internalType":"bytes32","name":"data","type":"bytes32"}],"name":"sensitiveMockFuncOver32Bytes","outputs":[{"internalType":"bytes4","name":"","type":"bytes4"},{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"","type":"uint16"},{"internalType":"bytes4","name":"","type":"bytes4"},{"internalType":"bytes32","name":"","type":"bytes32"}],"name":"sensitiveMockFuncVoid","outputs":[],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgentExposed","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"summit","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"origin_","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTips","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"events":{"DisputeOpened(uint256,uint32,uint32)":{"notice":"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`."},"DisputeResolved(uint256,uint32,uint32,address)":{"notice":"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute."},"RootUpdated(bytes32)":{"notice":"Emitted whenever the root of the Agent Merkle Tree is updated."},"StatusUpdated(uint8,uint32,address)":{"notice":"Emitted whenever a status of the agent is updated."}},"kind":"user","methods":{"addAgent(uint32,address,bytes32[])":{"notice":"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting)."},"agentLeaf(address)":{"notice":"Returns a leaf representing the current status of agent in the Agent Merkle Tree."},"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"allLeafs()":{"notice":"Returns a full list of leafs from the Agent Merkle Tree."},"completeSlashing(uint32,address,bytes32[])":{"notice":"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root."},"completeUnstaking(uint32,address,bytes32[])":{"notice":"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains."},"disputeStatus(address)":{"notice":"Returns the current Dispute status of a given agent. See Structures.sol for details."},"getActiveAgents(uint32)":{"notice":"Returns all active agents for a given domain."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"getDispute(uint256)":{"notice":"Returns information about the dispute with the given index."},"getDisputesAmount()":{"notice":"Returns the number of opened Disputes."},"getLeafs(uint256,uint256)":{"notice":"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount)."},"getProof(address)":{"notice":"Returns a proof of inclusion of the agent in the Agent Merkle Tree."},"initiateUnstaking(uint32,address,bytes32[])":{"notice":"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains."},"leafsAmount()":{"notice":"Returns a total amount of leafs representing known agents."},"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"multicall((bool,bytes)[])":{"notice":"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."},"openDispute(uint32,uint32)":{"notice":"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute."},"remoteSlashAgent(uint32,uint256,uint32,address,address)":{"notice":"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain."},"resolveStuckDispute(uint32,address)":{"notice":"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."},"sensitiveMockFunc(address,uint8,bytes32)":{"notice":"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"},"sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)":{"notice":"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"},"sensitiveMockFuncVoid(uint16,bytes4,bytes32)":{"notice":"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)"},"slashAgent(uint32,address,address)":{"notice":"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain."},"slashAgentExposed(uint32,address,address)":{"notice":"Exposes _slashAgent for testing."},"withdrawTips(address,uint32,uint256)":{"notice":"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"addAgent(uint32,address,bytes32[])":{"details":"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent will be active","proof":"Merkle proof of the Inactive/Resting status for the agent"}},"agentLeaf(address)":{"details":"Will return an empty leaf, if agent is not added to the tree yet.","params":{"agent":"Agent address"},"returns":{"leaf":"    Agent leaf in the Agent Merkle Tree"}},"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"status":"Status for the given agent: (flag, domain, index)."}},"allLeafs()":{"details":"This might consume a lot of gas, do not use this on-chain."},"completeSlashing(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the active/unstaking status for the agent"}},"completeUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the unstaking status for the agent"}},"disputeStatus(address)":{"details":"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.","params":{"agent":"Agent address"},"returns":{"disputePtr":"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.","flag":"        Flag describing the current Dispute status for the agent: None/Pending/Slashed","fraudProver":" Address who provided fraud proof to resolve the Dispute","rival":"       Address of the rival agent in the Dispute"}},"getActiveAgents(uint32)":{"params":{"agents":"List of active agents for the domain","domain":"Domain to get agents from (ZERO for Guards)"}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"getDispute(uint256)":{"details":"Will revert if dispute with given index hasn't been opened yet.","params":{"index":"Dispute index"},"returns":{"fraudProver":"     Address who provided fraud proof to resolve the Dispute","guard":"           Address of the Guard in the Dispute","notary":"          Address of the Notary in the Dispute","reportPayload":"   Raw payload with report data that led to the Dispute","reportSignature":" Guard signature for the report payload","slashedAgent":"    Address of the Agent who was slashed when Dispute was resolved"}},"getDisputesAmount()":{"details":"This includes the Disputes that have been resolved already."},"getLeafs(uint256,uint256)":{"details":"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount"},"getProof(address)":{"details":"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.","params":{"agent":"Agent address"},"returns":{"proof":"   Merkle proof for the agent"}},"initiateUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","proof":"Merkle proof of the Active status for the agent"}},"leafsAmount()":{"details":"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry."},"openDispute(uint32,uint32)":{"params":{"guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"owner()":{"details":"Returns the address of the current owner."},"remoteSlashAgent(uint32,uint256,uint32,address,address)":{"details":"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \"remote\" function was called when executing a manager message.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof to remote AgentManager"},"returns":{"magicValue":"  Selector of this function"}},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"resolveStuckDispute(uint32,address)":{"params":{"slashedAgent":"Agent that is being slashed"}},"slashAgent(uint32,address,address)":{"params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","prover":"Address that initially provided fraud proof"}},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."},"withdrawTips(address,uint32,uint256)":{"details":"Could only be called by the Summit contract.","params":{"amount":"Tips value to withdraw","origin":"Domain where tips need to be withdrawn","recipient":"Address to withdraw tips to"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AgentCantBeAdded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotActiveNorUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotFraudulent\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"AgentNotUnstaking\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotDestination\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotInbox\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CallerNotSummit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeAlreadyResolved\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotOpened\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DisputeNotStuck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"GuardInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectAgentDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IndexOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LeafNotProven\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MustBeSynapseDomain\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotaryInDispute\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SlashAgentOptimisticPeriod\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SynapseDomainForbidden\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TreeHeightTooLow\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"DisputeOpened\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"disputeIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"}],\"name\":\"DisputeResolved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"RootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"indexed\":true,\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"StatusUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getActiveAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"origin_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"destination_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"inbox_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"summit_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initiateUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"remoteMockFunc\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"msgOrigin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"remoteSlashAgent\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFunc\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"data\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncOver32Bytes\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"sensitiveMockFuncVoid\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgentExposed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"summit\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"details\":\"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent will be active\",\"proof\":\"Merkle proof of the Inactive/Resting status for the agent\"}},\"agentLeaf(address)\":{\"details\":\"Will return an empty leaf, if agent is not added to the tree yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"leaf\":\"    Agent leaf in the Agent Merkle Tree\"}},\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"status\":\"Status for the given agent: (flag, domain, index).\"}},\"allLeafs()\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the active/unstaking status for the agent\"}},\"completeUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the unstaking status for the agent\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getActiveAgents(uint32)\":{\"params\":{\"agents\":\"List of active agents for the domain\",\"domain\":\"Domain to get agents from (ZERO for Guards)\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"getLeafs(uint256,uint256)\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\"},\"getProof(address)\":{\"details\":\"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"proof\":\"   Merkle proof for the agent\"}},\"initiateUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"proof\":\"Merkle proof of the Active status for the agent\"}},\"leafsAmount()\":{\"details\":\"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"details\":\"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \\\"remote\\\" function was called when executing a manager message.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof to remote AgentManager\"},\"returns\":{\"magicValue\":\"  Selector of this function\"}},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawTips(address,uint32,uint256)\":{\"details\":\"Could only be called by the Summit contract.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"origin\":\"Domain where tips need to be withdrawn\",\"recipient\":\"Address to withdraw tips to\"}}},\"version\":1},\"userdoc\":{\"events\":{\"DisputeOpened(uint256,uint32,uint32)\":{\"notice\":\"Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits their report for the Notary-signed statement to `StatementInbox`.\"},\"DisputeResolved(uint256,uint32,uint32,address)\":{\"notice\":\"Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed. Note: this won't be emitted, if an Agent was slashed without being in Dispute.\"},\"RootUpdated(bytes32)\":{\"notice\":\"Emitted whenever the root of the Agent Merkle Tree is updated.\"},\"StatusUpdated(uint8,uint32,address)\":{\"notice\":\"Emitted whenever a status of the agent is updated.\"}},\"kind\":\"user\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"notice\":\"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting).\"},\"agentLeaf(address)\":{\"notice\":\"Returns a leaf representing the current status of agent in the Agent Merkle Tree.\"},\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"allLeafs()\":{\"notice\":\"Returns a full list of leafs from the Agent Merkle Tree.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"notice\":\"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root.\"},\"completeUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getActiveAgents(uint32)\":{\"notice\":\"Returns all active agents for a given domain.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"getLeafs(uint256,uint256)\":{\"notice\":\"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount).\"},\"getProof(address)\":{\"notice\":\"Returns a proof of inclusion of the agent in the Agent Merkle Tree.\"},\"initiateUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains.\"},\"leafsAmount()\":{\"notice\":\"Returns a total amount of leafs representing known agents.\"},\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"notice\":\"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"sensitiveMockFunc(address,uint8,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"sensitiveMockFuncVoid(uint16,bytes4,bytes32)\":{\"notice\":\"Function that should NOT be callable by a Manager Message. Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain.\"},\"slashAgentExposed(uint32,address,address)\":{\"notice\":\"Exposes _slashAgent for testing.\"},\"withdrawTips(address,uint32,uint256)\":{\"notice\":\"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"BondingManagerHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"addAgent(uint32,address,bytes32[])":"237a85a5","agentLeaf(address)":"c99dcb9e","agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","allLeafs()":"12db2ef6","completeSlashing(uint32,address,bytes32[])":"fbc5265e","completeUnstaking(uint32,address,bytes32[])":"4c3e1c1f","destination()":"b269681d","disputeStatus(address)":"3463d1b1","getActiveAgents(uint32)":"c1c0f4f6","getAgent(uint256)":"2de5aaf7","getDispute(uint256)":"e3a96cbd","getDisputesAmount()":"3aaeccc6","getLeafs(uint256,uint256)":"33d1b2e8","getProof(address)":"3eea79d1","inbox()":"fb0e722b","initialize(address,address,address,address)":"f8c8765e","initiateUnstaking(uint32,address,bytes32[])":"130c5673","leafsAmount()":"33c3a8f3","localDomain()":"8d3638f4","multicall((bool,bytes)[])":"60fc8466","openDispute(uint32,uint32)":"a2155c34","origin()":"938b5f32","owner()":"8da5cb5b","remoteMockFunc(uint32,uint256,bytes32)":"a149352c","remoteSlashAgent(uint32,uint256,uint32,address,address)":"9d228a51","renounceOwnership()":"715018a6","resolveStuckDispute(uint32,address)":"89791e17","sensitiveMockFunc(address,uint8,bytes32)":"127a2c9d","sensitiveMockFuncOver32Bytes(uint16,bytes4,bytes32)":"0e6bfcd5","sensitiveMockFuncVoid(uint16,bytes4,bytes32)":"c9f1a03f","slashAgent(uint32,address,address)":"2853a0e6","slashAgentExposed(uint32,address,address)":"69978b0d","summit()":"9fbcb9cb","transferOwnership(address)":"f2fde38b","version()":"54fd4d50","withdrawTips(address,uint32,uint256)":"cc875501"}},"solidity/BondingManagerHarness.t.sol:ContextUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:GasDataLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220454da8b88aae5239844c021feb4aadc952f1363a899e43e9439cbeb8c8c4145264736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220454da8b88aae5239844c021feb4aadc952f1363a899e43e9439cbeb8c8c4145264736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"73263:6891:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;73263:6891:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"73263:6891:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"Library for encoding and decoding GasData and ChainGas structs. # GasData `GasData` is a struct to store the \"basic information about gas prices\", that could be later used to approximate the cost of a message execution, and thus derive the minimal tip values for sending a message to the chain. \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the \u003e approximates instead of the exact values, and thus save on storage costs. \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an \u003e 0.4% error on the approximates would be acceptable. `GasData` is supposed to be included in the Origin's state, which are synced across chains using Agent-signed snapshots and attestations. ## GasData stack layout (from highest bits to lowest) | Position   | Field        | Type   | Bytes | Description                                         | | ---------- | ------------ | ------ | ----- | --------------------------------------------------- | | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       | | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         | | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) | | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  | | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) | | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          | \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math. ## ChainGas stack layout (from highest bits to lowest) | Position   | Field   | Type   | Bytes | Description      | | ---------- | ------- | ------ | ----- | ---------------- | | (016..004] | gasData | uint96 | 12    | Chain's gas data | | (004..000] | domain  | uint32 | 4     | Chain's domain   |","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SHIFT_AMORT_ATT_COST":{"details":"Amount of bits to shift to amortAttCost field"},"SHIFT_DATA_PRICE":{"details":"Amount of bits to shift to dataPrice field"},"SHIFT_ETHER_PRICE":{"details":"Amount of bits to shift to etherPrice field"},"SHIFT_EXEC_BUFFER":{"details":"Amount of bits to shift to execBuffer field"},"SHIFT_GAS_DATA":{"details":"Amount of bits to shift to gasData field"},"SHIFT_GAS_PRICE":{"details":"Amount of bits to shift to gasPrice field"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SHIFT_AMORT_ATT_COST\":{\"details\":\"Amount of bits to shift to amortAttCost field\"},\"SHIFT_DATA_PRICE\":{\"details\":\"Amount of bits to shift to dataPrice field\"},\"SHIFT_ETHER_PRICE\":{\"details\":\"Amount of bits to shift to etherPrice field\"},\"SHIFT_EXEC_BUFFER\":{\"details\":\"Amount of bits to shift to execBuffer field\"},\"SHIFT_GAS_DATA\":{\"details\":\"Amount of bits to shift to gasData field\"},\"SHIFT_GAS_PRICE\":{\"details\":\"Amount of bits to shift to gasPrice field\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for encoding and decoding GasData and ChainGas structs. # GasData `GasData` is a struct to store the \\\"basic information about gas prices\\\", that could be later used to approximate the cost of a message execution, and thus derive the minimal tip values for sending a message to the chain. \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the \u003e approximates instead of the exact values, and thus save on storage costs. \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an \u003e 0.4% error on the approximates would be acceptable. `GasData` is supposed to be included in the Origin's state, which are synced across chains using Agent-signed snapshots and attestations. ## GasData stack layout (from highest bits to lowest) | Position   | Field        | Type   | Bytes | Description                                         | | ---------- | ------------ | ------ | ----- | --------------------------------------------------- | | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       | | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         | | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) | | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  | | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) | | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          | \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math. ## ChainGas stack layout (from highest bits to lowest) | Position   | Field   | Type   | Bytes | Description      | | ---------- | ------- | ------ | ----- | ---------------- | | (016..004] | gasData | uint96 | 12    | Chain's gas data | | (004..000] | domain  | uint32 | 4     | Chain's domain   |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"GasDataLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:IAgentManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"disputeStatus","outputs":[{"internalType":"enum DisputeFlag","name":"flag","type":"uint8"},{"internalType":"address","name":"rival","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"uint256","name":"disputePtr","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getDispute","outputs":[{"internalType":"address","name":"guard","type":"address"},{"internalType":"address","name":"notary","type":"address"},{"internalType":"address","name":"slashedAgent","type":"address"},{"internalType":"address","name":"fraudProver","type":"address"},{"internalType":"bytes","name":"reportPayload","type":"bytes"},{"internalType":"bytes","name":"reportSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getDisputesAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"guardIndex","type":"uint32"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"openDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"slashedAgent","type":"address"}],"name":"resolveStuckDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"slashAgent","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"agentRoot()":{"notice":"Returns the latest known root of the Agent Merkle Tree."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"disputeStatus(address)":{"notice":"Returns the current Dispute status of a given agent. See Structures.sol for details."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"getDispute(uint256)":{"notice":"Returns information about the dispute with the given index."},"getDisputesAmount()":{"notice":"Returns the number of opened Disputes."},"openDispute(uint32,uint32)":{"notice":"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute."},"resolveStuckDispute(uint32,address)":{"notice":"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox."},"slashAgent(uint32,address,address)":{"notice":"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"_0":"Status for the given agent: (flag, domain, index)."}},"disputeStatus(address)":{"details":"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.","params":{"agent":"Agent address"},"returns":{"disputePtr":"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.","flag":"        Flag describing the current Dispute status for the agent: None/Pending/Slashed","fraudProver":" Address who provided fraud proof to resolve the Dispute","rival":"       Address of the rival agent in the Dispute"}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"getDispute(uint256)":{"details":"Will revert if dispute with given index hasn't been opened yet.","params":{"index":"Dispute index"},"returns":{"fraudProver":"     Address who provided fraud proof to resolve the Dispute","guard":"           Address of the Guard in the Dispute","notary":"          Address of the Notary in the Dispute","reportPayload":"   Raw payload with report data that led to the Dispute","reportSignature":" Guard signature for the report payload","slashedAgent":"    Address of the Agent who was slashed when Dispute was resolved"}},"getDisputesAmount()":{"details":"This includes the Disputes that have been resolved already."},"openDispute(uint32,uint32)":{"params":{"guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"resolveStuckDispute(uint32,address)":{"params":{"slashedAgent":"Agent that is being slashed"}},"slashAgent(uint32,address,address)":{"params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","prover":"Address that initially provided fraud proof"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"disputeStatus\",\"outputs\":[{\"internalType\":\"enum DisputeFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"rival\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"disputePtr\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getDispute\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"guard\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fraudProver\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"reportPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisputesAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"slashedAgent\",\"type\":\"address\"}],\"name\":\"resolveStuckDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"slashAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"_0\":\"Status for the given agent: (flag, domain, index).\"}},\"disputeStatus(address)\":{\"details\":\"Every returned value will be set to zero if agent was not slashed and is not in Dispute. `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"disputePtr\":\"  Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\",\"flag\":\"        Flag describing the current Dispute status for the agent: None/Pending/Slashed\",\"fraudProver\":\" Address who provided fraud proof to resolve the Dispute\",\"rival\":\"       Address of the rival agent in the Dispute\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"getDispute(uint256)\":{\"details\":\"Will revert if dispute with given index hasn't been opened yet.\",\"params\":{\"index\":\"Dispute index\"},\"returns\":{\"fraudProver\":\"     Address who provided fraud proof to resolve the Dispute\",\"guard\":\"           Address of the Guard in the Dispute\",\"notary\":\"          Address of the Notary in the Dispute\",\"reportPayload\":\"   Raw payload with report data that led to the Dispute\",\"reportSignature\":\" Guard signature for the report payload\",\"slashedAgent\":\"    Address of the Agent who was slashed when Dispute was resolved\"}},\"getDisputesAmount()\":{\"details\":\"This includes the Disputes that have been resolved already.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"resolveStuckDispute(uint32,address)\":{\"params\":{\"slashedAgent\":\"Agent that is being slashed\"}},\"slashAgent(uint32,address,address)\":{\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"prover\":\"Address that initially provided fraud proof\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"agentRoot()\":{\"notice\":\"Returns the latest known root of the Agent Merkle Tree.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"disputeStatus(address)\":{\"notice\":\"Returns the current Dispute status of a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"getDispute(uint256)\":{\"notice\":\"Returns information about the dispute with the given index.\"},\"getDisputesAmount()\":{\"notice\":\"Returns the number of opened Disputes.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Guard or Notary is already in Dispute.\"},\"resolveStuckDispute(uint32,address)\":{\"notice\":\"Allows contract owner to resolve a stuck Dispute. This could only be called if no fresh data has been submitted by the Notaries to the Inbox, which is required for the Dispute to be resolved naturally. \u003e Will revert if any of these is true: \u003e - Caller is not contract owner. \u003e - Domain doesn't match the saved agent domain. \u003e - `slashedAgent` is not in Dispute. \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\"},\"slashAgent(uint32,address,address)\":{\"notice\":\"Allows Inbox to slash an agent, if their fraud was proven. \u003e Will revert if any of these is true: \u003e - Caller is not Inbox. \u003e - Domain doesn't match the saved agent domain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"IAgentManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"agentRoot()":"36cba43c","agentStatus(address)":"28f3fac9","disputeStatus(address)":"3463d1b1","getAgent(uint256)":"2de5aaf7","getDispute(uint256)":"e3a96cbd","getDisputesAmount()":"3aaeccc6","openDispute(uint32,uint32)":"a2155c34","resolveStuckDispute(uint32,address)":"89791e17","slashAgent(uint32,address,address)":"2853a0e6"}},"solidity/BondingManagerHarness.t.sol:IAgentSecured":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"agentManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentStatus","outputs":[{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAgent","outputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"inbox","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"guardIndex","type":"uint32"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"name":"openDispute","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"slashedIndex","type":"uint32"},{"internalType":"uint32","name":"rivalIndex","type":"uint32"}],"name":"resolveDispute","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"agentManager()":{"notice":"Returns the address of the local AgentManager contract, which is treated as the \"source of truth\" for agent statuses."},"agentStatus(address)":{"notice":"Returns (flag, domain, index) for a given agent. See Structures.sol for details."},"getAgent(uint256)":{"notice":"Returns agent address and their current status for a given agent index."},"inbox()":{"notice":"Returns the address of the local Inbox contract, which is treated as the \"source of truth\" for agent-signed statements."},"openDispute(uint32,uint32)":{"notice":"Local AgentManager should call this function to indicate that a dispute between a Guard and a Notary has been opened."},"resolveDispute(uint32,uint32)":{"notice":"Local AgentManager should call this function to indicate that a dispute has been resolved due to one of the agents being slashed. \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute."}},"version":1},"developerDoc":{"kind":"dev","methods":{"agentStatus(address)":{"details":"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.","params":{"agent":"Agent address"},"returns":{"_0":"Status for the given agent: (flag, domain, index)."}},"getAgent(uint256)":{"details":"Will return empty values if agent with given index doesn't exist.","params":{"index":"Agent index in the Agent Merkle Tree"},"returns":{"agent":"   Agent address","status":"  Status for the given agent: (flag, domain, index)"}},"inbox()":{"details":"Inbox passes verified agent statements to `IAgentSecured` contract."},"openDispute(uint32,uint32)":{"params":{"guardIndex":"Index of the Guard in the Agent Merkle Tree","notaryIndex":"Index of the Notary in the Agent Merkle Tree"}},"resolveDispute(uint32,uint32)":{"params":{"rivalIndex":"Index of the their Dispute Rival in the Agent Merkle Tree","slashedIndex":"Index of the slashed agent in the Agent Merkle Tree"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"agentManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentStatus\",\"outputs\":[{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAgent\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"inbox\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"guardIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"name\":\"openDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"slashedIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"rivalIndex\",\"type\":\"uint32\"}],\"name\":\"resolveDispute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"agentStatus(address)\":{\"details\":\"Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud, but their status is not updated to Slashed yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"_0\":\"Status for the given agent: (flag, domain, index).\"}},\"getAgent(uint256)\":{\"details\":\"Will return empty values if agent with given index doesn't exist.\",\"params\":{\"index\":\"Agent index in the Agent Merkle Tree\"},\"returns\":{\"agent\":\"   Agent address\",\"status\":\"  Status for the given agent: (flag, domain, index)\"}},\"inbox()\":{\"details\":\"Inbox passes verified agent statements to `IAgentSecured` contract.\"},\"openDispute(uint32,uint32)\":{\"params\":{\"guardIndex\":\"Index of the Guard in the Agent Merkle Tree\",\"notaryIndex\":\"Index of the Notary in the Agent Merkle Tree\"}},\"resolveDispute(uint32,uint32)\":{\"params\":{\"rivalIndex\":\"Index of the their Dispute Rival in the Agent Merkle Tree\",\"slashedIndex\":\"Index of the slashed agent in the Agent Merkle Tree\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"agentManager()\":{\"notice\":\"Returns the address of the local AgentManager contract, which is treated as the \\\"source of truth\\\" for agent statuses.\"},\"agentStatus(address)\":{\"notice\":\"Returns (flag, domain, index) for a given agent. See Structures.sol for details.\"},\"getAgent(uint256)\":{\"notice\":\"Returns agent address and their current status for a given agent index.\"},\"inbox()\":{\"notice\":\"Returns the address of the local Inbox contract, which is treated as the \\\"source of truth\\\" for agent-signed statements.\"},\"openDispute(uint32,uint32)\":{\"notice\":\"Local AgentManager should call this function to indicate that a dispute between a Guard and a Notary has been opened.\"},\"resolveDispute(uint32,uint32)\":{\"notice\":\"Local AgentManager should call this function to indicate that a dispute has been resolved due to one of the agents being slashed. \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"IAgentSecured\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"agentManager()":"7622f78d","agentStatus(address)":"28f3fac9","getAgent(uint256)":"2de5aaf7","inbox()":"fb0e722b","openDispute(uint32,uint32)":"a2155c34","resolveDispute(uint32,uint32)":"61169218"}},"solidity/BondingManagerHarness.t.sol:IStatementInbox":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getGuardReport","outputs":[{"internalType":"bytes","name":"statementPayload","type":"bytes"},{"internalType":"bytes","name":"reportSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"getReportsAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getStoredSignature","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"stateIndex","type":"uint256"},{"internalType":"bytes","name":"srSignature","type":"bytes"},{"internalType":"bytes","name":"snapPayload","type":"bytes"},{"internalType":"bytes","name":"attPayload","type":"bytes"},{"internalType":"bytes","name":"attSignature","type":"bytes"}],"name":"submitStateReportWithAttestation","outputs":[{"internalType":"bool","name":"wasAccepted","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stateIndex","type":"uint256"},{"internalType":"bytes","name":"srSignature","type":"bytes"},{"internalType":"bytes","name":"snapPayload","type":"bytes"},{"internalType":"bytes","name":"snapSignature","type":"bytes"}],"name":"submitStateReportWithSnapshot","outputs":[{"internalType":"bool","name":"wasAccepted","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stateIndex","type":"uint256"},{"internalType":"bytes","name":"statePayload","type":"bytes"},{"internalType":"bytes","name":"srSignature","type":"bytes"},{"internalType":"bytes32[]","name":"snapProof","type":"bytes32[]"},{"internalType":"bytes","name":"attPayload","type":"bytes"},{"internalType":"bytes","name":"attSignature","type":"bytes"}],"name":"submitStateReportWithSnapshotProof","outputs":[{"internalType":"bool","name":"wasAccepted","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"rcptPayload","type":"bytes"},{"internalType":"bytes","name":"rcptSignature","type":"bytes"}],"name":"verifyReceipt","outputs":[{"internalType":"bool","name":"isValidReceipt","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"rcptPayload","type":"bytes"},{"internalType":"bytes","name":"rrSignature","type":"bytes"}],"name":"verifyReceiptReport","outputs":[{"internalType":"bool","name":"isValidReport","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes","name":"statePayload","type":"bytes"},{"internalType":"bytes","name":"srSignature","type":"bytes"}],"name":"verifyStateReport","outputs":[{"internalType":"bool","name":"isValidReport","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stateIndex","type":"uint256"},{"internalType":"bytes","name":"snapPayload","type":"bytes"},{"internalType":"bytes","name":"attPayload","type":"bytes"},{"internalType":"bytes","name":"attSignature","type":"bytes"}],"name":"verifyStateWithAttestation","outputs":[{"internalType":"bool","name":"isValidState","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stateIndex","type":"uint256"},{"internalType":"bytes","name":"snapPayload","type":"bytes"},{"internalType":"bytes","name":"snapSignature","type":"bytes"}],"name":"verifyStateWithSnapshot","outputs":[{"internalType":"bool","name":"isValidState","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"stateIndex","type":"uint256"},{"internalType":"bytes","name":"statePayload","type":"bytes"},{"internalType":"bytes32[]","name":"snapProof","type":"bytes32[]"},{"internalType":"bytes","name":"attPayload","type":"bytes"},{"internalType":"bytes","name":"attSignature","type":"bytes"}],"name":"verifyStateWithSnapshotProof","outputs":[{"internalType":"bool","name":"isValidState","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getGuardReport(uint256)":{"notice":"Returns the Guard report with the given index stored in StatementInbox. \u003e Only reports that led to opening a Dispute are stored."},"getReportsAmount()":{"notice":"Returns the amount of Guard Reports stored in StatementInbox. \u003e Only reports that led to opening a Dispute are stored."},"getStoredSignature(uint256)":{"notice":"Returns the signature with the given index stored in StatementInbox."},"submitStateReportWithAttestation(uint256,bytes,bytes,bytes,bytes)":{"notice":"Accepts a Guard's state report signature, a Snapshot containing the reported State, as well as Notary signature for the Attestation created from this Snapshot. \u003e StateReport is a Guard statement saying \"Reported state is invalid\". - This results in an opened Dispute between the Guard and the Notary. - Note: Guard could (but doesn't have to) form a StateReport and use other values from `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin. \u003e Will revert if any of these is true: \u003e - State Report signer is not an active Guard. \u003e - Snapshot payload is not properly formatted. \u003e - State index is out of range. \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot. \u003e - The Guard or the Notary are already in a Dispute"},"submitStateReportWithSnapshot(uint256,bytes,bytes,bytes)":{"notice":"Accepts a Guard's state report signature, a Snapshot containing the reported State, as well as Notary signature for the Snapshot. \u003e StateReport is a Guard statement saying \"Reported state is invalid\". - This results in an opened Dispute between the Guard and the Notary. - Note: Guard could (but doesn't have to) form a StateReport and use other values from `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin. \u003e Will revert if any of these is true: \u003e - State Report signer is not an active Guard. \u003e - Snapshot payload is not properly formatted. \u003e - Snapshot signer is not an active Notary. \u003e - State index is out of range. \u003e - The Guard or the Notary are already in a Dispute"},"submitStateReportWithSnapshotProof(uint256,bytes,bytes,bytes32[],bytes,bytes)":{"notice":"Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation, as well as Notary signature for the Attestation. \u003e StateReport is a Guard statement saying \"Reported state is invalid\". - This results in an opened Dispute between the Guard and the Notary. - Note: Guard could (but doesn't have to) form a StateReport and use other values from `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin. \u003e Will revert if any of these is true: \u003e - State payload is not properly formatted. \u003e - State Report signer is not an active Guard. \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof. \u003e - Snapshot Proof's first element does not match the State metadata. \u003e - Snapshot Proof length exceeds Snapshot Tree Height. \u003e - State index is out of range. \u003e - The Guard or the Notary are already in a Dispute"},"verifyReceipt(bytes,bytes)":{"notice":"Verifies a message receipt signed by the Notary. - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message). - Slashes the Notary, if the receipt is invalid. \u003e Will revert if any of these is true: \u003e - Receipt payload is not properly formatted. \u003e - Receipt signer is not an active Notary. \u003e - Receipt's destination chain does not refer to this chain."},"verifyReceiptReport(bytes,bytes)":{"notice":"Verifies a Guard's receipt report signature. - Does nothing, if the report is valid (if the reported receipt is invalid). - Slashes the Guard, if the report is invalid (if the reported receipt is valid). \u003e Will revert if any of these is true: \u003e - Receipt payload is not properly formatted. \u003e - Receipt Report signer is not an active Guard. \u003e - Receipt does not refer to this chain."},"verifyStateReport(bytes,bytes)":{"notice":"Verifies a Guard's state report signature.  - Does nothing, if the report is valid (if the reported state is invalid).  - Slashes the Guard, if the report is invalid (if the reported state is valid). \u003e Will revert if any of these is true: \u003e - State payload is not properly formatted. \u003e - State Report signer is not an active Guard. \u003e - Reported State does not refer to this chain."},"verifyStateWithAttestation(uint256,bytes,bytes,bytes)":{"notice":"Verifies a state from the snapshot, that was used for the Notary-signed attestation. - Does nothing, if the state is valid (matches the historical state of this contract). - Slashes the Notary, if the state is invalid. \u003e Will revert if any of these is true: \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot. \u003e - Snapshot payload is not properly formatted. \u003e - State index is out of range. \u003e - State does not refer to this chain."},"verifyStateWithSnapshot(uint256,bytes,bytes)":{"notice":"Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary. - Does nothing, if the state is valid (matches the historical state of this contract). - Slashes the Agent, if the state is invalid. \u003e Will revert if any of these is true: \u003e - Snapshot payload is not properly formatted. \u003e - Snapshot signer is not an active Agent. \u003e - State index is out of range. \u003e - State does not refer to this chain."},"verifyStateWithSnapshotProof(uint256,bytes,bytes32[],bytes,bytes)":{"notice":"Verifies a state from the snapshot, that was used for the Notary-signed attestation. - Does nothing, if the state is valid (matches the historical state of this contract). - Slashes the Notary, if the state is invalid. \u003e Will revert if any of these is true: \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof. \u003e - Snapshot Proof's first element does not match the State metadata. \u003e - Snapshot Proof length exceeds Snapshot Tree Height. \u003e - State payload is not properly formatted. \u003e - State index is out of range. \u003e - State does not refer to this chain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getGuardReport(uint256)":{"details":"Will revert if report with given index doesn't exist.","params":{"index":"Report index"},"returns":{"reportSignature":" Guard signature for the report","statementPayload":"Raw payload with statement that Guard reported as invalid"}},"getStoredSignature(uint256)":{"details":"Will revert if signature with given index doesn't exist.","params":{"index":"Signature index"},"returns":{"_0":"Raw payload with signature"}},"submitStateReportWithAttestation(uint256,bytes,bytes,bytes,bytes)":{"params":{"attPayload":"Raw payload with Attestation data","attSignature":"Notary signature for the Attestation","snapPayload":"Raw payload with Snapshot data","srSignature":"Guard signature for the report","stateIndex":"Index of the reported State in the Snapshot"},"returns":{"wasAccepted":"     Whether the Report was accepted (resulting in Dispute between the agents)"}},"submitStateReportWithSnapshot(uint256,bytes,bytes,bytes)":{"params":{"snapPayload":"Raw payload with Snapshot data","snapSignature":"Notary signature for the Snapshot","srSignature":"Guard signature for the report","stateIndex":"Index of the reported State in the Snapshot"},"returns":{"wasAccepted":"     Whether the Report was accepted (resulting in Dispute between the agents)"}},"submitStateReportWithSnapshotProof(uint256,bytes,bytes,bytes32[],bytes,bytes)":{"params":{"attPayload":"Raw payload with Attestation data","attSignature":"Notary signature for the Attestation","snapProof":"Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree","srSignature":"Guard signature for the report","stateIndex":"Index of the reported State in the Snapshot","statePayload":"Raw payload with State data that Guard reports as invalid"},"returns":{"wasAccepted":"     Whether the Report was accepted (resulting in Dispute between the agents)"}},"verifyReceipt(bytes,bytes)":{"params":{"rcptPayload":"Raw payload with Receipt data","rcptSignature":"Notary signature for the receipt"},"returns":{"isValidReceipt":"  Whether the provided receipt is valid.                          Notary is slashed, if return value is FALSE."}},"verifyReceiptReport(bytes,bytes)":{"params":{"rcptPayload":"Raw payload with Receipt data that Guard reports as invalid","rrSignature":"Guard signature for the report"},"returns":{"isValidReport":"   Whether the provided report is valid.                          Guard is slashed, if return value is FALSE."}},"verifyStateReport(bytes,bytes)":{"params":{"srSignature":"Guard signature for the report","statePayload":"Raw payload with State data that Guard reports as invalid"},"returns":{"isValidReport":"   Whether the provided report is valid.                          Guard is slashed, if return value is FALSE."}},"verifyStateWithAttestation(uint256,bytes,bytes,bytes)":{"params":{"attPayload":"Raw payload with Attestation data","attSignature":"Notary signature for the attestation","snapPayload":"Raw payload with snapshot data","stateIndex":"State index to check"},"returns":{"isValidState":"    Whether the provided state is valid.                          Notary is slashed, if return value is FALSE."}},"verifyStateWithSnapshot(uint256,bytes,bytes)":{"params":{"snapPayload":"Raw payload with snapshot data","snapSignature":"Agent signature for the snapshot","stateIndex":"State index to check"},"returns":{"isValidState":"    Whether the provided state is valid.                          Agent is slashed, if return value is FALSE."}},"verifyStateWithSnapshotProof(uint256,bytes,bytes32[],bytes,bytes)":{"params":{"attPayload":"Raw payload with Attestation data","attSignature":"Notary signature for the attestation","snapProof":"Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree","stateIndex":"Index of state in the snapshot","statePayload":"Raw payload with State data to check"},"returns":{"isValidState":"    Whether the provided state is valid.                          Notary is slashed, if return value is FALSE."}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getGuardReport\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"statementPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"reportSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReportsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStoredSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"srSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"snapPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"name\":\"submitStateReportWithAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAccepted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"srSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"snapPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"snapSignature\",\"type\":\"bytes\"}],\"name\":\"submitStateReportWithSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAccepted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"statePayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"srSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"snapProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"name\":\"submitStateReportWithSnapshotProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAccepted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rcptPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rcptSignature\",\"type\":\"bytes\"}],\"name\":\"verifyReceipt\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidReceipt\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rcptPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"rrSignature\",\"type\":\"bytes\"}],\"name\":\"verifyReceiptReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidReport\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"statePayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"srSignature\",\"type\":\"bytes\"}],\"name\":\"verifyStateReport\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidReport\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"snapPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"name\":\"verifyStateWithAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidState\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"snapPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"snapSignature\",\"type\":\"bytes\"}],\"name\":\"verifyStateWithSnapshot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidState\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"stateIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"statePayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32[]\",\"name\":\"snapProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"name\":\"verifyStateWithSnapshotProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isValidState\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getGuardReport(uint256)\":{\"details\":\"Will revert if report with given index doesn't exist.\",\"params\":{\"index\":\"Report index\"},\"returns\":{\"reportSignature\":\" Guard signature for the report\",\"statementPayload\":\"Raw payload with statement that Guard reported as invalid\"}},\"getStoredSignature(uint256)\":{\"details\":\"Will revert if signature with given index doesn't exist.\",\"params\":{\"index\":\"Signature index\"},\"returns\":{\"_0\":\"Raw payload with signature\"}},\"submitStateReportWithAttestation(uint256,bytes,bytes,bytes,bytes)\":{\"params\":{\"attPayload\":\"Raw payload with Attestation data\",\"attSignature\":\"Notary signature for the Attestation\",\"snapPayload\":\"Raw payload with Snapshot data\",\"srSignature\":\"Guard signature for the report\",\"stateIndex\":\"Index of the reported State in the Snapshot\"},\"returns\":{\"wasAccepted\":\"     Whether the Report was accepted (resulting in Dispute between the agents)\"}},\"submitStateReportWithSnapshot(uint256,bytes,bytes,bytes)\":{\"params\":{\"snapPayload\":\"Raw payload with Snapshot data\",\"snapSignature\":\"Notary signature for the Snapshot\",\"srSignature\":\"Guard signature for the report\",\"stateIndex\":\"Index of the reported State in the Snapshot\"},\"returns\":{\"wasAccepted\":\"     Whether the Report was accepted (resulting in Dispute between the agents)\"}},\"submitStateReportWithSnapshotProof(uint256,bytes,bytes,bytes32[],bytes,bytes)\":{\"params\":{\"attPayload\":\"Raw payload with Attestation data\",\"attSignature\":\"Notary signature for the Attestation\",\"snapProof\":\"Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\",\"srSignature\":\"Guard signature for the report\",\"stateIndex\":\"Index of the reported State in the Snapshot\",\"statePayload\":\"Raw payload with State data that Guard reports as invalid\"},\"returns\":{\"wasAccepted\":\"     Whether the Report was accepted (resulting in Dispute between the agents)\"}},\"verifyReceipt(bytes,bytes)\":{\"params\":{\"rcptPayload\":\"Raw payload with Receipt data\",\"rcptSignature\":\"Notary signature for the receipt\"},\"returns\":{\"isValidReceipt\":\"  Whether the provided receipt is valid.                          Notary is slashed, if return value is FALSE.\"}},\"verifyReceiptReport(bytes,bytes)\":{\"params\":{\"rcptPayload\":\"Raw payload with Receipt data that Guard reports as invalid\",\"rrSignature\":\"Guard signature for the report\"},\"returns\":{\"isValidReport\":\"   Whether the provided report is valid.                          Guard is slashed, if return value is FALSE.\"}},\"verifyStateReport(bytes,bytes)\":{\"params\":{\"srSignature\":\"Guard signature for the report\",\"statePayload\":\"Raw payload with State data that Guard reports as invalid\"},\"returns\":{\"isValidReport\":\"   Whether the provided report is valid.                          Guard is slashed, if return value is FALSE.\"}},\"verifyStateWithAttestation(uint256,bytes,bytes,bytes)\":{\"params\":{\"attPayload\":\"Raw payload with Attestation data\",\"attSignature\":\"Notary signature for the attestation\",\"snapPayload\":\"Raw payload with snapshot data\",\"stateIndex\":\"State index to check\"},\"returns\":{\"isValidState\":\"    Whether the provided state is valid.                          Notary is slashed, if return value is FALSE.\"}},\"verifyStateWithSnapshot(uint256,bytes,bytes)\":{\"params\":{\"snapPayload\":\"Raw payload with snapshot data\",\"snapSignature\":\"Agent signature for the snapshot\",\"stateIndex\":\"State index to check\"},\"returns\":{\"isValidState\":\"    Whether the provided state is valid.                          Agent is slashed, if return value is FALSE.\"}},\"verifyStateWithSnapshotProof(uint256,bytes,bytes32[],bytes,bytes)\":{\"params\":{\"attPayload\":\"Raw payload with Attestation data\",\"attSignature\":\"Notary signature for the attestation\",\"snapProof\":\"Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\",\"stateIndex\":\"Index of state in the snapshot\",\"statePayload\":\"Raw payload with State data to check\"},\"returns\":{\"isValidState\":\"    Whether the provided state is valid.                          Notary is slashed, if return value is FALSE.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getGuardReport(uint256)\":{\"notice\":\"Returns the Guard report with the given index stored in StatementInbox. \u003e Only reports that led to opening a Dispute are stored.\"},\"getReportsAmount()\":{\"notice\":\"Returns the amount of Guard Reports stored in StatementInbox. \u003e Only reports that led to opening a Dispute are stored.\"},\"getStoredSignature(uint256)\":{\"notice\":\"Returns the signature with the given index stored in StatementInbox.\"},\"submitStateReportWithAttestation(uint256,bytes,bytes,bytes,bytes)\":{\"notice\":\"Accepts a Guard's state report signature, a Snapshot containing the reported State, as well as Notary signature for the Attestation created from this Snapshot. \u003e StateReport is a Guard statement saying \\\"Reported state is invalid\\\". - This results in an opened Dispute between the Guard and the Notary. - Note: Guard could (but doesn't have to) form a StateReport and use other values from `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin. \u003e Will revert if any of these is true: \u003e - State Report signer is not an active Guard. \u003e - Snapshot payload is not properly formatted. \u003e - State index is out of range. \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot. \u003e - The Guard or the Notary are already in a Dispute\"},\"submitStateReportWithSnapshot(uint256,bytes,bytes,bytes)\":{\"notice\":\"Accepts a Guard's state report signature, a Snapshot containing the reported State, as well as Notary signature for the Snapshot. \u003e StateReport is a Guard statement saying \\\"Reported state is invalid\\\". - This results in an opened Dispute between the Guard and the Notary. - Note: Guard could (but doesn't have to) form a StateReport and use other values from `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin. \u003e Will revert if any of these is true: \u003e - State Report signer is not an active Guard. \u003e - Snapshot payload is not properly formatted. \u003e - Snapshot signer is not an active Notary. \u003e - State index is out of range. \u003e - The Guard or the Notary are already in a Dispute\"},\"submitStateReportWithSnapshotProof(uint256,bytes,bytes,bytes32[],bytes,bytes)\":{\"notice\":\"Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation, as well as Notary signature for the Attestation. \u003e StateReport is a Guard statement saying \\\"Reported state is invalid\\\". - This results in an opened Dispute between the Guard and the Notary. - Note: Guard could (but doesn't have to) form a StateReport and use other values from `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin. \u003e Will revert if any of these is true: \u003e - State payload is not properly formatted. \u003e - State Report signer is not an active Guard. \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof. \u003e - Snapshot Proof's first element does not match the State metadata. \u003e - Snapshot Proof length exceeds Snapshot Tree Height. \u003e - State index is out of range. \u003e - The Guard or the Notary are already in a Dispute\"},\"verifyReceipt(bytes,bytes)\":{\"notice\":\"Verifies a message receipt signed by the Notary. - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message). - Slashes the Notary, if the receipt is invalid. \u003e Will revert if any of these is true: \u003e - Receipt payload is not properly formatted. \u003e - Receipt signer is not an active Notary. \u003e - Receipt's destination chain does not refer to this chain.\"},\"verifyReceiptReport(bytes,bytes)\":{\"notice\":\"Verifies a Guard's receipt report signature. - Does nothing, if the report is valid (if the reported receipt is invalid). - Slashes the Guard, if the report is invalid (if the reported receipt is valid). \u003e Will revert if any of these is true: \u003e - Receipt payload is not properly formatted. \u003e - Receipt Report signer is not an active Guard. \u003e - Receipt does not refer to this chain.\"},\"verifyStateReport(bytes,bytes)\":{\"notice\":\"Verifies a Guard's state report signature.  - Does nothing, if the report is valid (if the reported state is invalid).  - Slashes the Guard, if the report is invalid (if the reported state is valid). \u003e Will revert if any of these is true: \u003e - State payload is not properly formatted. \u003e - State Report signer is not an active Guard. \u003e - Reported State does not refer to this chain.\"},\"verifyStateWithAttestation(uint256,bytes,bytes,bytes)\":{\"notice\":\"Verifies a state from the snapshot, that was used for the Notary-signed attestation. - Does nothing, if the state is valid (matches the historical state of this contract). - Slashes the Notary, if the state is invalid. \u003e Will revert if any of these is true: \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot. \u003e - Snapshot payload is not properly formatted. \u003e - State index is out of range. \u003e - State does not refer to this chain.\"},\"verifyStateWithSnapshot(uint256,bytes,bytes)\":{\"notice\":\"Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary. - Does nothing, if the state is valid (matches the historical state of this contract). - Slashes the Agent, if the state is invalid. \u003e Will revert if any of these is true: \u003e - Snapshot payload is not properly formatted. \u003e - Snapshot signer is not an active Agent. \u003e - State index is out of range. \u003e - State does not refer to this chain.\"},\"verifyStateWithSnapshotProof(uint256,bytes,bytes32[],bytes,bytes)\":{\"notice\":\"Verifies a state from the snapshot, that was used for the Notary-signed attestation. - Does nothing, if the state is valid (matches the historical state of this contract). - Slashes the Notary, if the state is invalid. \u003e Will revert if any of these is true: \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is not an active Notary. \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof. \u003e - Snapshot Proof's first element does not match the State metadata. \u003e - Snapshot Proof length exceeds Snapshot Tree Height. \u003e - State payload is not properly formatted. \u003e - State index is out of range. \u003e - State does not refer to this chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"IStatementInbox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"getGuardReport(uint256)":"c495912b","getReportsAmount()":"756ed01d","getStoredSignature(uint256)":"ddeffa66","submitStateReportWithAttestation(uint256,bytes,bytes,bytes,bytes)":"0b6b985c","submitStateReportWithSnapshot(uint256,bytes,bytes,bytes)":"62389709","submitStateReportWithSnapshotProof(uint256,bytes,bytes,bytes32[],bytes,bytes)":"0db27e77","verifyReceipt(bytes,bytes)":"c25aa585","verifyReceiptReport(bytes,bytes)":"91af2e5d","verifyStateReport(bytes,bytes)":"dfe39675","verifyStateWithAttestation(uint256,bytes,bytes,bytes)":"200f6b66","verifyStateWithSnapshot(uint256,bytes,bytes)":"213a6ddb","verifyStateWithSnapshotProof(uint256,bytes,bytes32[],bytes,bytes)":"7be8e738"}},"solidity/BondingManagerHarness.t.sol:Initializable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"custom:oz-upgrades-unsafe-allow":"constructor constructor() {     _disableInitializers(); } ``` ====","details":"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```","events":{"Initialized(uint8)":{"details":"Triggered when the contract has been initialized or reinitialized."}},"kind":"dev","methods":{},"stateVariables":{"_initialized":{"custom:oz-retyped-from":"bool","details":"Indicates that the contract has been initialized."},"_initializing":{"details":"Indicates that the contract is in the process of being initialized."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ``` contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"events\":{\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_initialized\":{\"custom:oz-retyped-from\":\"bool\",\"details\":\"Indicates that the contract has been initialized.\"},\"_initializing\":{\"details\":\"Indicates that the contract is in the process of being initialized.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:InterfaceBondingManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"addAgent","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"agentLeaf","outputs":[{"internalType":"bytes32","name":"leaf","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"allLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeSlashing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"completeUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"name":"getActiveAgents","outputs":[{"internalType":"address[]","name":"agents","type":"address[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"indexFrom","type":"uint256"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"getLeafs","outputs":[{"internalType":"bytes32[]","name":"leafs","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"}],"name":"getProof","outputs":[{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"initiateUnstaking","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"leafsAmount","outputs":[{"internalType":"uint256","name":"amount","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"msgOrigin","type":"uint32"},{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"address","name":"agent","type":"address"},{"internalType":"address","name":"prover","type":"address"}],"name":"remoteSlashAgent","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint32","name":"origin","type":"uint32"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTips","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"addAgent(uint32,address,bytes32[])":{"notice":"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting)."},"agentLeaf(address)":{"notice":"Returns a leaf representing the current status of agent in the Agent Merkle Tree."},"allLeafs()":{"notice":"Returns a full list of leafs from the Agent Merkle Tree."},"completeSlashing(uint32,address,bytes32[])":{"notice":"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root."},"completeUnstaking(uint32,address,bytes32[])":{"notice":"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains."},"getActiveAgents(uint32)":{"notice":"Returns all active agents for a given domain."},"getLeafs(uint256,uint256)":{"notice":"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount)."},"getProof(address)":{"notice":"Returns a proof of inclusion of the agent in the Agent Merkle Tree."},"initiateUnstaking(uint32,address,bytes32[])":{"notice":"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains."},"leafsAmount()":{"notice":"Returns a total amount of leafs representing known agents."},"remoteSlashAgent(uint32,uint256,uint32,address,address)":{"notice":"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain."},"withdrawTips(address,uint32,uint256)":{"notice":"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain."}},"version":1},"developerDoc":{"kind":"dev","methods":{"addAgent(uint32,address,bytes32[])":{"details":"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent will be active","proof":"Merkle proof of the Inactive/Resting status for the agent"}},"agentLeaf(address)":{"details":"Will return an empty leaf, if agent is not added to the tree yet.","params":{"agent":"Agent address"},"returns":{"leaf":"    Agent leaf in the Agent Merkle Tree"}},"allLeafs()":{"details":"This might consume a lot of gas, do not use this on-chain."},"completeSlashing(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the active/unstaking status for the agent"}},"completeUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent was active","proof":"Merkle proof of the unstaking status for the agent"}},"getActiveAgents(uint32)":{"params":{"agents":"List of active agents for the domain","domain":"Domain to get agents from (ZERO for Guards)"}},"getLeafs(uint256,uint256)":{"details":"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount"},"getProof(address)":{"details":"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.","params":{"agent":"Agent address"},"returns":{"proof":"   Merkle proof for the agent"}},"initiateUnstaking(uint32,address,bytes32[])":{"details":"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.","params":{"agent":"Address of the Agent","domain":"Domain where the Agent is active","proof":"Merkle proof of the Active status for the agent"}},"leafsAmount()":{"details":"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry."},"remoteSlashAgent(uint32,uint256,uint32,address,address)":{"details":"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \"remote\" function was called when executing a manager message.","params":{"agent":"Address of the slashed Agent","domain":"Domain where the slashed agent was active","prover":"Address that initially provided fraud proof to remote AgentManager"},"returns":{"magicValue":"  Selector of this function"}},"withdrawTips(address,uint32,uint256)":{"details":"Could only be called by the Summit contract.","params":{"amount":"Tips value to withdraw","origin":"Domain where tips need to be withdrawn","recipient":"Address to withdraw tips to"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"addAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"agentLeaf\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeSlashing\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"completeUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getActiveAgents\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"agents\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"indexFrom\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getLeafs\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"leafs\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"getProof\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"initiateUnstaking\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leafsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"msgOrigin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"prover\",\"type\":\"address\"}],\"name\":\"remoteSlashAgent\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"origin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"details\":\"Inactive: `proof` should be the proof of inclusion of an empty leaf having index following the last added agent in the tree.Resting: `proof` should be the proof of inclusion of the agent leaf with Resting flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent will be active\",\"proof\":\"Merkle proof of the Inactive/Resting status for the agent\"}},\"agentLeaf(address)\":{\"details\":\"Will return an empty leaf, if agent is not added to the tree yet.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"leaf\":\"    Agent leaf in the Agent Merkle Tree\"}},\"allLeafs()\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active/Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the active/unstaking status for the agent\"}},\"completeUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Unstaking flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent was active\",\"proof\":\"Merkle proof of the unstaking status for the agent\"}},\"getActiveAgents(uint32)\":{\"params\":{\"agents\":\"List of active agents for the domain\",\"domain\":\"Domain to get agents from (ZERO for Guards)\"}},\"getLeafs(uint256,uint256)\":{\"details\":\"This might consume a lot of gas, do not use this on-chain.Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\"},\"getProof(address)\":{\"details\":\"Will return a proof for an empty leaf, if agent is not added to the tree yet. This proof could be used by ANY next new agent that calls {addAgent}.This WILL consume a lot of gas, do not use this on-chain.The alternative way to create a proof is to fetch the full list of leafs using either {allLeafs} or {getLeafs}, and create a merkle proof from that.\",\"params\":{\"agent\":\"Agent address\"},\"returns\":{\"proof\":\"   Merkle proof for the agent\"}},\"initiateUnstaking(uint32,address,bytes32[])\":{\"details\":\"`proof` should be the proof of inclusion of the agent leaf with Active flag having index previously assigned to the agent.\",\"params\":{\"agent\":\"Address of the Agent\",\"domain\":\"Domain where the Agent is active\",\"proof\":\"Merkle proof of the Active status for the agent\"}},\"leafsAmount()\":{\"details\":\"This includes active, unstaking, resting and slashed agents. This also includes an empty leaf as the very first entry.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"details\":\"This initiates the process of agent slashing. It could be immediately completed by anyone calling completeSlashing() providing a correct merkle proof for the OLD agent status. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \\\"remote\\\" function was called when executing a manager message.\",\"params\":{\"agent\":\"Address of the slashed Agent\",\"domain\":\"Domain where the slashed agent was active\",\"prover\":\"Address that initially provided fraud proof to remote AgentManager\"},\"returns\":{\"magicValue\":\"  Selector of this function\"}},\"withdrawTips(address,uint32,uint256)\":{\"details\":\"Could only be called by the Summit contract.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"origin\":\"Domain where tips need to be withdrawn\",\"recipient\":\"Address to withdraw tips to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAgent(uint32,address,bytes32[])\":{\"notice\":\"Adds a new agent for the domain. This is either a fresh address (Inactive), or an agent who used to be active on the same domain before (Resting).\"},\"agentLeaf(address)\":{\"notice\":\"Returns a leaf representing the current status of agent in the Agent Merkle Tree.\"},\"allLeafs()\":{\"notice\":\"Returns a full list of leafs from the Agent Merkle Tree.\"},\"completeSlashing(uint32,address,bytes32[])\":{\"notice\":\"Completes the slashing of the agent bond. Agent signature is no longer considered valid under the updated Agent Merkle Root.\"},\"completeUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Completes the unstaking of the agent bond. Agent signature is no longer considered valid on any of the chains.\"},\"getActiveAgents(uint32)\":{\"notice\":\"Returns all active agents for a given domain.\"},\"getLeafs(uint256,uint256)\":{\"notice\":\"Returns a list of leafs from the Agent Merkle Tree with indexes [indexFrom .. indexFrom + amount).\"},\"getProof(address)\":{\"notice\":\"Returns a proof of inclusion of the agent in the Agent Merkle Tree.\"},\"initiateUnstaking(uint32,address,bytes32[])\":{\"notice\":\"Initiates the unstaking of the agent bond. Agent signature is immediately no longer considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager updates their agent merkle root on these chains.\"},\"leafsAmount()\":{\"notice\":\"Returns a total amount of leafs representing known agents.\"},\"remoteSlashAgent(uint32,uint256,uint32,address,address)\":{\"notice\":\"Remote AgentManager should call this function to indicate that the agent has been proven to commit fraud on the origin chain.\"},\"withdrawTips(address,uint32,uint256)\":{\"notice\":\"Withdraws locked base message tips from requested domain Origin to the recipient. Issues a call to a local Origin contract, or sends a manager message to the remote chain.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"InterfaceBondingManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"addAgent(uint32,address,bytes32[])":"237a85a5","agentLeaf(address)":"c99dcb9e","allLeafs()":"12db2ef6","completeSlashing(uint32,address,bytes32[])":"fbc5265e","completeUnstaking(uint32,address,bytes32[])":"4c3e1c1f","getActiveAgents(uint32)":"c1c0f4f6","getLeafs(uint256,uint256)":"33d1b2e8","getProof(address)":"3eea79d1","initiateUnstaking(uint32,address,bytes32[])":"130c5673","leafsAmount()":"33c3a8f3","remoteSlashAgent(uint32,uint256,uint32,address,address)":"9d228a51","withdrawTips(address,uint32,uint256)":"cc875501"}},"solidity/BondingManagerHarness.t.sol:InterfaceDestination":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"notaryIndex","type":"uint32"},{"internalType":"uint256","name":"sigIndex","type":"uint256"},{"internalType":"bytes","name":"attPayload","type":"bytes"},{"internalType":"bytes32","name":"agentRoot","type":"bytes32"},{"internalType":"ChainGas[]","name":"snapGas","type":"uint128[]"}],"name":"acceptAttestation","outputs":[{"internalType":"bool","name":"wasAccepted","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"attestationsAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"destStatus","outputs":[{"internalType":"uint40","name":"snapRootTime","type":"uint40"},{"internalType":"uint40","name":"agentRootTime","type":"uint40"},{"internalType":"uint32","name":"notaryIndex","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getAttestation","outputs":[{"internalType":"bytes","name":"attPayload","type":"bytes"},{"internalType":"bytes","name":"attSignature","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"domain","type":"uint32"}],"name":"getGasData","outputs":[{"internalType":"GasData","name":"gasData","type":"uint96"},{"internalType":"uint256","name":"dataMaturity","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"nextAgentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"passAgentRoot","outputs":[{"internalType":"bool","name":"rootPassed","type":"bool"},{"internalType":"bool","name":"rootPending","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])":{"notice":"Accepts an attestation, which local `AgentManager` verified to have been signed by an active Notary for this chain. \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain. - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree. - Messages coming from chains included in the Attestation's snapshot could be proven. - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken. \u003e Will revert if any of these is true: \u003e - Called by anyone other than local `AgentManager`. \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is in Dispute. \u003e - Attestation's snapshot root has been previously submitted. Note: agentRoot and snapGas have been verified by the local `AgentManager`."},"attestationsAmount()":{"notice":"Returns the total amount of Notaries attestations that have been accepted."},"destStatus()":{"notice":"Returns status of Destination contract as far as snapshot/agent roots are concerned"},"getAttestation(uint256)":{"notice":"Returns a Notary-signed attestation with a given index. \u003e Index refers to the list of all attestations accepted by this contract."},"getGasData(uint32)":{"notice":"Returns the gas data for a given chain from the latest accepted attestation with that chain."},"nextAgentRoot()":{"notice":"Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over."},"passAgentRoot()":{"notice":"Attempts to pass a quarantined Agent Merkle Root to a local Light Manager."}},"version":1},"developerDoc":{"kind":"dev","methods":{"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])":{"params":{"agentRoot":"Agent Merkle Root from the Attestation","attPayload":"Raw payload with Attestation data","notaryIndex":"Index of Attestation Notary in Agent Merkle Tree","sigIndex":"Index of stored Notary signature","snapGas":"Gas data for each chain in the Attestation's snapshot"},"returns":{"wasAccepted":"     Whether the Attestation was accepted"}},"destStatus()":{"returns":{"agentRootTime":"   Timestamp when latest agent root was accepted","notaryIndex":"     Index of Notary who signed the latest agent root","snapRootTime":"    Timestamp when latest snapshot root was accepted"}},"getAttestation(uint256)":{"details":"Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit. Will return an empty signature if this contract is deployed on Synapse Chain.","params":{"index":"Attestation index"},"returns":{"attPayload":"      Raw payload with Attestation data","attSignature":"    Notary signature for the reported attestation"}},"getGasData(uint32)":{"details":"Will return empty values if there is no data for the domain, or if the notary who provided the data is in dispute.","params":{"domain":"Domain for the chain"},"returns":{"dataMaturity":"    Gas data age in seconds","gasData":"         Gas data for the chain"}},"passAgentRoot()":{"details":"Will do nothing, if root optimistic period is not over. Note: both returned values can not be true.","returns":{"rootPassed":"  Whether the agent merkle root was passed to LightManager","rootPending":" Whether there is a pending agent merkle root left"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"sigIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"agentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"ChainGas[]\",\"name\":\"snapGas\",\"type\":\"uint128[]\"}],\"name\":\"acceptAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"wasAccepted\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"attestationsAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destStatus\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"snapRootTime\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"agentRootTime\",\"type\":\"uint40\"},{\"internalType\":\"uint32\",\"name\":\"notaryIndex\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"attPayload\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"attSignature\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"}],\"name\":\"getGasData\",\"outputs\":[{\"internalType\":\"GasData\",\"name\":\"gasData\",\"type\":\"uint96\"},{\"internalType\":\"uint256\",\"name\":\"dataMaturity\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextAgentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"passAgentRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"rootPassed\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"rootPending\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])\":{\"params\":{\"agentRoot\":\"Agent Merkle Root from the Attestation\",\"attPayload\":\"Raw payload with Attestation data\",\"notaryIndex\":\"Index of Attestation Notary in Agent Merkle Tree\",\"sigIndex\":\"Index of stored Notary signature\",\"snapGas\":\"Gas data for each chain in the Attestation's snapshot\"},\"returns\":{\"wasAccepted\":\"     Whether the Attestation was accepted\"}},\"destStatus()\":{\"returns\":{\"agentRootTime\":\"   Timestamp when latest agent root was accepted\",\"notaryIndex\":\"     Index of Notary who signed the latest agent root\",\"snapRootTime\":\"    Timestamp when latest snapshot root was accepted\"}},\"getAttestation(uint256)\":{\"details\":\"Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit. Will return an empty signature if this contract is deployed on Synapse Chain.\",\"params\":{\"index\":\"Attestation index\"},\"returns\":{\"attPayload\":\"      Raw payload with Attestation data\",\"attSignature\":\"    Notary signature for the reported attestation\"}},\"getGasData(uint32)\":{\"details\":\"Will return empty values if there is no data for the domain, or if the notary who provided the data is in dispute.\",\"params\":{\"domain\":\"Domain for the chain\"},\"returns\":{\"dataMaturity\":\"    Gas data age in seconds\",\"gasData\":\"         Gas data for the chain\"}},\"passAgentRoot()\":{\"details\":\"Will do nothing, if root optimistic period is not over. Note: both returned values can not be true.\",\"returns\":{\"rootPassed\":\"  Whether the agent merkle root was passed to LightManager\",\"rootPending\":\" Whether there is a pending agent merkle root left\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])\":{\"notice\":\"Accepts an attestation, which local `AgentManager` verified to have been signed by an active Notary for this chain. \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain. - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree. - Messages coming from chains included in the Attestation's snapshot could be proven. - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken. \u003e Will revert if any of these is true: \u003e - Called by anyone other than local `AgentManager`. \u003e - Attestation payload is not properly formatted. \u003e - Attestation signer is in Dispute. \u003e - Attestation's snapshot root has been previously submitted. Note: agentRoot and snapGas have been verified by the local `AgentManager`.\"},\"attestationsAmount()\":{\"notice\":\"Returns the total amount of Notaries attestations that have been accepted.\"},\"destStatus()\":{\"notice\":\"Returns status of Destination contract as far as snapshot/agent roots are concerned\"},\"getAttestation(uint256)\":{\"notice\":\"Returns a Notary-signed attestation with a given index. \u003e Index refers to the list of all attestations accepted by this contract.\"},\"getGasData(uint32)\":{\"notice\":\"Returns the gas data for a given chain from the latest accepted attestation with that chain.\"},\"nextAgentRoot()\":{\"notice\":\"Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\"},\"passAgentRoot()\":{\"notice\":\"Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"InterfaceDestination\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"acceptAttestation(uint32,uint256,bytes,bytes32,uint128[])":"39fe2736","attestationsAmount()":"3cf7b120","destStatus()":"40989152","getAttestation(uint256)":"29be4db2","getGasData(uint32)":"d0dd0675","nextAgentRoot()":"55252dd1","passAgentRoot()":"a554d1e3"}},"solidity/BondingManagerHarness.t.sol:InterfaceLightManager":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"msgOrigin","type":"uint32"},{"internalType":"uint256","name":"proofMaturity","type":"uint256"},{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"remoteWithdrawTips","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"agentRoot","type":"bytes32"}],"name":"setAgentRoot","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"agent","type":"address"},{"components":[{"internalType":"enum AgentFlag","name":"flag","type":"uint8"},{"internalType":"uint32","name":"domain","type":"uint32"},{"internalType":"uint32","name":"index","type":"uint32"}],"internalType":"struct AgentStatus","name":"status","type":"tuple"},{"internalType":"bytes32[]","name":"proof","type":"bytes32[]"}],"name":"updateAgentStatus","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"remoteWithdrawTips(uint32,uint256,address,uint256)":{"notice":"Withdraws locked base message tips from local Origin to the recipient."},"setAgentRoot(bytes32)":{"notice":"Updates the root of Agent Merkle Tree that the Light Manager is tracking. Could be only called by a local Destination contract, which is supposed to verify the attested Agent Merkle Roots."},"updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])":{"notice":"Updates agent status, using a proof against the latest known Agent Merkle Root."}},"version":1},"developerDoc":{"kind":"dev","methods":{"remoteWithdrawTips(uint32,uint256,address,uint256)":{"details":"Could only be remote-called by BondingManager contract on Synapse Chain. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \"remote\" function was called when executing a manager message.","params":{"amount":"Tips value to withdraw","recipient":"Address to withdraw tips to"}},"setAgentRoot(bytes32)":{"params":{"agentRoot":"New Agent Merkle Root"}},"updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])":{"details":"Will revert if the provided proof doesn't match the latest merkle root.","params":{"agent":"Agent address","proof":"Merkle proof of Active status for the agent","status":"Structure specifying agent status: (flag, domain, index)"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"msgOrigin\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"proofMaturity\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"remoteWithdrawTips\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"agentRoot\",\"type\":\"bytes32\"}],\"name\":\"setAgentRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"enum AgentFlag\",\"name\":\"flag\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"domain\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"index\",\"type\":\"uint32\"}],\"internalType\":\"struct AgentStatus\",\"name\":\"status\",\"type\":\"tuple\"},{\"internalType\":\"bytes32[]\",\"name\":\"proof\",\"type\":\"bytes32[]\"}],\"name\":\"updateAgentStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"remoteWithdrawTips(uint32,uint256,address,uint256)\":{\"details\":\"Could only be remote-called by BondingManager contract on Synapse Chain. Note: as an extra security check this function returns its own selector, so that Destination could verify that a \\\"remote\\\" function was called when executing a manager message.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"recipient\":\"Address to withdraw tips to\"}},\"setAgentRoot(bytes32)\":{\"params\":{\"agentRoot\":\"New Agent Merkle Root\"}},\"updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])\":{\"details\":\"Will revert if the provided proof doesn't match the latest merkle root.\",\"params\":{\"agent\":\"Agent address\",\"proof\":\"Merkle proof of Active status for the agent\",\"status\":\"Structure specifying agent status: (flag, domain, index)\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"remoteWithdrawTips(uint32,uint256,address,uint256)\":{\"notice\":\"Withdraws locked base message tips from local Origin to the recipient.\"},\"setAgentRoot(bytes32)\":{\"notice\":\"Updates the root of Agent Merkle Tree that the Light Manager is tracking. Could be only called by a local Destination contract, which is supposed to verify the attested Agent Merkle Roots.\"},\"updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])\":{\"notice\":\"Updates agent status, using a proof against the latest known Agent Merkle Root.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"InterfaceLightManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"remoteWithdrawTips(uint32,uint256,address,uint256)":"1fa07138","setAgentRoot(bytes32)":"58668176","updateAgentStatus(address,(uint8,uint32,uint32),bytes32[])":"cbd05965"}},"solidity/BondingManagerHarness.t.sol:InterfaceOrigin":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"internalType":"uint32","name":"destination","type":"uint32"},{"internalType":"uint256","name":"paddedRequest","type":"uint256"},{"internalType":"uint256","name":"contentLength","type":"uint256"}],"name":"getMinimumTipsValue","outputs":[{"internalType":"uint256","name":"tipsValue","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint32","name":"destination","type":"uint32"},{"internalType":"bytes32","name":"recipient","type":"bytes32"},{"internalType":"uint32","name":"optimisticPeriod","type":"uint32"},{"internalType":"uint256","name":"paddedRequest","type":"uint256"},{"internalType":"bytes","name":"content","type":"bytes"}],"name":"sendBaseMessage","outputs":[{"internalType":"uint32","name":"messageNonce","type":"uint32"},{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"uint32","name":"destination","type":"uint32"},{"internalType":"uint32","name":"optimisticPeriod","type":"uint32"},{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"sendManagerMessage","outputs":[{"internalType":"uint32","name":"messageNonce","type":"uint32"},{"internalType":"bytes32","name":"messageHash","type":"bytes32"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdrawTips","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"getMinimumTipsValue(uint32,uint256,uint256)":{"notice":"Returns the minimum tips value for sending a message to a given destination."},"sendBaseMessage(uint32,bytes32,uint32,uint256,bytes)":{"notice":"Send a message to the recipient located on destination domain."},"sendManagerMessage(uint32,uint32,bytes)":{"notice":"Send a manager message to the destination domain."},"withdrawTips(address,uint256)":{"notice":"Withdraws locked base message tips to the recipient."}},"version":1},"developerDoc":{"kind":"dev","methods":{"getMinimumTipsValue(uint32,uint256,uint256)":{"details":"Using at least `tipsValue` as `msg.value` for `sendBaseMessage()` will guarantee that the message will be accepted.","params":{"contentLength":"The length of the message content","destination":"Domain of destination chain","paddedRequest":"Padded encoded message execution request on destination chain"},"returns":{"tipsValue":"       Minimum tips value for a message to be accepted"}},"sendBaseMessage(uint32,bytes32,uint32,uint256,bytes)":{"details":"Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.","params":{"content":"Raw bytes content of message","destination":"Domain of destination chain","optimisticPeriod":"Optimistic period for message execution on destination chain","paddedRequest":"Padded encoded message execution request on destination chain","recipient":"Address of recipient on destination chain as bytes32"},"returns":{"messageHash":"         Hash of the sent message","messageNonce":"        Nonce of the sent message"}},"sendManagerMessage(uint32,uint32,bytes)":{"details":"This could only be called by AgentManager, which takes care of encoding the calldata payload. Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain so that the AgentManager could verify where the Manager Message came from and how mature is the proof. Note: function is not payable, as no tips are required for sending a manager message.","params":{"destination":"Domain of destination chain","optimisticPeriod":"Optimistic period for message execution on destination chain","payload":"Payload for calling AgentManager on destination chain (with extra security args)"}},"withdrawTips(address,uint256)":{"details":"Could only be called by a local AgentManager.","params":{"amount":"Tips value to withdraw","recipient":"Address to withdraw tips to"}}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"paddedRequest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"contentLength\",\"type\":\"uint256\"}],\"name\":\"getMinimumTipsValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tipsValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"recipient\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"optimisticPeriod\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"paddedRequest\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"content\",\"type\":\"bytes\"}],\"name\":\"sendBaseMessage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"messageNonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"destination\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"optimisticPeriod\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"sendManagerMessage\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"messageNonce\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTips\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMinimumTipsValue(uint32,uint256,uint256)\":{\"details\":\"Using at least `tipsValue` as `msg.value` for `sendBaseMessage()` will guarantee that the message will be accepted.\",\"params\":{\"contentLength\":\"The length of the message content\",\"destination\":\"Domain of destination chain\",\"paddedRequest\":\"Padded encoded message execution request on destination chain\"},\"returns\":{\"tipsValue\":\"       Minimum tips value for a message to be accepted\"}},\"sendBaseMessage(uint32,bytes32,uint32,uint256,bytes)\":{\"details\":\"Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\",\"params\":{\"content\":\"Raw bytes content of message\",\"destination\":\"Domain of destination chain\",\"optimisticPeriod\":\"Optimistic period for message execution on destination chain\",\"paddedRequest\":\"Padded encoded message execution request on destination chain\",\"recipient\":\"Address of recipient on destination chain as bytes32\"},\"returns\":{\"messageHash\":\"         Hash of the sent message\",\"messageNonce\":\"        Nonce of the sent message\"}},\"sendManagerMessage(uint32,uint32,bytes)\":{\"details\":\"This could only be called by AgentManager, which takes care of encoding the calldata payload. Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain so that the AgentManager could verify where the Manager Message came from and how mature is the proof. Note: function is not payable, as no tips are required for sending a manager message.\",\"params\":{\"destination\":\"Domain of destination chain\",\"optimisticPeriod\":\"Optimistic period for message execution on destination chain\",\"payload\":\"Payload for calling AgentManager on destination chain (with extra security args)\"}},\"withdrawTips(address,uint256)\":{\"details\":\"Could only be called by a local AgentManager.\",\"params\":{\"amount\":\"Tips value to withdraw\",\"recipient\":\"Address to withdraw tips to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getMinimumTipsValue(uint32,uint256,uint256)\":{\"notice\":\"Returns the minimum tips value for sending a message to a given destination.\"},\"sendBaseMessage(uint32,bytes32,uint32,uint256,bytes)\":{\"notice\":\"Send a message to the recipient located on destination domain.\"},\"sendManagerMessage(uint32,uint32,bytes)\":{\"notice\":\"Send a manager message to the destination domain.\"},\"withdrawTips(address,uint256)\":{\"notice\":\"Withdraws locked base message tips to the recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"InterfaceOrigin\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"getMinimumTipsValue(uint32,uint256,uint256)":"4fc6ad85","sendBaseMessage(uint32,bytes32,uint32,uint256,bytes)":"873661bd","sendManagerMessage(uint32,uint32,bytes)":"a1c702a7","withdrawTips(address,uint256)":"4e04e7a7"}},"solidity/BondingManagerHarness.t.sol:MerkleMath":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202ffb8fc453efe7daad95cf90227a455d974d681b1c7348e8aab7568e4efaf22264736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212202ffb8fc453efe7daad95cf90227a455d974d681b1c7348e8aab7568e4efaf22264736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"8670:9845:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;8670:9845:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"8670:9845:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"MerkleMath\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:MerkleTree":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200269a857f777cd2b749e4b72e0b6df0ada69dbc9b4e3503e8ef922ad73d07ae964736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200269a857f777cd2b749e4b72e0b6df0ada69dbc9b4e3503e8ef922ad73d07ae964736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"22419:7264:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;22419:7264:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"22419:7264:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0 [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol). With the following changes: - Adapted for Solidity 0.8.x. - Amount of tree leaves stored externally. - Added thorough documentation. - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6). \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0 [link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py). With the following changes: \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper). \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"MAX_LEAVES":{"details":"For root calculation we need at least one empty leaf, thus the minus one in the formula."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"MAX_LEAVES\":{\"details\":\"For root calculation we need at least one empty leaf, thus the minus one in the formula.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0 [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol). With the following changes: - Adapted for Solidity 0.8.x. - Amount of tree leaves stored externally. - Added thorough documentation. - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6). \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0 [link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py). With the following changes: \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper). \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"MerkleTree\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:MessagingBase":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"IncorrectVersionLength","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"localDomain","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct MultiCallable.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct MultiCallable.Result[]","name":"callResults","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{"localDomain()":{"notice":"Domain of the local chain, set once upon contract creation"},"multicall((bool,bytes)[])":{"notice":"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."}},"notice":"Base contract for all messaging contracts. - Provides context on the local chain's domain. - Provides ownership functionality. - Will be providing pausing functionality when it is implemented.","version":1},"developerDoc":{"kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op"},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__GAP":{"details":"gap for upgrade safety"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"localDomain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Should be impossible to renounce ownership; we override OpenZeppelin OwnableUpgradeable's implementation of renounceOwnership to make it a no-op\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__GAP\":{\"details\":\"gap for upgrade safety\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"localDomain()\":{\"notice\":\"Domain of the local chain, set once upon contract creation\"},\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"}},\"notice\":\"Base contract for all messaging contracts. - Provides context on the local chain's domain. - Provides ownership functionality. - Will be providing pausing functionality when it is implemented.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"MessagingBase\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"localDomain()":"8d3638f4","multicall((bool,bytes)[])":"60fc8466","owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b","version()":"54fd4d50"}},"solidity/BondingManagerHarness.t.sol:MultiCallable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[{"components":[{"internalType":"bool","name":"allowFailure","type":"bool"},{"internalType":"bytes","name":"callData","type":"bytes"}],"internalType":"struct MultiCallable.Call[]","name":"calls","type":"tuple[]"}],"name":"multicall","outputs":[{"components":[{"internalType":"bool","name":"success","type":"bool"},{"internalType":"bytes","name":"returnData","type":"bytes"}],"internalType":"struct MultiCallable.Result[]","name":"callResults","type":"tuple[]"}],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{"multicall((bool,bytes)[])":{"notice":"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`."}},"notice":"Collection of Multicall utilities. Fork of Multicall3: https://github.com/mds1/multicall/blob/master/src/Multicall3.sol","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"allowFailure\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Call[]\",\"name\":\"calls\",\"type\":\"tuple[]\"}],\"name\":\"multicall\",\"outputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"returnData\",\"type\":\"bytes\"}],\"internalType\":\"struct MultiCallable.Result[]\",\"name\":\"callResults\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"multicall((bool,bytes)[])\":{\"notice\":\"Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\"}},\"notice\":\"Collection of Multicall utilities. Fork of Multicall3: https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"MultiCallable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"multicall((bool,bytes)[])":"60fc8466"}},"solidity/BondingManagerHarness.t.sol:NumberLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c970b15dbf08d99cf364c261d55c26ddb233cdaf59463f362f5df086ec4943f864736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c970b15dbf08d99cf364c261d55c26ddb233cdaf59463f362f5df086ec4943f864736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"66037:4833:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;66037:4833:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"66037:4833:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"# Number Library for compact representation of uint256 numbers. - Number is stored using mantissa and exponent, each occupying 8 bits. - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`. - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent` \u003e - `0 \u003c= mantissa \u003c 256` \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256) # Number stack layout (from highest bits to lowest) | Position   | Field    | Type  | Bytes | | ---------- | -------- | ----- | ----- | | (002..001] | mantissa | uint8 | 1     | | (001..000] | exponent | uint8 | 1     |","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"BWAD_SHIFT":{"details":"We are using not using 10**18 as wad, because it is not stored precisely in NumberLib."},"SHIFT_MANTISSA":{"details":"Amount of bits to shift to mantissa field"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"BWAD_SHIFT\":{\"details\":\"We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\"},\"SHIFT_MANTISSA\":{\"details\":\"Amount of bits to shift to mantissa field\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"# Number Library for compact representation of uint256 numbers. - Number is stored using mantissa and exponent, each occupying 8 bits. - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`. - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent` \u003e - `0 \u003c= mantissa \u003c 256` \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256) # Number stack layout (from highest bits to lowest) | Position   | Field    | Type  | Bytes | | ---------- | -------- | ----- | ----- | | (002..001] | mantissa | uint8 | 1     | | (001..000] | exponent | uint8 | 1     |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"NumberLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:OwnableUpgradeable":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"details":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.","kind":"dev","methods":{"owner()":{"details":"Returns the address of the current owner."},"renounceOwnership()":{"details":"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."},"transferOwnership(address)":{"details":"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."}},"stateVariables":{"__gap":{"details":"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. By default, the owner account will be the one that deploys the contract. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain. See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"owner()":"8da5cb5b","renounceOwnership()":"715018a6","transferOwnership(address)":"f2fde38b"}},"solidity/BondingManagerHarness.t.sol:StructureUtils":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d488c4b6d174e1b21d8e7d19832b8cdf6bc83224777463448bf456f30f2c431864736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220d488c4b6d174e1b21d8e7d19832b8cdf6bc83224777463448bf456f30f2c431864736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"32792:1198:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;32792:1198:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"32792:1198:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"StructureUtils\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{}},"solidity/BondingManagerHarness.t.sol:Versioned":{"code":"0x","runtime-code":"0x","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address): 4+4+32+32+1+20+20+20\nuint256 constant RECEIPT_LENGTH = 133;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint8,uint32,uint32,uint32,uint32): 1+4+4+4+4\nuint256 constant HEADER_LENGTH = 17;\n/// @dev See Request.sol: (uint96,uint64,uint32): 12+8+4\nuint256 constant REQUEST_LENGTH = 24;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_VALID_SALT = keccak256(\"ATTESTATION_VALID_SALT\");\nbytes32 constant ATTESTATION_INVALID_SALT = keccak256(\"ATTESTATION_INVALID_SALT\");\nbytes32 constant RECEIPT_VALID_SALT = keccak256(\"RECEIPT_VALID_SALT\");\nbytes32 constant RECEIPT_INVALID_SALT = keccak256(\"RECEIPT_INVALID_SALT\");\nbytes32 constant SNAPSHOT_VALID_SALT = keccak256(\"SNAPSHOT_VALID_SALT\");\nbytes32 constant STATE_INVALID_SALT = keccak256(\"STATE_INVALID_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Amount of time without fresh data from Notaries before contract owner can resolve stuck disputes manually\nuint256 constant FRESH_DATA_TIMEOUT = 4 hours;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n// ══════════════════════════════ INVALID CALLER ═══════════════════════════════\n\nerror CallerNotAgentManager();\nerror CallerNotDestination();\nerror CallerNotInbox();\nerror CallerNotSummit();\n\n// ══════════════════════════════ INCORRECT DATA ═══════════════════════════════\n\nerror IncorrectAttestation();\nerror IncorrectAgentDomain();\nerror IncorrectAgentIndex();\nerror IncorrectAgentProof();\nerror IncorrectDataHash();\nerror IncorrectDestinationDomain();\nerror IncorrectOriginDomain();\nerror IncorrectSnapshotProof();\nerror IncorrectSnapshotRoot();\nerror IncorrectState();\nerror IncorrectStatesAmount();\nerror IncorrectTipsProof();\nerror IncorrectVersionLength();\n\nerror IncorrectNonce();\nerror IncorrectSender();\nerror IncorrectRecipient();\n\nerror FlagOutOfRange();\nerror IndexOutOfRange();\nerror NonceOutOfRange();\n\nerror OutdatedNonce();\n\nerror UnformattedAttestation();\nerror UnformattedAttestationReport();\nerror UnformattedBaseMessage();\nerror UnformattedCallData();\nerror UnformattedCallDataPrefix();\nerror UnformattedMessage();\nerror UnformattedReceipt();\nerror UnformattedReceiptReport();\nerror UnformattedSignature();\nerror UnformattedSnapshot();\nerror UnformattedState();\nerror UnformattedStateReport();\n\n// ═══════════════════════════════ MERKLE TREES ════════════════════════════════\n\nerror LeafNotProven();\nerror MerkleTreeFull();\nerror NotEnoughLeafs();\nerror TreeHeightTooLow();\n\n// ═════════════════════════════ OPTIMISTIC PERIOD ═════════════════════════════\n\nerror BaseClientOptimisticPeriod();\nerror MessageOptimisticPeriod();\nerror SlashAgentOptimisticPeriod();\nerror WithdrawTipsOptimisticPeriod();\nerror ZeroProofMaturity();\n\n// ═══════════════════════════════ AGENT MANAGER ═══════════════════════════════\n\nerror AgentNotGuard();\nerror AgentNotNotary();\n\nerror AgentCantBeAdded();\nerror AgentNotActive();\nerror AgentNotActiveNorUnstaking();\nerror AgentNotFraudulent();\nerror AgentNotUnstaking();\nerror AgentUnknown();\n\nerror DisputeAlreadyResolved();\nerror DisputeNotOpened();\nerror DisputeNotStuck();\nerror GuardInDispute();\nerror NotaryInDispute();\n\nerror MustBeSynapseDomain();\nerror SynapseDomainForbidden();\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\nerror AlreadyExecuted();\nerror AlreadyFailed();\nerror DuplicatedSnapshotRoot();\nerror IncorrectMagicValue();\nerror GasLimitTooLow();\nerror GasSuppliedTooLow();\n\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n\nerror ContentLengthTooBig();\nerror EthTransferFailed();\nerror InsufficientEthBalance();\n\n// ════════════════════════════════ GAS ORACLE ═════════════════════════════════\n\nerror LocalGasDataNotSet();\nerror RemoteGasDataNotSet();\n\n// ═══════════════════════════════════ TIPS ════════════════════════════════════\n\nerror TipsClaimMoreThanEarned();\nerror TipsClaimZero();\nerror TipsOverflow();\nerror TipsValueTooLow();\n\n// ════════════════════════════════ MEMORY VIEW ════════════════════════════════\n\nerror IndexedTooMuch();\nerror ViewOverrun();\nerror OccupiedMemory();\nerror UnallocatedMemory();\nerror PrecompileOutOfGas();\n\n// ═════════════════════════════════ MULTICALL ═════════════════════════════════\n\nerror MulticallFailed();\n\nlibrary MerkleMath {\n    // ═════════════════════════════════════════ BASIC MERKLE CALCULATIONS ═════════════════════════════════════════════\n\n    /**\n     * @notice Calculates the merkle root for the given leaf and merkle proof.\n     * @dev Will revert if proof length exceeds the tree height.\n     * @param index     Index of `leaf` in tree\n     * @param leaf      Leaf of the merkle tree\n     * @param proof     Proof of inclusion of `leaf` in the tree\n     * @param height    Height of the merkle tree\n     * @return root_    Calculated Merkle Root\n     */\n    function proofRoot(uint256 index, bytes32 leaf, bytes32[] memory proof, uint256 height)\n        internal\n        pure\n        returns (bytes32 root_)\n    {\n        // Proof length could not exceed the tree height\n        uint256 proofLen = proof.length;\n        if (proofLen \u003e height) revert TreeHeightTooLow();\n        root_ = leaf;\n        /// @dev Apply unchecked to all ++h operations\n        unchecked {\n            // Go up the tree levels from the leaf following the proof\n            for (uint256 h = 0; h \u003c proofLen; ++h) {\n                // Get a sibling node on current level: this is proof[h]\n                root_ = getParent(root_, proof[h], index, h);\n            }\n            // Go up to the root: the remaining siblings are EMPTY\n            for (uint256 h = proofLen; h \u003c height; ++h) {\n                root_ = getParent(root_, bytes32(0), index, h);\n            }\n        }\n    }\n\n    /**\n     * @notice Calculates the parent of a node on the path from one of the leafs to root.\n     * @param node          Node on a path from tree leaf to root\n     * @param sibling       Sibling for a given node\n     * @param leafIndex     Index of the tree leaf\n     * @param nodeHeight    \"Level height\" for `node` (ZERO for leafs, ORIGIN_TREE_HEIGHT for root)\n     */\n    function getParent(bytes32 node, bytes32 sibling, uint256 leafIndex, uint256 nodeHeight)\n        internal\n        pure\n        returns (bytes32 parent)\n    {\n        // Index for `node` on its \"tree level\" is (leafIndex / 2**height)\n        // \"Left child\" has even index, \"right child\" has odd index\n        if ((leafIndex \u003e\u003e nodeHeight) \u0026 1 == 0) {\n            // Left child\n            return getParent(node, sibling);\n        } else {\n            // Right child\n            return getParent(sibling, node);\n        }\n    }\n\n    /// @notice Calculates the parent of tow nodes in the merkle tree.\n    /// @dev We use implementation with H(0,0) = 0\n    /// This makes EVERY empty node in the tree equal to ZERO,\n    /// saving us from storing H(0,0), H(H(0,0), H(0, 0)), and so on\n    /// @param leftChild    Left child of the calculated node\n    /// @param rightChild   Right child of the calculated node\n    /// @return parent      Value for the node having above mentioned children\n    function getParent(bytes32 leftChild, bytes32 rightChild) internal pure returns (bytes32 parent) {\n        if (leftChild == bytes32(0) \u0026\u0026 rightChild == bytes32(0)) {\n            return 0;\n        } else {\n            return keccak256(bytes.concat(leftChild, rightChild));\n        }\n    }\n\n    // ════════════════════════════════ ROOT/PROOF CALCULATION FOR A LIST OF LEAFS ═════════════════════════════════════\n\n    /**\n     * @notice Calculates merkle root for a list of given leafs.\n     * Merkle Tree is constructed by padding the list with ZERO values for leafs until list length is `2**height`.\n     * Merkle Root is calculated for the constructed tree, and then saved in `leafs[0]`.\n     * \u003e Note:\n     * \u003e - `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * \u003e - Caller is expected not to reuse `hashes` list after the call, and only use `leafs[0]` value,\n     * which is guaranteed to contain the calculated merkle root.\n     * \u003e - root is calculated using the `H(0,0) = 0` Merkle Tree implementation. See MerkleTree.sol for details.\n     * @dev Amount of leaves should be at most `2**height`\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param height    Height of the Merkle Tree to construct\n     */\n    function calculateRoot(bytes32[] memory hashes, uint256 height) internal pure {\n        uint256 levelLength = hashes.length;\n        // Amount of hashes could not exceed amount of leafs in tree with the given height\n        if (levelLength \u003e (1 \u003c\u003c height)) revert TreeHeightTooLow();\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\": the amount of iterations for the for loop above.\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n            }\n        }\n    }\n\n    /**\n     * @notice Generates a proof of inclusion of a leaf in the list. If the requested index is outside\n     * of the list range, generates a proof of inclusion for an empty leaf (proof of non-inclusion).\n     * The Merkle Tree is constructed by padding the list with ZERO values until list length is a power of two\n     * __AND__ index is in the extended list range. For example:\n     *  - `hashes.length == 6` and `0 \u003c= index \u003c= 7` will \"extend\" the list to 8 entries.\n     *  - `hashes.length == 6` and `7 \u003c index \u003c= 15` will \"extend\" the list to 16 entries.\n     * \u003e Note: `leafs` values are overwritten in the process to avoid excessive memory allocations.\n     * Caller is expected not to reuse `hashes` list after the call.\n     * @param hashes    List of leafs for the merkle tree (to be overwritten)\n     * @param index     Leaf index to generate the proof for\n     * @return proof    Generated merkle proof\n     */\n    function calculateProof(bytes32[] memory hashes, uint256 index) internal pure returns (bytes32[] memory proof) {\n        // Use only meaningful values for the shortened proof\n        // Check if index is within the list range (we want to generates proofs for outside leafs as well)\n        uint256 height = getHeight(index \u003c hashes.length ? hashes.length : (index + 1));\n        proof = new bytes32[](height);\n        uint256 levelLength = hashes.length;\n        /// @dev h, leftIndex, rightIndex and levelLength never overflow\n        unchecked {\n            // Iterate `height` levels up from the leaf level\n            // For every level we will only record \"significant values\", i.e. not equal to ZERO\n            for (uint256 h = 0; h \u003c height; ++h) {\n                // Use sibling for the merkle proof; `index^1` is index of our sibling\n                proof[h] = (index ^ 1 \u003c levelLength) ? hashes[index ^ 1] : bytes32(0);\n\n                // Let H be the height of the \"current level\". H = 0 for the \"leafs level\".\n                // Invariant: a total of 2**(HEIGHT-H) nodes are on the current level\n                // Invariant: hashes[0 .. length) are \"significant values\" for the \"current level\" nodes\n                // Invariant: bytes32(0) is the value for nodes with indexes [length .. 2**(HEIGHT-H))\n\n                // Iterate over every pair of (leftChild, rightChild) on the current level\n                for (uint256 leftIndex = 0; leftIndex \u003c levelLength; leftIndex += 2) {\n                    uint256 rightIndex = leftIndex + 1;\n                    bytes32 leftChild = hashes[leftIndex];\n                    // Note: rightChild might be ZERO\n                    bytes32 rightChild = rightIndex \u003c levelLength ? hashes[rightIndex] : bytes32(0);\n                    // Record the parent hash in the same array. This will not affect\n                    // further calculations for the same level: (leftIndex \u003e\u003e 1) \u003c= leftIndex.\n                    hashes[leftIndex \u003e\u003e 1] = getParent(leftChild, rightChild);\n                }\n                // Set length for the \"parent level\"\n                levelLength = (levelLength + 1) \u003e\u003e 1;\n                // Traverse to parent node\n                index \u003e\u003e= 1;\n            }\n        }\n    }\n\n    /// @notice Returns the height of the tree having a given amount of leafs.\n    function getHeight(uint256 leafs) internal pure returns (uint256 height) {\n        uint256 amount = 1;\n        while (amount \u003c leafs) {\n            unchecked {\n                ++height;\n            }\n            amount \u003c\u003c= 1;\n        }\n    }\n}\n\n/// `BaseTree` is a struct representing incremental merkle tree.\n/// - Contains only the current branch.\n/// - The number of inserted leaves is stored externally, and is later supplied for tree operations.\n/// - Has a fixed height of `ORIGIN_TREE_HEIGHT`.\n/// - Can store up to `2 ** ORIGIN_TREE_HEIGHT - 1` leaves.\n/// \u003e Note: the hash function for the tree `H(x, y)` is defined as:\n/// \u003e - `H(0,0) = 0`\n/// \u003e - `H(x,y) = keccak256(x, y), when (x != 0 || y != 0)`\n/// ## Invariant for leafs\n/// - The leftmost empty leaf has `index == count`, where `count` is the amount of the inserted leafs so far.\n/// - Value for any empty leaf or node is bytes32(0).\n/// ## Invariant for current branch\n/// `branch[i]` is always the value of a node on the i-th level.\n/// Levels are numbered from leafs to root: `0 .. ORIGIN_TREE_HEIGHT`.\n/// `branch[i]` stores the value for the node, such that:\n//  - The node is a \"left child\" (e.g. has an even index).\n/// - The node must have two non-empty children.\n/// - Out of all level's \"left child\" nodes with \"non-empty children\",\n/// the one with the biggest index (the rightmost one) is stored as `branch[i]`.\n/// \u003e __`branch` could be used to form a proof of inclusion for the first empty leaf (`index == count`).__\n/// _Here is how:_\n/// - Let's walk along the path from the \"first empty leaf\" to the root.\n/// - i-th bit of the \"first empty leaf\" index (which is equal to `count`) determines if the path's node\n/// for this i-th level is a \"left child\" or a \"right child\".\n/// - i-th bit in `count` is 0 → we are the left child on this level → sibling is the right child\n/// that does not exist yet → `proof[i] = bytes32(0)`.\n/// - i-th bit in `count` is 1 → we are the right child on this level → sibling is the left child\n/// sibling is the rightmost \"left child\" node on the level → `proof[i] = branch[i]`.\n/// \u003e Therefore `proof[i] = (count \u0026 (1 \u003c\u003c i)) == 0 ? bytes32(0) : branch[i])`\nstruct BaseTree {\n    bytes32[ORIGIN_TREE_HEIGHT] branch;\n}\n\nusing MerkleTree for BaseTree global;\n\n/// `HistoricalTree` is an incremental merkle tree keeping track of its historical merkle roots.\n/// \u003e - `roots[N]` is the root of the tree after `N` leafs were inserted\n/// \u003e - `roots[0] == bytes32(0)`\n/// @param tree     Incremental merkle tree\n/// @param roots    Historical merkle roots of the tree\nstruct HistoricalTree {\n    BaseTree tree;\n    bytes32[] roots;\n}\n\nusing MerkleTree for HistoricalTree global;\n\n/// `DynamicTree` is a struct representing a Merkle Tree with `2**AGENT_TREE_HEIGHT` leaves.\n/// - A single operation is available: update value for leaf with an arbitrary index (which might be a non-empty leaf).\n/// - This is done by requesting the proof of inclusion for the old value, which is used to both\n/// verify the old value, and calculate the new root.\n/// \u003e Based on Original idea from [ER forum post](https://ethresear.ch/t/efficient-on-chain-dynamic-merkle-tree/11054).\nstruct DynamicTree {\n    bytes32 root;\n}\n\nusing MerkleTree for DynamicTree global;\n\n/// MerkleTree is work based on Nomad's Merkle.sol, which is used under MIT OR Apache-2.0\n/// [link](https://github.com/nomad-xyz/monorepo/blob/main/packages/contracts-core/contracts/libs/Merkle.sol).\n/// With the following changes:\n/// - Adapted for Solidity 0.8.x.\n/// - Amount of tree leaves stored externally.\n/// - Added thorough documentation.\n/// - `H(0,0) = 0` optimization from [ER forum post](https://ethresear.ch/t/optimizing-sparse-merkle-trees/3751/6).\n/// \u003e Nomad's Merkle.sol is work based on eth2 deposit contract, which is used under CC0-1.0\n///[link](https://github.com/ethereum/deposit_contract/blob/dev/deposit_contract/contracts/validator_registration.v.py).\n/// With the following changes:\n/// \u003e - Implemented in Solidity 0.7.6 (eth2 deposit contract implemented in Vyper).\n/// \u003e - `H() = keccak256()` is used as the hashing function instead of `sha256()`.\nlibrary MerkleTree {\n    /// @dev For root calculation we need at least one empty leaf, thus the minus one in the formula.\n    uint256 internal constant MAX_LEAVES = 2 ** ORIGIN_TREE_HEIGHT - 1;\n\n    // ═════════════════════════════════════════════════ BASE TREE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Inserts `node` into merkle tree\n     * @dev Reverts if tree is full\n     * @param newCount  Amount of inserted leaves in the tree after the insertion (i.e. current + 1)\n     * @param node      Element to insert into tree\n     */\n    function insertBase(BaseTree storage tree, uint256 newCount, bytes32 node) internal {\n        if (newCount \u003e MAX_LEAVES) revert MerkleTreeFull();\n        // We go up the tree following the branch from the empty leaf AFTER the just inserted one.\n        // We stop when we find the first \"right child\" node.\n        // Its sibling is now the rightmost \"left child\" node that has two non-empty children.\n        // Therefore we need to update `tree.branch` value on this level.\n        // One could see that `tree.branch` value on lower and higher levels remain unchanged.\n\n        // Loop invariant: `node` is the current level's value for the branch from JUST INSERTED leaf\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            if ((newCount \u0026 1) == 1) {\n                // Found the first \"right child\" node on the branch from EMPTY leaf\n                // `node` is the value for node on branch from JUST INSERTED leaf\n                // Which in this case is the \"left child\".\n                // We update tree.branch and exit\n                tree.branch[i] = node;\n                return;\n            }\n            // On the branch from EMPTY leaf this is still a \"left child\".\n            // Meaning on branch from JUST INSERTED leaf, `node` is a right child.\n            // We compute value for `node` parent using `tree.branch` invariant:\n            // This is the rightmost \"left child\" node, which would be sibling of `node`.\n            node = MerkleMath.getParent(tree.branch[i], node);\n            // Get the parent index, and go to the next tree level\n            newCount \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n        // As the loop should always end prematurely with the `return` statement,\n        // this code should be unreachable. We assert `false` just to be safe.\n        assert(false);\n    }\n\n    /**\n     * @notice Calculates and returns current root of the merkle tree.\n     * @param count     Current amount of inserted leaves in the tree\n     * @return current  Calculated root of `tree`\n     */\n    function rootBase(BaseTree storage tree, uint256 count) internal view returns (bytes32 current) {\n        // To calculate the root we follow the branch of first EMPTY leaf (index == count)\n        for (uint256 i = 0; i \u003c ORIGIN_TREE_HEIGHT;) {\n            // Check if we are the left or the right child on the current level\n            if ((count \u0026 1) == 1) {\n                // We are the right child. Our sibling is the \"rightmost\" \"left-child\" node\n                // that has two non-empty children → sibling is `tree.branch[i]`\n                current = MerkleMath.getParent(tree.branch[i], current);\n            } else {\n                // We are the left child. Our sibling does not exist yet → sibling is EMPTY\n                current = MerkleMath.getParent(current, bytes32(0));\n            }\n            // Get the parent index, and go to the next tree level\n            count \u003e\u003e= 1;\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    // ══════════════════════════════════════════════ HISTORICAL TREE ══════════════════════════════════════════════════\n\n    /// @notice Initializes the historical roots for the tree by inserting an empty root.\n    // solhint-disable-next-line ordering\n    function initializeRoots(HistoricalTree storage tree) internal returns (bytes32 savedRoot) {\n        // This should only be called once, when the contract is initialized\n        assert(tree.roots.length == 0);\n        // Save root for empty merkle tree: bytes32(0)\n        tree.roots.push(savedRoot);\n    }\n\n    /// @notice Inserts a new leaf into the merkle tree.\n    /// @dev Reverts if tree is full.\n    /// @param node         Element to insert into tree\n    /// @return newRoot     Merkle root after the leaf was inserted\n    function insert(HistoricalTree storage tree, bytes32 node) internal returns (bytes32 newRoot) {\n        // Tree count after the new leaf will be inserted (we store roots[0] as root of empty tree)\n        uint256 newCount = tree.roots.length;\n        tree.tree.insertBase(newCount, node);\n        // Save the new root\n        newRoot = tree.tree.rootBase(newCount);\n        tree.roots.push(newRoot);\n    }\n\n    /// @notice Returns the historical root of the merkle tree.\n    /// @dev Reverts if not enough leafs have been inserted.\n    /// @param count            Amount of leafs in the tree at some point of time\n    /// @return historicalRoot  Merkle root after `count` leafs were inserted\n    function root(HistoricalTree storage tree, uint256 count) internal view returns (bytes32 historicalRoot) {\n        if (count \u003e= tree.roots.length) revert NotEnoughLeafs();\n        return tree.roots[count];\n    }\n\n    // ═══════════════════════════════════════════════ DYNAMIC TREE ════════════════════════════════════════════════════\n\n    /**\n     * @notice Updates the value for the leaf with the given index in the Dynamic Merkle Tree.\n     * @dev Will revert if incorrect proof of inclusion for old value is supplied.\n     * @param tree          Dynamic merkle tree\n     * @param index         Index of the leaf to update\n     * @param oldValue      Previous value of the leaf\n     * @param branch        Proof of inclusion of previous value into the tree\n     * @param newValue      New leaf value to assign\n     * @return newRoot      New value for the Merkle Root after the leaf is updated\n     */\n    function update(\n        DynamicTree storage tree,\n        uint256 index,\n        bytes32 oldValue,\n        bytes32[] memory branch,\n        bytes32 newValue\n    ) internal returns (bytes32 newRoot) {\n        // Check that the old value + proof result in a correct root\n        if (MerkleMath.proofRoot(index, oldValue, branch, AGENT_TREE_HEIGHT) != tree.root) {\n            revert LeafNotProven();\n        }\n        // New root is new value + the same proof (values for sibling nodes are not updated)\n        newRoot = MerkleMath.proofRoot(index, newValue, branch, AGENT_TREE_HEIGHT);\n        // Write the new root\n        tree.root = newRoot;\n    }\n}\n\n// Here we define common enums and structures to enable their easier reusing later.\n\n// ═══════════════════════════════ AGENT STATUS ════════════════════════════════\n\n/// @dev Potential statuses for the off-chain bonded agent:\n/// - Unknown: never provided a bond =\u003e signature not valid\n/// - Active: has a bond in BondingManager =\u003e signature valid\n/// - Unstaking: has a bond in BondingManager, initiated the unstaking =\u003e signature not valid\n/// - Resting: used to have a bond in BondingManager, successfully unstaked =\u003e signature not valid\n/// - Fraudulent: proven to commit fraud, value in Merkle Tree not updated =\u003e signature not valid\n/// - Slashed: proven to commit fraud, value in Merkle Tree was updated =\u003e signature not valid\n/// Unstaked agent could later be added back to THE SAME domain by staking a bond again.\n/// Honest agent: Unknown -\u003e Active -\u003e unstaking -\u003e Resting -\u003e Active ...\n/// Malicious agent: Unknown -\u003e Active -\u003e Fraudulent -\u003e Slashed\n/// Malicious agent: Unknown -\u003e Active -\u003e Unstaking -\u003e Fraudulent -\u003e Slashed\nenum AgentFlag {\n    Unknown,\n    Active,\n    Unstaking,\n    Resting,\n    Fraudulent,\n    Slashed\n}\n\n/// @notice Struct for storing an agent in the BondingManager contract.\nstruct AgentStatus {\n    AgentFlag flag;\n    uint32 domain;\n    uint32 index;\n}\n// 184 bits available for tight packing\n\nusing StructureUtils for AgentStatus global;\n\n/// @notice Potential statuses of an agent in terms of being in dispute\n/// - None: agent is not in dispute\n/// - Pending: agent is in unresolved dispute\n/// - Slashed: agent was in dispute that lead to agent being slashed\n/// Note: agent who won the dispute has their status reset to None\nenum DisputeFlag {\n    None,\n    Pending,\n    Slashed\n}\n\n// ════════════════════════════════ DESTINATION ════════════════════════════════\n\n/// @notice Struct representing the status of Destination contract.\n/// @param snapRootTime     Timestamp when latest snapshot root was accepted\n/// @param agentRootTime    Timestamp when latest agent root was accepted\n/// @param notaryIndex      Index of Notary who signed the latest agent root\nstruct DestinationStatus {\n    uint40 snapRootTime;\n    uint40 agentRootTime;\n    uint32 notaryIndex;\n}\n\n// ═══════════════════════════════ EXECUTION HUB ═══════════════════════════════\n\n/// @notice Potential statuses of the message in Execution Hub.\n/// - None: there hasn't been a valid attempt to execute the message yet\n/// - Failed: there was a valid attempt to execute the message, but recipient reverted\n/// - Success: there was a valid attempt to execute the message, and recipient did not revert\n/// Note: message can be executed until its status is Success\nenum MessageStatus {\n    None,\n    Failed,\n    Success\n}\n\nlibrary StructureUtils {\n    /// @notice Checks that Agent is Active\n    function verifyActive(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active) {\n            revert AgentNotActive();\n        }\n    }\n\n    /// @notice Checks that Agent is Unstaking\n    function verifyUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Unstaking) {\n            revert AgentNotUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Active or Unstaking\n    function verifyActiveUnstaking(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Active \u0026\u0026 status.flag != AgentFlag.Unstaking) {\n            revert AgentNotActiveNorUnstaking();\n        }\n    }\n\n    /// @notice Checks that Agent is Fraudulent\n    function verifyFraudulent(AgentStatus memory status) internal pure {\n        if (status.flag != AgentFlag.Fraudulent) {\n            revert AgentNotFraudulent();\n        }\n    }\n\n    /// @notice Checks that Agent is not Unknown\n    function verifyKnown(AgentStatus memory status) internal pure {\n        if (status.flag == AgentFlag.Unknown) {\n            revert AgentUnknown();\n        }\n    }\n}\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ══════════════════════════════ LIBRARY IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n// ═════════════════════════════ INTERNAL IMPORTS ══════════════════════════════\n\n/// @notice Collection of Multicall utilities. Fork of Multicall3:\n/// https://github.com/mds1/multicall/blob/master/src/Multicall3.sol\nabstract contract MultiCallable {\n    struct Call {\n        bool allowFailure;\n        bytes callData;\n    }\n\n    struct Result {\n        bool success;\n        bytes returnData;\n    }\n\n    /// @notice Aggregates a few calls to this contract into one multicall without modifying `msg.sender`.\n    function multicall(Call[] calldata calls) external returns (Result[] memory callResults) {\n        uint256 amount = calls.length;\n        callResults = new Result[](amount);\n        Call calldata call_;\n        for (uint256 i = 0; i \u003c amount;) {\n            call_ = calls[i];\n            Result memory result = callResults[i];\n            // We perform a delegate call to ourselves here. Delegate call does not modify `msg.sender`, so\n            // this will have the same effect as if `msg.sender` performed all the calls themselves one by one.\n            // solhint-disable-next-line avoid-low-level-calls\n            (result.success, result.returnData) = address(this).delegatecall(call_.callData);\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                // Revert if the call fails and failure is not allowed\n                // `allowFailure := calldataload(call_)` and `success := mload(result)`\n                if iszero(or(calldataload(call_), mload(result))) {\n                    // Revert with `0x4d6a2328` (function selector for `MulticallFailed()`)\n                    mstore(0x00, 0x4d6a232800000000000000000000000000000000000000000000000000000000)\n                    revert(0x00, 0x04)\n                }\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n/**\n * @title Versioned\n * @notice Version getter for contracts. Doesn't use any storage slots, meaning\n * it will never cause any troubles with the upgradeable contracts. For instance, this contract\n * can be added or removed from the inheritance chain without shifting the storage layout.\n */\nabstract contract Versioned {\n    /**\n     * @notice Struct that is mimicking the storage layout of a string with 32 bytes or less.\n     * Length is limited by 32, so the whole string payload takes two memory words:\n     * @param length    String length\n     * @param data      String characters\n     */\n    struct _ShortString {\n        uint256 length;\n        bytes32 data;\n    }\n\n    /// @dev Length of the \"version string\"\n    uint256 private immutable _length;\n    /// @dev Bytes representation of the \"version string\".\n    /// Strings with length over 32 are not supported!\n    bytes32 private immutable _data;\n\n    constructor(string memory version_) {\n        _length = bytes(version_).length;\n        if (_length \u003e 32) revert IncorrectVersionLength();\n        // bytes32 is left-aligned =\u003e this will store the byte representation of the string\n        // with the trailing zeroes to complete the 32-byte word\n        _data = bytes32(bytes(version_));\n    }\n\n    function version() external view returns (string memory versionString) {\n        // Load the immutable values to form the version string\n        _ShortString memory str = _ShortString(_length, _data);\n        // The only way to do this cast is doing some dirty assembly\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            versionString := str\n        }\n    }\n}\n\n// ═════════════════════════════ EXTERNAL IMPORTS ══════════════════════════════\n\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/utils/Initializable.sol)\n\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length \u003e 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance \u003e= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance \u003e= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length \u003e 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = _setInitializedVersion(1);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        bool isTopLevelCall = _setInitializedVersion(version);\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(version);\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        _setInitializedVersion(type(uint8).max);\n    }\n\n    function _setInitializedVersion(uint8 version) private returns (bool) {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, and for the lowest level\n        // of initializers, because in other contexts the contract may have been reentered.\n        if (_initializing) {\n            require(\n                version == 1 \u0026\u0026 !AddressUpgradeable.isContract(address(this)),\n                \"Initializable: contract is already initialized\"\n            );\n            return false;\n        } else {\n            require(_initialized \u003c version, \"Initializable: contract is already initialized\");\n            _initialized = version;\n            return true;\n        }\n    }\n}\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n\n/**\n * @notice Base contract for all messaging contracts.\n * - Provides context on the local chain's domain.\n * - Provides ownership functionality.\n * - Will be providing pausing functionality when it is implemented.\n */\nabstract contract MessagingBase is MultiCallable, Versioned, OwnableUpgradeable {\n    // ════════════════════════════════════════════════ IMMUTABLES ═════════════════════════════════════════════════════\n\n    /// @notice Domain of the local chain, set once upon contract creation\n    uint32 public immutable localDomain;\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    /// @dev gap for upgrade safety\n    uint256[50] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    constructor(string memory version_, uint32 localDomain_) Versioned(version_) {\n        localDomain = localDomain_;\n    }\n\n    // TODO: Implement pausing\n\n    /**\n     * @dev Should be impossible to renounce ownership;\n     * we override OpenZeppelin OwnableUpgradeable's\n     * implementation of renounceOwnership to make it a no-op\n     */\n    function renounceOwnership() public override onlyOwner {} //solhint-disable-line no-empty-blocks\n}\n\nabstract contract AgentManagerEvents {\n    /**\n     * @notice Emitted whenever a Dispute is opened between two agents. This happens when a Guard submits\n     * their report for the Notary-signed statement to `StatementInbox`.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    event DisputeOpened(uint256 disputeIndex, uint32 guardIndex, uint32 notaryIndex);\n\n    /**\n     * @notice Emitted whenever a Dispute is resolved. This happens when an Agent who was in Dispute is slashed.\n     * Note: this won't be emitted, if an Agent was slashed without being in Dispute.\n     * @param disputeIndex  Index of the dispute in the global list of all opened disputes\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the rival agent in the Agent Merkle Tree\n     * @param fraudProver   Address who provided fraud proof to resolve the Dispute\n     */\n    event DisputeResolved(uint256 disputeIndex, uint32 slashedIndex, uint32 rivalIndex, address fraudProver);\n\n    // ═══════════════════════════════════════════════ DATA UPDATED ════════════════════════════════════════════════════\n\n    /**\n     * @notice Emitted whenever the root of the Agent Merkle Tree is updated.\n     * @param newRoot   New agent merkle root\n     */\n    event RootUpdated(bytes32 newRoot);\n\n    /**\n     * @notice Emitted whenever a status of the agent is updated.\n     * @dev Only Active/Unstaking/Resting/Slashed flags could be stored in the Agent Merkle Tree.\n     * Unknown flag is the default (zero) value and is used to represent agents that never\n     * interacted with the BondingManager contract.\n     * Fraudulent flag is the value for the agent who has been proven to commit fraud, but their\n     * status hasn't been updated to Slashed in the Agent Merkle Tree. This is due to the fact\n     * that the update of the status requires a merkle proof of the old status, and happens\n     * in a separate transaction because of that.\n     * @param flag      Flag defining agent status:\n     * @param domain    Domain assigned to the agent (ZERO for Guards)\n     * @param agent     Agent address\n     */\n    event StatusUpdated(AgentFlag flag, uint32 indexed domain, address indexed agent);\n}\n\ninterface IAgentManager {\n    /**\n     * @notice Allows Inbox to open a Dispute between a Guard and a Notary, if they are both not in Dispute already.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Guard or Notary is already in Dispute.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Allows contract owner to resolve a stuck Dispute.\n     * This could only be called if no fresh data has been submitted by the Notaries to the Inbox,\n     * which is required for the Dispute to be resolved naturally.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not contract owner.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * \u003e - `slashedAgent` is not in Dispute.\n     * \u003e - Less than `FRESH_DATA_TIMEOUT` has passed since the last Notary submission to the Inbox.\n     * @param slashedAgent  Agent that is being slashed\n     */\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external;\n\n    /**\n     * @notice Allows Inbox to slash an agent, if their fraud was proven.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Caller is not Inbox.\n     * \u003e - Domain doesn't match the saved agent domain.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param prover    Address that initially provided fraud proof\n     */\n    function slashAgent(uint32 domain, address agent, address prover) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the latest known root of the Agent Merkle Tree.\n     */\n    function agentRoot() external view returns (bytes32);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n\n    /**\n     * @notice Returns the number of opened Disputes.\n     * @dev This includes the Disputes that have been resolved already.\n     */\n    function getDisputesAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns information about the dispute with the given index.\n     * @dev Will revert if dispute with given index hasn't been opened yet.\n     * @param index             Dispute index\n     * @return guard            Address of the Guard in the Dispute\n     * @return notary           Address of the Notary in the Dispute\n     * @return slashedAgent     Address of the Agent who was slashed when Dispute was resolved\n     * @return fraudProver      Address who provided fraud proof to resolve the Dispute\n     * @return reportPayload    Raw payload with report data that led to the Dispute\n     * @return reportSignature  Guard signature for the report payload\n     */\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        );\n\n    /**\n     * @notice Returns the current Dispute status of a given agent. See Structures.sol for details.\n     * @dev Every returned value will be set to zero if agent was not slashed and is not in Dispute.\n     * `rival` and `disputePtr` will be set to zero if the agent was slashed without being in Dispute.\n     * @param agent         Agent address\n     * @return flag         Flag describing the current Dispute status for the agent: None/Pending/Slashed\n     * @return rival        Address of the rival agent in the Dispute\n     * @return fraudProver  Address who provided fraud proof to resolve the Dispute\n     * @return disputePtr   Index of the opened Dispute PLUS ONE. Zero if agent is not in Dispute.\n     */\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr);\n}\n\n/// Number is a compact representation of uint256, that is fit into 16 bits\n/// with the maximum relative error under 0.4%.\ntype Number is uint16;\n\nusing NumberLib for Number global;\n\n/// # Number\n/// Library for compact representation of uint256 numbers.\n/// - Number is stored using mantissa and exponent, each occupying 8 bits.\n/// - Numbers under 2**8 are stored as `mantissa` with `exponent = 0xFF`.\n/// - Numbers at least 2**8 are approximated as `(256 + mantissa) \u003c\u003c exponent`\n/// \u003e - `0 \u003c= mantissa \u003c 256`\n/// \u003e - `0 \u003c= exponent \u003c= 247` (`256 * 2**248` doesn't fit into uint256)\n/// # Number stack layout (from highest bits to lowest)\n///\n/// | Position   | Field    | Type  | Bytes |\n/// | ---------- | -------- | ----- | ----- |\n/// | (002..001] | mantissa | uint8 | 1     |\n/// | (001..000] | exponent | uint8 | 1     |\n\nlibrary NumberLib {\n    /// @dev Amount of bits to shift to mantissa field\n    uint16 private constant SHIFT_MANTISSA = 8;\n\n    /// @notice For bwad math (binary wad) we use 2**64 as \"wad\" unit.\n    /// @dev We are using not using 10**18 as wad, because it is not stored precisely in NumberLib.\n    uint256 internal constant BWAD_SHIFT = 64;\n    uint256 internal constant BWAD = 1 \u003c\u003c BWAD_SHIFT;\n    /// @notice ~0.1% in bwad units.\n    uint256 internal constant PER_MILLE_SHIFT = BWAD_SHIFT - 10;\n    uint256 internal constant PER_MILLE = 1 \u003c\u003c PER_MILLE_SHIFT;\n\n    /// @notice Compresses uint256 number into 16 bits.\n    function compress(uint256 value) internal pure returns (Number) {\n        // Find `msb` such as `2**msb \u003c= value \u003c 2**(msb + 1)`\n        uint256 msb = mostSignificantBit(value);\n        // We want to preserve 9 bits of precision.\n        // The highest bit is always 1, so we can skip it.\n        // The remaining 8 highest bits are stored as mantissa.\n        if (msb \u003c 8) {\n            // Value is less than 2**8, so we can use value as mantissa with \"-1\" exponent.\n            return _encode(uint8(value), 0xFF);\n        } else {\n            // We use `msb - 8` as exponent otherwise. Note that `exponent \u003e= 0`.\n            unchecked {\n                uint256 exponent = msb - 8;\n                // Shifting right by `msb-8` bits will shift the \"remaining 8 highest bits\" into the 8 lowest bits.\n                // uint8() will truncate the highest bit.\n                return _encode(uint8(value \u003e\u003e exponent), uint8(exponent));\n            }\n        }\n    }\n\n    /// @notice Decompresses 16 bits number into uint256.\n    /// @dev The outcome is an approximation of the original number: `(value - value / 256) \u003c number \u003c= value`.\n    function decompress(Number number) internal pure returns (uint256 value) {\n        // Isolate 8 highest bits as the mantissa.\n        uint256 mantissa = Number.unwrap(number) \u003e\u003e SHIFT_MANTISSA;\n        // This will truncate the highest bits, leaving only the exponent.\n        uint256 exponent = uint8(Number.unwrap(number));\n        if (exponent == 0xFF) {\n            return mantissa;\n        } else {\n            unchecked {\n                return (256 + mantissa) \u003c\u003c (exponent);\n            }\n        }\n    }\n\n    /// @dev Returns the most significant bit of `x`\n    /// https://solidity-by-example.org/bitwise/\n    function mostSignificantBit(uint256 x) internal pure returns (uint256 msb) {\n        // To find `msb` we determine it bit by bit, starting from the highest one.\n        // `0 \u003c= msb \u003c= 255`, so we start from the highest bit, 1\u003c\u003c7 == 128.\n        // If `x` is at least 2**128, then the highest bit of `x` is at least 128.\n        // solhint-disable no-inline-assembly\n        assembly {\n            // `f` is set to 1\u003c\u003c7 if `x \u003e= 2**128` and to 0 otherwise.\n            let f := shl(7, gt(x, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\n            // If `x \u003e= 2**128` then set `msb` highest bit to 1 and shift `x` right by 128.\n            // Otherwise, `msb` remains 0 and `x` remains unchanged.\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        // `x` is now at most 2**128 - 1. Continue the same way, the next highest bit is 1\u003c\u003c6 == 64.\n        assembly {\n            // `f` is set to 1\u003c\u003c6 if `x \u003e= 2**64` and to 0 otherwise.\n            let f := shl(6, gt(x, 0xFFFFFFFFFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c5 if `x \u003e= 2**32` and to 0 otherwise.\n            let f := shl(5, gt(x, 0xFFFFFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c4 if `x \u003e= 2**16` and to 0 otherwise.\n            let f := shl(4, gt(x, 0xFFFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c3 if `x \u003e= 2**8` and to 0 otherwise.\n            let f := shl(3, gt(x, 0xFF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c2 if `x \u003e= 2**4` and to 0 otherwise.\n            let f := shl(2, gt(x, 0xF))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1\u003c\u003c1 if `x \u003e= 2**2` and to 0 otherwise.\n            let f := shl(1, gt(x, 0x3))\n            x := shr(f, x)\n            msb := or(msb, f)\n        }\n        assembly {\n            // `f` is set to 1 if `x \u003e= 2**1` and to 0 otherwise.\n            let f := gt(x, 0x1)\n            msb := or(msb, f)\n        }\n    }\n\n    /// @dev Wraps (mantissa, exponent) pair into Number.\n    function _encode(uint8 mantissa, uint8 exponent) private pure returns (Number) {\n        return Number.wrap(uint16(mantissa) \u003c\u003c SHIFT_MANTISSA | uint16(exponent));\n    }\n}\n\n/// GasData in encoded data with \"basic information about gas prices\" for some chain.\ntype GasData is uint96;\n\nusing GasDataLib for GasData global;\n\n/// ChainGas is encoded data with given chain's \"basic information about gas prices\".\ntype ChainGas is uint128;\n\nusing GasDataLib for ChainGas global;\n\n/// Library for encoding and decoding GasData and ChainGas structs.\n/// # GasData\n/// `GasData` is a struct to store the \"basic information about gas prices\", that could\n/// be later used to approximate the cost of a message execution, and thus derive the\n/// minimal tip values for sending a message to the chain.\n/// \u003e - `GasData` is supposed to be cached by `GasOracle` contract, allowing to store the\n/// \u003e approximates instead of the exact values, and thus save on storage costs.\n/// \u003e - For instance, if `GasOracle` only updates the values on +- 10% change, having an\n/// \u003e 0.4% error on the approximates would be acceptable.\n/// `GasData` is supposed to be included in the Origin's state, which are synced across\n/// chains using Agent-signed snapshots and attestations.\n/// ## GasData stack layout (from highest bits to lowest)\n///\n/// | Position   | Field        | Type   | Bytes | Description                                         |\n/// | ---------- | ------------ | ------ | ----- | --------------------------------------------------- |\n/// | (012..010] | gasPrice     | uint16 | 2     | Gas price for the chain (in Wei per gas unit)       |\n/// | (010..008] | dataPrice    | uint16 | 2     | Calldata price (in Wei per byte of content)         |\n/// | (008..006] | execBuffer   | uint16 | 2     | Tx fee safety buffer for message execution (in Wei) |\n/// | (006..004] | amortAttCost | uint16 | 2     | Amortized cost for attestation submission (in Wei)  |\n/// | (004..002] | etherPrice   | uint16 | 2     | Chain's Ether Price / Mainnet Ether Price (in BWAD) |\n/// | (002..000] | markup       | uint16 | 2     | Markup for the message execution (in BWAD)          |\n/// \u003e See Number.sol for more details on `Number` type and BWAD (binary WAD) math.\n///\n/// ## ChainGas stack layout (from highest bits to lowest)\n///\n/// | Position   | Field   | Type   | Bytes | Description      |\n/// | ---------- | ------- | ------ | ----- | ---------------- |\n/// | (016..004] | gasData | uint96 | 12    | Chain's gas data |\n/// | (004..000] | domain  | uint32 | 4     | Chain's domain   |\nlibrary GasDataLib {\n    /// @dev Amount of bits to shift to gasPrice field\n    uint96 private constant SHIFT_GAS_PRICE = 10 * 8;\n    /// @dev Amount of bits to shift to dataPrice field\n    uint96 private constant SHIFT_DATA_PRICE = 8 * 8;\n    /// @dev Amount of bits to shift to execBuffer field\n    uint96 private constant SHIFT_EXEC_BUFFER = 6 * 8;\n    /// @dev Amount of bits to shift to amortAttCost field\n    uint96 private constant SHIFT_AMORT_ATT_COST = 4 * 8;\n    /// @dev Amount of bits to shift to etherPrice field\n    uint96 private constant SHIFT_ETHER_PRICE = 2 * 8;\n\n    /// @dev Amount of bits to shift to gasData field\n    uint128 private constant SHIFT_GAS_DATA = 4 * 8;\n\n    // ═════════════════════════════════════════════════ GAS DATA ══════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded GasData struct with the given fields.\n    /// @param gasPrice_        Gas price for the chain (in Wei per gas unit)\n    /// @param dataPrice_       Calldata price (in Wei per byte of content)\n    /// @param execBuffer_      Tx fee safety buffer for message execution (in Wei)\n    /// @param amortAttCost_    Amortized cost for attestation submission (in Wei)\n    /// @param etherPrice_      Ratio of Chain's Ether Price / Mainnet Ether Price (in BWAD)\n    /// @param markup_          Markup for the message execution (in BWAD)\n    function encodeGasData(\n        Number gasPrice_,\n        Number dataPrice_,\n        Number execBuffer_,\n        Number amortAttCost_,\n        Number etherPrice_,\n        Number markup_\n    ) internal pure returns (GasData) {\n        // forgefmt: disable-next-item\n        return GasData.wrap(\n            uint96(Number.unwrap(gasPrice_)) \u003c\u003c SHIFT_GAS_PRICE |\n            uint96(Number.unwrap(dataPrice_)) \u003c\u003c SHIFT_DATA_PRICE |\n            uint96(Number.unwrap(execBuffer_)) \u003c\u003c SHIFT_EXEC_BUFFER |\n            uint96(Number.unwrap(amortAttCost_)) \u003c\u003c SHIFT_AMORT_ATT_COST |\n            uint96(Number.unwrap(etherPrice_)) \u003c\u003c SHIFT_ETHER_PRICE |\n            uint96(Number.unwrap(markup_))\n        );\n    }\n\n    /// @notice Wraps padded uint256 value into GasData struct.\n    function wrapGasData(uint256 paddedGasData) internal pure returns (GasData) {\n        return GasData.wrap(uint96(paddedGasData));\n    }\n\n    /// @notice Returns the gas price, in Wei per gas unit.\n    function gasPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_GAS_PRICE));\n    }\n\n    /// @notice Returns the calldata price, in Wei per byte of content.\n    function dataPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_DATA_PRICE));\n    }\n\n    /// @notice Returns the tx fee safety buffer for message execution, in Wei.\n    function execBuffer(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_EXEC_BUFFER));\n    }\n\n    /// @notice Returns the amortized cost for attestation submission, in Wei.\n    function amortAttCost(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_AMORT_ATT_COST));\n    }\n\n    /// @notice Returns the ratio of Chain's Ether Price / Mainnet Ether Price, in BWAD math.\n    function etherPrice(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data) \u003e\u003e SHIFT_ETHER_PRICE));\n    }\n\n    /// @notice Returns the markup for the message execution, in BWAD math.\n    function markup(GasData data) internal pure returns (Number) {\n        // Casting to uint16 will truncate the highest bits, which is the behavior we want\n        return Number.wrap(uint16(GasData.unwrap(data)));\n    }\n\n    // ════════════════════════════════════════════════ CHAIN DATA ═════════════════════════════════════════════════════\n\n    /// @notice Returns an encoded ChainGas struct with the given fields.\n    /// @param gasData_ Chain's gas data\n    /// @param domain_  Chain's domain\n    function encodeChainGas(GasData gasData_, uint32 domain_) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(GasData.unwrap(gasData_)) \u003c\u003c SHIFT_GAS_DATA | uint128(domain_));\n    }\n\n    /// @notice Wraps padded uint256 value into ChainGas struct.\n    function wrapChainGas(uint256 paddedChainGas) internal pure returns (ChainGas) {\n        return ChainGas.wrap(uint128(paddedChainGas));\n    }\n\n    /// @notice Returns the chain's gas data.\n    function gasData(ChainGas data) internal pure returns (GasData) {\n        // Casting to uint96 will truncate the highest bits, which is the behavior we want\n        return GasData.wrap(uint96(ChainGas.unwrap(data) \u003e\u003e SHIFT_GAS_DATA));\n    }\n\n    /// @notice Returns the chain's domain.\n    function domain(ChainGas data) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(ChainGas.unwrap(data));\n    }\n\n    /// @notice Returns the hash for the list of ChainGas structs.\n    function snapGasHash(ChainGas[] memory snapGas) internal pure returns (bytes32 snapGasHash_) {\n        // Use assembly to calculate the hash of the array without copying it\n        // ChainGas takes a single word of storage, thus ChainGas[] is stored in the following way:\n        // 0x00: length of the array, in words\n        // 0x20: first ChainGas struct\n        // 0x40: second ChainGas struct\n        // And so on...\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            // Find the location where the array data starts, we add 0x20 to skip the length field\n            let loc := add(snapGas, 0x20)\n            // Load the length of the array (in words).\n            // Shifting left 5 bits is equivalent to multiplying by 32: this converts from words to bytes.\n            let len := shl(5, mload(snapGas))\n            // Calculate the hash of the array\n            snapGasHash_ := keccak256(loc, len)\n        }\n    }\n}\n\ninterface InterfaceDestination {\n    /**\n     * @notice Attempts to pass a quarantined Agent Merkle Root to a local Light Manager.\n     * @dev Will do nothing, if root optimistic period is not over.\n     * Note: both returned values can not be true.\n     * @return rootPassed   Whether the agent merkle root was passed to LightManager\n     * @return rootPending  Whether there is a pending agent merkle root left\n     */\n    function passAgentRoot() external returns (bool rootPassed, bool rootPending);\n\n    /**\n     * @notice Accepts an attestation, which local `AgentManager` verified to have been signed\n     * by an active Notary for this chain.\n     * \u003e Attestation is created whenever a Notary-signed snapshot is saved in Summit on Synapse Chain.\n     * - Saved Attestation could be later used to prove the inclusion of message in the Origin Merkle Tree.\n     * - Messages coming from chains included in the Attestation's snapshot could be proven.\n     * - Proof only exists for messages that were sent prior to when the Attestation's snapshot was taken.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Called by anyone other than local `AgentManager`.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is in Dispute.\n     * \u003e - Attestation's snapshot root has been previously submitted.\n     * Note: agentRoot and snapGas have been verified by the local `AgentManager`.\n     * @param notaryIndex       Index of Attestation Notary in Agent Merkle Tree\n     * @param sigIndex          Index of stored Notary signature\n     * @param attPayload        Raw payload with Attestation data\n     * @param agentRoot         Agent Merkle Root from the Attestation\n     * @param snapGas           Gas data for each chain in the Attestation's snapshot\n     * @return wasAccepted      Whether the Attestation was accepted\n     */\n    function acceptAttestation(\n        uint32 notaryIndex,\n        uint256 sigIndex,\n        bytes memory attPayload,\n        bytes32 agentRoot,\n        ChainGas[] memory snapGas\n    ) external returns (bool wasAccepted);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the total amount of Notaries attestations that have been accepted.\n     */\n    function attestationsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns a Notary-signed attestation with a given index.\n     * \u003e Index refers to the list of all attestations accepted by this contract.\n     * @dev Attestations are created on Synapse Chain whenever a Notary-signed snapshot is accepted by Summit.\n     * Will return an empty signature if this contract is deployed on Synapse Chain.\n     * @param index             Attestation index\n     * @return attPayload       Raw payload with Attestation data\n     * @return attSignature     Notary signature for the reported attestation\n     */\n    function getAttestation(uint256 index) external view returns (bytes memory attPayload, bytes memory attSignature);\n\n    /**\n     * @notice Returns the gas data for a given chain from the latest accepted attestation with that chain.\n     * @dev Will return empty values if there is no data for the domain,\n     * or if the notary who provided the data is in dispute.\n     * @param domain            Domain for the chain\n     * @return gasData          Gas data for the chain\n     * @return dataMaturity     Gas data age in seconds\n     */\n    function getGasData(uint32 domain) external view returns (GasData gasData, uint256 dataMaturity);\n\n    /**\n     * Returns status of Destination contract as far as snapshot/agent roots are concerned\n     * @return snapRootTime     Timestamp when latest snapshot root was accepted\n     * @return agentRootTime    Timestamp when latest agent root was accepted\n     * @return notaryIndex      Index of Notary who signed the latest agent root\n     */\n    function destStatus() external view returns (uint40 snapRootTime, uint40 agentRootTime, uint32 notaryIndex);\n\n    /**\n     * Returns Agent Merkle Root to be passed to LightManager once its optimistic period is over.\n     */\n    function nextAgentRoot() external view returns (bytes32);\n}\n\ninterface IStatementInbox {\n    // ══════════════════════════════════════════ SUBMIT AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshot()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Notary.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param snapSignature     Notary signature for the Snapshot\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshot(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory snapSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a Snapshot containing the reported State,\n     * as well as Notary signature for the Attestation created from this Snapshot.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithAttestation()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param srSignature       Guard signature for the report\n     * @param snapPayload       Raw payload with Snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithAttestation(\n        uint256 stateIndex,\n        bytes memory srSignature,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    /**\n     * @notice Accepts a Guard's state report signature, a proof of inclusion of the reported State in an Attestation,\n     * as well as Notary signature for the Attestation.\n     * \u003e StateReport is a Guard statement saying \"Reported state is invalid\".\n     * - This results in an opened Dispute between the Guard and the Notary.\n     * - Note: Guard could (but doesn't have to) form a StateReport and use other values from\n     * `verifyStateWithSnapshotProof()` successful call that led to Notary being slashed in remote Origin.\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State index is out of range.\n     * \u003e - The Guard or the Notary are already in a Dispute\n     * @param stateIndex        Index of the reported State in the Snapshot\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @param snapProof         Proof of inclusion of reported State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the Attestation\n     * @return wasAccepted      Whether the Report was accepted (resulting in Dispute between the agents)\n     */\n    function submitStateReportWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes memory srSignature,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool wasAccepted);\n\n    // ══════════════════════════════════════════ VERIFY AGENT STATEMENTS ══════════════════════════════════════════════\n\n    /**\n     * @notice Verifies a message receipt signed by the Notary.\n     * - Does nothing, if the receipt is valid (matches the saved receipt data for the referenced message).\n     * - Slashes the Notary, if the receipt is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt signer is not an active Notary.\n     * \u003e - Receipt's destination chain does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data\n     * @param rcptSignature     Notary signature for the receipt\n     * @return isValidReceipt   Whether the provided receipt is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyReceipt(bytes memory rcptPayload, bytes memory rcptSignature)\n        external\n        returns (bool isValidReceipt);\n\n    /**\n     * @notice Verifies a Guard's receipt report signature.\n     * - Does nothing, if the report is valid (if the reported receipt is invalid).\n     * - Slashes the Guard, if the report is invalid (if the reported receipt is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - Receipt payload is not properly formatted.\n     * \u003e - Receipt Report signer is not an active Guard.\n     * \u003e - Receipt does not refer to this chain.\n     * @param rcptPayload       Raw payload with Receipt data that Guard reports as invalid\n     * @param rrSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyReceiptReport(bytes memory rcptPayload, bytes memory rrSignature)\n        external\n        returns (bool isValidReport);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from the Snapshot.\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithAttestation(\n        uint256 stateIndex,\n        bytes memory snapPayload,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot, that was used for the Notary-signed attestation.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Notary, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Attestation payload is not properly formatted.\n     * \u003e - Attestation signer is not an active Notary.\n     * \u003e - Attestation's snapshot root is not equal to Merkle Root derived from State and Snapshot Proof.\n     * \u003e - Snapshot Proof's first element does not match the State metadata.\n     * \u003e - Snapshot Proof length exceeds Snapshot Tree Height.\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        Index of state in the snapshot\n     * @param statePayload      Raw payload with State data to check\n     * @param snapProof         Proof of inclusion of provided State's Left Leaf into Snapshot Merkle Tree\n     * @param attPayload        Raw payload with Attestation data\n     * @param attSignature      Notary signature for the attestation\n     * @return isValidState     Whether the provided state is valid.\n     *                          Notary is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshotProof(\n        uint256 stateIndex,\n        bytes memory statePayload,\n        bytes32[] memory snapProof,\n        bytes memory attPayload,\n        bytes memory attSignature\n    ) external returns (bool isValidState);\n\n    /**\n     * @notice Verifies a state from the snapshot (a list of states) signed by a Guard or a Notary.\n     * - Does nothing, if the state is valid (matches the historical state of this contract).\n     * - Slashes the Agent, if the state is invalid.\n     * \u003e Will revert if any of these is true:\n     * \u003e - Snapshot payload is not properly formatted.\n     * \u003e - Snapshot signer is not an active Agent.\n     * \u003e - State index is out of range.\n     * \u003e - State does not refer to this chain.\n     * @param stateIndex        State index to check\n     * @param snapPayload       Raw payload with snapshot data\n     * @param snapSignature     Agent signature for the snapshot\n     * @return isValidState     Whether the provided state is valid.\n     *                          Agent is slashed, if return value is FALSE.\n     */\n    function verifyStateWithSnapshot(uint256 stateIndex, bytes memory snapPayload, bytes memory snapSignature)\n        external\n        returns (bool isValidState);\n\n    /**\n     * @notice Verifies a Guard's state report signature.\n     *  - Does nothing, if the report is valid (if the reported state is invalid).\n     *  - Slashes the Guard, if the report is invalid (if the reported state is valid).\n     * \u003e Will revert if any of these is true:\n     * \u003e - State payload is not properly formatted.\n     * \u003e - State Report signer is not an active Guard.\n     * \u003e - Reported State does not refer to this chain.\n     * @param statePayload      Raw payload with State data that Guard reports as invalid\n     * @param srSignature       Guard signature for the report\n     * @return isValidReport    Whether the provided report is valid.\n     *                          Guard is slashed, if return value is FALSE.\n     */\n    function verifyStateReport(bytes memory statePayload, bytes memory srSignature)\n        external\n        returns (bool isValidReport);\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the amount of Guard Reports stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     */\n    function getReportsAmount() external view returns (uint256);\n\n    /**\n     * @notice Returns the Guard report with the given index stored in StatementInbox.\n     * \u003e Only reports that led to opening a Dispute are stored.\n     * @dev Will revert if report with given index doesn't exist.\n     * @param index             Report index\n     * @return statementPayload Raw payload with statement that Guard reported as invalid\n     * @return reportSignature  Guard signature for the report\n     */\n    function getGuardReport(uint256 index)\n        external\n        view\n        returns (bytes memory statementPayload, bytes memory reportSignature);\n\n    /**\n     * @notice Returns the signature with the given index stored in StatementInbox.\n     * @dev Will revert if signature with given index doesn't exist.\n     * @param index     Signature index\n     * @return          Raw payload with signature\n     */\n    function getStoredSignature(uint256 index) external view returns (bytes memory);\n}\n\n/// @notice `AgentManager` is used to keep track of all the bonded agents and their statuses.\n/// The exact logic of how the agent statuses are stored and updated is implemented in child contracts,\n/// and depends on whether the contract is used on Synapse Chain or on other chains.\n/// `AgentManager` is responsible for the following:\n/// - Keeping track of all the bonded agents and their statuses.\n/// - Keeping track of all the disputes between agents.\n/// - Notifying `AgentSecured` contracts about the opened and resolved disputes.\n/// - Notifying `AgentSecured` contracts about the slashed agents.\nabstract contract AgentManager is MessagingBase, AgentManagerEvents, IAgentManager {\n    struct AgentDispute {\n        DisputeFlag flag;\n        uint88 disputePtr;\n        address fraudProver;\n    }\n\n    // TODO: do we want to store the dispute timestamp?\n    struct OpenedDispute {\n        uint32 guardIndex;\n        uint32 notaryIndex;\n        uint32 slashedIndex;\n    }\n\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    address public origin;\n\n    address public destination;\n\n    address public inbox;\n\n    // (agent index =\u003e their dispute status)\n    mapping(uint256 =\u003e AgentDispute) internal _agentDispute;\n\n    // All disputes ever opened\n    OpenedDispute[] internal _disputes;\n\n    /// @dev gap for upgrade safety\n    uint256[45] private __GAP; // solhint-disable-line var-name-mixedcase\n\n    modifier onlyInbox() {\n        if (msg.sender != inbox) revert CallerNotInbox();\n        _;\n    }\n\n    // ════════════════════════════════════════════════ INITIALIZER ════════════════════════════════════════════════════\n\n    // solhint-disable-next-line func-name-mixedcase\n    function __AgentManager_init(address origin_, address destination_, address inbox_) internal onlyInitializing {\n        origin = origin_;\n        destination = destination_;\n        inbox = inbox_;\n    }\n\n    // ════════════════════════════════════════════════ ONLY OWNER ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    // solhint-disable-next-line ordering\n    function resolveStuckDispute(uint32 domain, address slashedAgent) external onlyOwner {\n        AgentDispute memory slashedDispute = _agentDispute[_getIndex(slashedAgent)];\n        if (slashedDispute.flag == DisputeFlag.None) revert DisputeNotOpened();\n        if (slashedDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        // Check if there has been no fresh data from the Notaries for a while.\n        (uint40 snapRootTime,,) = InterfaceDestination(destination).destStatus();\n        if (block.timestamp \u003c FRESH_DATA_TIMEOUT + snapRootTime) revert DisputeNotStuck();\n        // This will revert if domain doesn't match the agent's domain.\n        _slashAgent({domain: domain, agent: slashedAgent, prover: address(0)});\n    }\n\n    // ════════════════════════════════════════════════ ONLY INBOX ═════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external onlyInbox {\n        // Check that both agents are not in Dispute yet.\n        if (_agentDispute[guardIndex].flag != DisputeFlag.None) revert GuardInDispute();\n        if (_agentDispute[notaryIndex].flag != DisputeFlag.None) revert NotaryInDispute();\n        _disputes.push(OpenedDispute(guardIndex, notaryIndex, 0));\n        // Dispute is stored at length - 1, but we store the index + 1 to distinguish from \"not in dispute\".\n        uint256 disputePtr = _disputes.length;\n        _agentDispute[guardIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        _agentDispute[notaryIndex] = AgentDispute(DisputeFlag.Pending, uint88(disputePtr), address(0));\n        // Dispute index is length - 1. Note: report that initiated the dispute has the same index in `Inbox`.\n        emit DisputeOpened({disputeIndex: disputePtr - 1, guardIndex: guardIndex, notaryIndex: notaryIndex});\n        _notifyDisputeOpened(guardIndex, notaryIndex);\n    }\n\n    /// @inheritdoc IAgentManager\n    function slashAgent(uint32 domain, address agent, address prover) external onlyInbox {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status) {\n        agent = _getAgent(index);\n        if (agent != address(0)) status = agentStatus(agent);\n    }\n\n    /// @inheritdoc IAgentManager\n    function agentStatus(address agent) public view returns (AgentStatus memory status) {\n        status = _storedAgentStatus(agent);\n        // If agent was proven to commit fraud, but their slashing wasn't completed, return the Fraudulent flag.\n        if (_agentDispute[_getIndex(agent)].flag == DisputeFlag.Slashed \u0026\u0026 status.flag != AgentFlag.Slashed) {\n            status.flag = AgentFlag.Fraudulent;\n        }\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDisputesAmount() external view returns (uint256) {\n        return _disputes.length;\n    }\n\n    /// @inheritdoc IAgentManager\n    function getDispute(uint256 index)\n        external\n        view\n        returns (\n            address guard,\n            address notary,\n            address slashedAgent,\n            address fraudProver,\n            bytes memory reportPayload,\n            bytes memory reportSignature\n        )\n    {\n        if (index \u003e= _disputes.length) revert IndexOutOfRange();\n        OpenedDispute memory dispute = _disputes[index];\n        guard = _getAgent(dispute.guardIndex);\n        notary = _getAgent(dispute.notaryIndex);\n        if (dispute.slashedIndex \u003e 0) {\n            slashedAgent = _getAgent(dispute.slashedIndex);\n            fraudProver = _agentDispute[dispute.slashedIndex].fraudProver;\n        }\n        (reportPayload, reportSignature) = IStatementInbox(inbox).getGuardReport(index);\n    }\n\n    /// @inheritdoc IAgentManager\n    function disputeStatus(address agent)\n        external\n        view\n        returns (DisputeFlag flag, address rival, address fraudProver, uint256 disputePtr)\n    {\n        uint256 agentIndex = _getIndex(agent);\n        AgentDispute memory agentDispute = _agentDispute[agentIndex];\n        flag = agentDispute.flag;\n        fraudProver = agentDispute.fraudProver;\n        disputePtr = agentDispute.disputePtr;\n        if (disputePtr \u003e 0) {\n            OpenedDispute memory dispute = _disputes[disputePtr - 1];\n            rival = _getAgent(dispute.guardIndex == agentIndex ? dispute.notaryIndex : dispute.guardIndex);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Hook that is called after agent was slashed in AgentManager and AgentSecured contracts were notified.\n    // solhint-disable-next-line no-empty-blocks\n    function _afterAgentSlashed(uint32 domain, address agent, address prover) internal virtual {}\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal virtual;\n\n    /// @dev Child contract should implement the logic for notifying AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal virtual;\n\n    /// @dev Slashes the Agent and notifies the local Destination and Origin contracts about the slashed agent.\n    /// Should be called when the agent fraud was confirmed.\n    function _slashAgent(uint32 domain, address agent, address prover) internal {\n        // Check that agent is Active/Unstaking and that the domains match\n        AgentStatus memory status = _storedAgentStatus(agent);\n        status.verifyActiveUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // The \"stored\" agent status is not updated yet, however agentStatus() will return AgentFlag.Fraudulent\n        emit StatusUpdated(AgentFlag.Fraudulent, domain, agent);\n        // This will revert if the agent has been slashed earlier\n        _resolveDispute(status.index, prover);\n        // Call \"after slash\" hook - this allows Bonding/Light Manager to add custom \"after slash\" logic\n        _afterAgentSlashed(domain, agent, prover);\n    }\n\n    /// @dev Resolves a Dispute between a slashed Agent and their Rival (if there was one).\n    function _resolveDispute(uint32 slashedIndex, address prover) internal {\n        AgentDispute memory agentDispute = _agentDispute[slashedIndex];\n        if (agentDispute.flag == DisputeFlag.Slashed) revert DisputeAlreadyResolved();\n        agentDispute.flag = DisputeFlag.Slashed;\n        agentDispute.fraudProver = prover;\n        _agentDispute[slashedIndex] = agentDispute;\n        // Check if there was a opened dispute with the slashed agent\n        uint32 rivalIndex = 0;\n        if (agentDispute.disputePtr != 0) {\n            uint256 disputeIndex = agentDispute.disputePtr - 1;\n            OpenedDispute memory dispute = _disputes[disputeIndex];\n            _disputes[disputeIndex].slashedIndex = slashedIndex;\n            // Clear the dispute status for the rival\n            rivalIndex = dispute.notaryIndex == slashedIndex ? dispute.guardIndex : dispute.notaryIndex;\n            delete _agentDispute[rivalIndex];\n            emit DisputeResolved(disputeIndex, slashedIndex, rivalIndex, prover);\n        }\n        _notifyDisputeResolved(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Generates leaf to be saved in the Agent Merkle Tree\n    function _agentLeaf(AgentFlag flag, uint32 domain, address agent) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(flag, domain, agent));\n    }\n\n    /// @dev Returns the last known status for the agent from the Agent Merkle Tree.\n    /// Note: the actual agent status (returned by `agentStatus()`) may differ, if agent fraud was proven.\n    function _storedAgentStatus(address agent) internal view virtual returns (AgentStatus memory);\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view virtual returns (address);\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view virtual returns (uint256);\n}\n\ninterface IAgentSecured {\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * between a Guard and a Notary has been opened.\n     * @param guardIndex    Index of the Guard in the Agent Merkle Tree\n     * @param notaryIndex   Index of the Notary in the Agent Merkle Tree\n     */\n    function openDispute(uint32 guardIndex, uint32 notaryIndex) external;\n\n    /**\n     * @notice Local AgentManager should call this function to indicate that a dispute\n     * has been resolved due to one of the agents being slashed.\n     * \u003e `rivalIndex` will be ZERO, if the slashed agent was not in the Dispute.\n     * @param slashedIndex  Index of the slashed agent in the Agent Merkle Tree\n     * @param rivalIndex    Index of the their Dispute Rival in the Agent Merkle Tree\n     */\n    function resolveDispute(uint32 slashedIndex, uint32 rivalIndex) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the address of the local AgentManager contract, which is treated as\n     * the \"source of truth\" for agent statuses.\n     */\n    function agentManager() external view returns (address);\n\n    /**\n     * @notice Returns the address of the local Inbox contract, which is treated as\n     * the \"source of truth\" for agent-signed statements.\n     * @dev Inbox passes verified agent statements to `IAgentSecured` contract.\n     */\n    function inbox() external view returns (address);\n\n    /**\n     * @notice Returns (flag, domain, index) for a given agent. See Structures.sol for details.\n     * @dev Will return AgentFlag.Fraudulent for agents that have been proven to commit fraud,\n     * but their status is not updated to Slashed yet.\n     * @param agent     Agent address\n     * @return          Status for the given agent: (flag, domain, index).\n     */\n    function agentStatus(address agent) external view returns (AgentStatus memory);\n\n    /**\n     * @notice Returns agent address and their current status for a given agent index.\n     * @dev Will return empty values if agent with given index doesn't exist.\n     * @param index     Agent index in the Agent Merkle Tree\n     * @return agent    Agent address\n     * @return status   Status for the given agent: (flag, domain, index)\n     */\n    function getAgent(uint256 index) external view returns (address agent, AgentStatus memory status);\n}\n\ninterface InterfaceBondingManager {\n    // ═══════════════════════════════════════════════ AGENTS LOGIC ════════════════════════════════════════════════════\n\n    /**\n     * @notice Adds a new agent for the domain. This is either a fresh address (Inactive),\n     * or an agent who used to be active on the same domain before (Resting).\n     * @dev Inactive: `proof` should be the proof of inclusion of an empty leaf\n     * having index following the last added agent in the tree.\n     * @dev Resting: `proof` should be the proof of inclusion of the agent leaf\n     * with Resting flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent will be active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Inactive/Resting status for the agent\n     */\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Initiates the unstaking of the agent bond. Agent signature is immediately no longer\n     * considered valid on Synapse Chain, and will be invalid on other chains once the Light Manager\n     * updates their agent merkle root on these chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent is active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the Active status for the agent\n     */\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the unstaking of the agent bond. Agent signature is no longer considered\n     * valid on any of the chains.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the unstaking status for the agent\n     */\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Completes the slashing of the agent bond. Agent signature is no longer considered\n     * valid under the updated Agent Merkle Root.\n     * @dev `proof` should be the proof of inclusion of the agent leaf\n     * with Active/Unstaking flag having index previously assigned to the agent.\n     * @param domain    Domain where the Agent was active\n     * @param agent     Address of the Agent\n     * @param proof     Merkle proof of the active/unstaking status for the agent\n     */\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external;\n\n    /**\n     * @notice Remote AgentManager should call this function to indicate that the agent\n     * has been proven to commit fraud on the origin chain.\n     * @dev This initiates the process of agent slashing. It could be immediately\n     * completed by anyone calling completeSlashing() providing a correct merkle proof\n     * for the OLD agent status.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param domain        Domain where the slashed agent was active\n     * @param agent         Address of the slashed Agent\n     * @param prover        Address that initially provided fraud proof to remote AgentManager\n     * @return magicValue   Selector of this function\n     */\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue);\n\n    /**\n     * @notice Withdraws locked base message tips from requested domain Origin to the recipient.\n     * Issues a call to a local Origin contract, or sends a manager message to the remote chain.\n     * @dev Could only be called by the Summit contract.\n     * @param recipient     Address to withdraw tips to\n     * @param origin        Domain where tips need to be withdrawn\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint32 origin, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns all active agents for a given domain.\n     * @param domain    Domain to get agents from (ZERO for Guards)\n     * @param agents    List of active agents for the domain\n     */\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents);\n\n    /**\n     * @notice Returns a leaf representing the current status of agent in the Agent Merkle Tree.\n     * @dev Will return an empty leaf, if agent is not added to the tree yet.\n     * @param agent     Agent address\n     * @return leaf     Agent leaf in the Agent Merkle Tree\n     */\n    function agentLeaf(address agent) external view returns (bytes32 leaf);\n\n    /**\n     * @notice Returns a total amount of leafs representing known agents.\n     * @dev This includes active, unstaking, resting and slashed agents.\n     * This also includes an empty leaf as the very first entry.\n     */\n    function leafsAmount() external view returns (uint256 amount);\n\n    /**\n     * @notice Returns a full list of leafs from the Agent Merkle Tree.\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     */\n    function allLeafs() external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a list of leafs from the Agent Merkle Tree\n     * with indexes [indexFrom .. indexFrom + amount).\n     * @dev This might consume a lot of gas, do not use this on-chain.\n     * @dev Will return less than `amount` entries, if indexFrom + amount \u003e leafsAmount\n     */\n    function getLeafs(uint256 indexFrom, uint256 amount) external view returns (bytes32[] memory leafs);\n\n    /**\n     * @notice Returns a proof of inclusion of the agent in the Agent Merkle Tree.\n     * @dev Will return a proof for an empty leaf, if agent is not added to the tree yet.\n     * This proof could be used by ANY next new agent that calls {addAgent}.\n     * @dev This WILL consume a lot of gas, do not use this on-chain.\n     * @dev The alternative way to create a proof is to fetch the full list of leafs using\n     * either {allLeafs} or {getLeafs}, and create a merkle proof from that.\n     * @param agent     Agent address\n     * @return proof    Merkle proof for the agent\n     */\n    function getProof(address agent) external view returns (bytes32[] memory proof);\n}\n\ninterface InterfaceLightManager {\n    /**\n     * @notice Updates agent status, using a proof against the latest known Agent Merkle Root.\n     * @dev Will revert if the provided proof doesn't match the latest merkle root.\n     * @param agent     Agent address\n     * @param status    Structure specifying agent status: (flag, domain, index)\n     * @param proof     Merkle proof of Active status for the agent\n     */\n    function updateAgentStatus(address agent, AgentStatus memory status, bytes32[] memory proof) external;\n\n    /**\n     * @notice Updates the root of Agent Merkle Tree that the Light Manager is tracking.\n     * Could be only called by a local Destination contract, which is supposed to\n     * verify the attested Agent Merkle Roots.\n     * @param agentRoot     New Agent Merkle Root\n     */\n    function setAgentRoot(bytes32 agentRoot) external;\n\n    /**\n     * @notice Withdraws locked base message tips from local Origin to the recipient.\n     * @dev Could only be remote-called by BondingManager contract on Synapse Chain.\n     * Note: as an extra security check this function returns its own selector, so that\n     * Destination could verify that a \"remote\" function was called when executing a manager message.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function remoteWithdrawTips(uint32 msgOrigin, uint256 proofMaturity, address recipient, uint256 amount)\n        external\n        returns (bytes4 magicValue);\n}\n\ninterface InterfaceOrigin {\n    // ═══════════════════════════════════════════════ SEND MESSAGES ═══════════════════════════════════════════════════\n\n    /**\n     * @notice Send a message to the recipient located on destination domain.\n     * @dev Recipient has to conform to IMessageRecipient interface, otherwise message won't be delivered.\n     * @param destination           Domain of destination chain\n     * @param recipient             Address of recipient on destination chain as bytes32\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param paddedRequest         Padded encoded message execution request on destination chain\n     * @param content               Raw bytes content of message\n     * @return messageNonce         Nonce of the sent message\n     * @return messageHash          Hash of the sent message\n     */\n    function sendBaseMessage(\n        uint32 destination,\n        bytes32 recipient,\n        uint32 optimisticPeriod,\n        uint256 paddedRequest,\n        bytes memory content\n    ) external payable returns (uint32 messageNonce, bytes32 messageHash);\n\n    /**\n     * @notice Send a manager message to the destination domain.\n     * @dev This could only be called by AgentManager, which takes care of encoding the calldata payload.\n     * Note: (msgOrigin, proofMaturity) security args will be added to payload on the destination chain\n     * so that the AgentManager could verify where the Manager Message came from and how mature is the proof.\n     * Note: function is not payable, as no tips are required for sending a manager message.\n     * @param destination           Domain of destination chain\n     * @param optimisticPeriod      Optimistic period for message execution on destination chain\n     * @param payload               Payload for calling AgentManager on destination chain (with extra security args)\n     */\n    function sendManagerMessage(uint32 destination, uint32 optimisticPeriod, bytes memory payload)\n        external\n        returns (uint32 messageNonce, bytes32 messageHash);\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Withdraws locked base message tips to the recipient.\n     * @dev Could only be called by a local AgentManager.\n     * @param recipient     Address to withdraw tips to\n     * @param amount        Tips value to withdraw\n     */\n    function withdrawTips(address recipient, uint256 amount) external;\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /**\n     * @notice Returns the minimum tips value for sending a message to a given destination.\n     * @dev Using at least `tipsValue` as `msg.value` for `sendBaseMessage()`\n     * will guarantee that the message will be accepted.\n     * @param destination       Domain of destination chain\n     * @param paddedRequest     Padded encoded message execution request on destination chain\n     * @param contentLength     The length of the message content\n     * @return tipsValue        Minimum tips value for a message to be accepted\n     */\n    function getMinimumTipsValue(uint32 destination, uint256 paddedRequest, uint256 contentLength)\n        external\n        view\n        returns (uint256 tipsValue);\n}\n\n/// @notice BondingManager keeps track of all existing agents on the Synapse Chain.\n/// It utilizes a dynamic Merkle Tree to store the agent information. This enables passing only the\n/// latest merkle root of this tree (referenced as the Agent Merkle Root) to the remote chains,\n/// so that the agents could \"register\" themselves by proving their current status against this root.\n/// `BondingManager` is responsible for the following:\n/// - Keeping track of all existing agents, as well as their statuses. In the MVP version there is no token staking,\n///   which will be added in the future. Nonetheless, the agent statuses are still stored in the Merkle Tree, and\n///   the agent slashing is still possible, though with no reward/penalty for the reporter/reported.\n/// - Marking agents as \"ready to be slashed\" once their fraud is proven on the local or remote chain. Anyone could\n///   complete the slashing by providing the proof of the current agent status against the current Agent Merkle Root.\n/// - Sending Manager Message to remote `LightManager` to withdraw collected tips from the remote chain.\n/// - Accepting Manager Message from remote `LightManager` to slash agents on the Synapse Chain, when their fraud\n///   is proven on the remote chain.\ncontract BondingManager is AgentManager, InterfaceBondingManager {\n    // ══════════════════════════════════════════════════ STORAGE ══════════════════════════════════════════════════════\n\n    // The address of the Summit contract.\n    address public summit;\n\n    // (agent =\u003e their status)\n    mapping(address =\u003e AgentStatus) private _agentMap;\n\n    // (domain =\u003e past and current agents for domain)\n    mapping(uint32 =\u003e address[]) private _domainAgents;\n\n    // A list of all agent accounts. First entry is address(0) to make agent indexes start from 1.\n    address[] private _agents;\n\n    // Merkle Tree for Agents.\n    // leafs[0] = 0\n    // leafs[index \u003e 0] = keccak(agentFlag, domain, _agents[index])\n    DynamicTree private _agentTree;\n\n    // ═════════════════════════════════════════ CONSTRUCTOR \u0026 INITIALIZER ═════════════════════════════════════════════\n\n    constructor(uint32 domain) MessagingBase(\"0.0.3\", domain) {\n        if (domain != SYNAPSE_DOMAIN) revert MustBeSynapseDomain();\n    }\n\n    function initialize(address origin_, address destination_, address inbox_, address summit_) external initializer {\n        __AgentManager_init(origin_, destination_, inbox_);\n        summit = summit_;\n        __Ownable_init();\n        // Insert a zero address to make indexes for Agents start from 1.\n        // Zeroed index is supposed to be used as a sentinel value meaning \"no agent\".\n        _agents.push(address(0));\n    }\n\n    // ════════════════════════════════════════════ AGENTS LOGIC (MVP) ═════════════════════════════════════════════════\n\n    // TODO: remove these MVP functions once token staking is implemented\n\n    /// @inheritdoc InterfaceBondingManager\n    function addAgent(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        if (domain == SYNAPSE_DOMAIN) revert SynapseDomainForbidden();\n        // Check the STORED status of the added agent in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Agent index in `_agents`\n        uint32 index;\n        // Leaf representing currently saved agent information in the tree\n        bytes32 oldValue;\n        if (status.flag == AgentFlag.Unknown) {\n            // Unknown address could be added to any domain\n            // New agent will need to be added to `_agents` list: could not have more than 2**32 agents\n            if (_agents.length \u003e= type(uint32).max) revert MerkleTreeFull();\n            index = uint32(_agents.length);\n            // Current leaf for index is bytes32(0), which is already assigned to `leaf`\n            _agents.push(agent);\n            _domainAgents[domain].push(agent);\n        } else if (status.flag == AgentFlag.Resting \u0026\u0026 status.domain == domain) {\n            // Resting agent could be only added back to the same domain\n            // Agent is already in `_agents`, fetch the saved index\n            index = status.index;\n            // Generate the current leaf for the agent\n            // oldValue includes the domain information, so we didn't had to check it above.\n            // However, we are still doing this check to have a more appropriate revert string,\n            // if a resting agent is requesting to be added to another domain.\n            oldValue = _agentLeaf(AgentFlag.Resting, domain, agent);\n        } else {\n            // Any other flag indicates that agent could not be added\n            revert AgentCantBeAdded();\n        }\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Active, domain, index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function initiateUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only initiate the unstaking for the active agent for the domain\n        status.verifyActive();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree.\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is initiating the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Active, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Unstaking, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeUnstaking(uint32 domain, address agent, bytes32[] memory proof) external onlyOwner {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the unstaking, if it was previously initiated\n        // TODO: add more checks (time-based, possibly collecting info from other chains)\n        status.verifyUnstaking();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if an agent is completing the unstaking, but specifies incorrect domain.\n        bytes32 oldValue = _agentLeaf(AgentFlag.Unstaking, domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Resting, domain, status.index), agent);\n    }\n\n    // ══════════════════════════════════════════════ SLASHING LOGIC ═══════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function completeSlashing(uint32 domain, address agent, bytes32[] memory proof) external {\n        // Check the CURRENT status of the unstaking agent\n        AgentStatus memory status = agentStatus(agent);\n        // Could only complete the slashing, if it was previously initiated\n        status.verifyFraudulent();\n        if (status.domain != domain) revert IncorrectAgentDomain();\n        // Leaf representing currently saved agent information in the tree\n        // oldValue includes the domain information, so we didn't had to check it above.\n        // However, we are still doing this check to have a more appropriate revert string,\n        // if anyone is completing the slashing, but specifies incorrect domain.\n        bytes32 oldValue = _getLeaf(agent);\n        // This will revert if the proof for the old value is incorrect\n        _updateLeaf(oldValue, proof, AgentStatus(AgentFlag.Slashed, domain, status.index), agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function remoteSlashAgent(uint32 msgOrigin, uint256 proofMaturity, uint32 domain, address agent, address prover)\n        external\n        returns (bytes4 magicValue)\n    {\n        // Only destination can pass Manager Messages\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Check that merkle proof is mature enough\n        // TODO: separate constant for slashing optimistic period\n        if (proofMaturity \u003c BONDING_OPTIMISTIC_PERIOD) revert SlashAgentOptimisticPeriod();\n        // TODO: do we need to save this?\n        msgOrigin;\n        // Slash agent and notify local AgentSecured contracts\n        _slashAgent(domain, agent, prover);\n        // Magic value to return is selector of the called function\n        return this.remoteSlashAgent.selector;\n    }\n\n    // ════════════════════════════════════════════════ TIPS LOGIC ═════════════════════════════════════════════════════\n\n    /// @inheritdoc InterfaceBondingManager\n    function withdrawTips(address recipient, uint32 origin_, uint256 amount) external {\n        // Only Summit can withdraw tips\n        if (msg.sender != summit) revert CallerNotSummit();\n        if (origin_ == localDomain) {\n            // Call local Origin to withdraw tips\n            InterfaceOrigin(address(origin)).withdrawTips(recipient, amount);\n        } else {\n            // For remote chains: send a manager message to remote LightManager to handle the withdrawal\n            // remoteWithdrawTips(msgOrigin, proofMaturity, recipient, amount) with the first two security args omitted\n            InterfaceOrigin(origin).sendManagerMessage({\n                destination: origin_,\n                optimisticPeriod: BONDING_OPTIMISTIC_PERIOD,\n                payload: abi.encodeWithSelector(InterfaceLightManager.remoteWithdrawTips.selector, recipient, amount)\n            });\n        }\n    }\n\n    // ═══════════════════════════════════════════════════ VIEWS ═══════════════════════════════════════════════════════\n\n    /// @inheritdoc IAgentManager\n    function agentRoot() external view override returns (bytes32) {\n        return _agentTree.root;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getActiveAgents(uint32 domain) external view returns (address[] memory agents) {\n        uint256 amount = _domainAgents[domain].length;\n        agents = new address[](amount);\n        uint256 activeAgents = 0;\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            address agent = _domainAgents[domain][i];\n            if (agentStatus(agent).flag == AgentFlag.Active) {\n                agents[activeAgents++] = agent;\n            }\n        }\n        if (activeAgents != amount) {\n            // Shrink the returned array by storing the required length in memory\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                mstore(agents, activeAgents)\n            }\n        }\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function agentLeaf(address agent) external view returns (bytes32 leaf) {\n        return _getLeaf(agent);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function leafsAmount() external view returns (uint256 amount) {\n        return _agents.length;\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getProof(address agent) external view returns (bytes32[] memory proof) {\n        bytes32[] memory leafs = allLeafs();\n        // Use the STORED agent status from the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        // Use next available index for unknown agents\n        uint256 index = status.flag == AgentFlag.Unknown ? _agents.length : status.index;\n        return MerkleMath.calculateProof(leafs, index);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function allLeafs() public view returns (bytes32[] memory leafs) {\n        return getLeafs(0, _agents.length);\n    }\n\n    /// @inheritdoc InterfaceBondingManager\n    function getLeafs(uint256 indexFrom, uint256 amount) public view returns (bytes32[] memory leafs) {\n        uint256 amountTotal = _agents.length;\n        if (indexFrom \u003e= amountTotal) revert IndexOutOfRange();\n        if (indexFrom + amount \u003e amountTotal) {\n            amount = amountTotal - indexFrom;\n        }\n        leafs = new bytes32[](amount);\n        for (uint256 i = 0; i \u003c amount; ++i) {\n            leafs[i] = _getLeaf(indexFrom + i);\n        }\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL LOGIC ═══════════════════════════════════════════════════\n\n    /// @dev Updates value in the Agent Merkle Tree to reflect the `newStatus`.\n    /// Will revert, if supplied proof for the old value is incorrect.\n    function _updateLeaf(bytes32 oldValue, bytes32[] memory proof, AgentStatus memory newStatus, address agent)\n        internal\n    {\n        // New leaf value for the agent in the Agent Merkle Tree\n        bytes32 newValue = _agentLeaf(newStatus.flag, newStatus.domain, agent);\n        // This will revert if the proof for the old value is incorrect\n        bytes32 newRoot = _agentTree.update(newStatus.index, oldValue, proof, newValue);\n        _agentMap[agent] = newStatus;\n        emit StatusUpdated(newStatus.flag, newStatus.domain, agent);\n        emit RootUpdated(newRoot);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the opened dispute.\n    function _notifyDisputeOpened(uint32 guardIndex, uint32 notaryIndex) internal override {\n        IAgentSecured(destination).openDispute(guardIndex, notaryIndex);\n        IAgentSecured(summit).openDispute(guardIndex, notaryIndex);\n    }\n\n    /// @dev Notify local AgentSecured contracts about the resolved dispute.\n    function _notifyDisputeResolved(uint32 slashedIndex, uint32 rivalIndex) internal override {\n        IAgentSecured(destination).resolveDispute(slashedIndex, rivalIndex);\n        IAgentSecured(summit).resolveDispute(slashedIndex, rivalIndex);\n    }\n\n    // ══════════════════════════════════════════════ INTERNAL VIEWS ═══════════════════════════════════════════════════\n\n    /// @dev Returns the status of the agent.\n    function _storedAgentStatus(address agent) internal view override returns (AgentStatus memory) {\n        return _agentMap[agent];\n    }\n\n    /// @dev Returns agent address for the given index. Returns zero for non existing indexes.\n    function _getAgent(uint256 index) internal view override returns (address agent) {\n        if (index \u003c _agents.length) {\n            agent = _agents[index];\n        }\n    }\n\n    /// @dev Returns the index of the agent in the Agent Merkle Tree. Returns zero for non existing agents.\n    function _getIndex(address agent) internal view override returns (uint256 index) {\n        return _agentMap[agent].index;\n    }\n\n    /// @dev Returns the current leaf representing agent in the Agent Merkle Tree.\n    function _getLeaf(address agent) internal view returns (bytes32 leaf) {\n        // Get the agent status STORED in the merkle tree\n        AgentStatus memory status = _storedAgentStatus(agent);\n        if (status.flag != AgentFlag.Unknown) {\n            return _agentLeaf(status.flag, status.domain, agent);\n        }\n        // Return empty leaf for unknown _agents\n    }\n\n    /// @dev Returns a leaf from the Agent Merkle Tree with a given index.\n    function _getLeaf(uint256 index) internal view returns (bytes32 leaf) {\n        if (index != 0) {\n            return _getLeaf(_agents[index]);\n        }\n        // Return empty leaf for a zero index\n    }\n}\n\nabstract contract AgentManagerHarness is AgentManager {\n    /// @notice Exposes _slashAgent for testing.\n    function slashAgentExposed(uint32 domain, address agent, address prover) external {\n        _slashAgent(domain, agent, prover);\n    }\n\n    // ══════════════════════════════════════════ REMOTE CALLED FUNCTIONS ══════════════════════════════════════════════\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFunc(address, uint8, bytes32 data) external view returns (bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        if (data == bytes32(0)) data = \"GM\";\n        // Data is not zero, so this will differ from the required magic value\n        return this.sensitiveMockFunc.selector ^ data;\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncVoid(uint16, bytes4, bytes32) external view {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Doesn't return anything\n    }\n\n    /// @notice Function that should NOT be callable by a Manager Message.\n    /// Note: first two arguments could be of other types than (msgOrigin, proofMaturity)\n    function sensitiveMockFuncOver32Bytes(uint16, bytes4, bytes32 data) external view returns (bytes4, bytes32) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        // Returning over 32 bytes should also fail the magic value test\n        return (this.sensitiveMockFuncOver32Bytes.selector, data);\n    }\n\n    function remoteMockFunc(uint32, uint256, bytes32) external view returns (bytes4) {\n        if (msg.sender != destination) revert CallerNotDestination();\n        return this.remoteMockFunc.selector;\n    }\n}\n\n// solhint-disable no-empty-blocks\ncontract BondingManagerHarness is BondingManager, AgentManagerHarness {\n    constructor(uint32 domain) BondingManager(domain) {}\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"","srcMapRuntime":"","abiDefinition":[{"inputs":[],"name":"IncorrectVersionLength","type":"error"},{"inputs":[],"name":"version","outputs":[{"internalType":"string","name":"versionString","type":"string"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"notice":"Version getter for contracts. Doesn't use any storage slots, meaning it will never cause any troubles with the upgradeable contracts. For instance, this contract can be added or removed from the inheritance chain without shifting the storage layout.","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"_data":{"details":"Bytes representation of the \"version string\". Strings with length over 32 are not supported!"},"_length":{"details":"Length of the \"version string\""}},"title":"Versioned","version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IncorrectVersionLength\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"versionString\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"_data\":{\"details\":\"Bytes representation of the \\\"version string\\\". Strings with length over 32 are not supported!\"},\"_length\":{\"details\":\"Length of the \\\"version string\\\"\"}},\"title\":\"Versioned\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Version getter for contracts. Doesn't use any storage slots, meaning it will never cause any troubles with the upgradeable contracts. For instance, this contract can be added or removed from the inheritance chain without shifting the storage layout.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/BondingManagerHarness.t.sol\":\"Versioned\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/BondingManagerHarness.t.sol\":{\"keccak256\":\"0x0dad46acc1e2fea8e8c8a60a642d422b19fd5be4150e2655d3c7cf802750bc7e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1fed480d7b2bbcee7b34c14c3a973fe5ece2bbd6335a630bd80a2344d85f858\",\"dweb:/ipfs/Qmbo4CRPWV6oPqMy5HPGHbTAyLsnVDrLbe8iANDCPSj629\"]}},\"version\":1}"},"hashes":{"version()":"54fd4d50"}}}
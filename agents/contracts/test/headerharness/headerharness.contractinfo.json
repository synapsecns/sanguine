{"solidity/HeaderHarness.t.sol:HeaderHarness":{"code":"0x608060405234801561001057600080fd5b5061028b806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063622db53811610050578063622db538146101345780637668f03b14610147578063ce03fdab1461015a57600080fd5b806303a69e5d14610077578063138ac42f146100fb57806344f6891e1461010c575b600080fd5b6100d56100853660046101e8565b60008063ffffffff8316602085901b67ffffffff0000000016604087901b6bffffffff000000000000000016606089901b6fffffffff000000000000000000000000161717179695505050505050565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d561010936600461023c565b90565b61011f61011a36600461023c565b61016d565b60405163ffffffff90911681526020016100f2565b61011f61014236600461023c565b61018d565b61011f61015536600461023c565b61019f565b61011f61016836600461023c565b6101b9565b60006101878260201c6bffffffffffffffffffffffff1690565b92915050565b60006101878260601c63ffffffff1690565b60006fffffffffffffffffffffffffffffffff8216610187565b60006101878260401c67ffffffffffffffff1690565b803563ffffffff811681146101e357600080fd5b919050565b600080600080608085870312156101fe57600080fd5b610207856101cf565b9350610215602086016101cf565b9250610223604086016101cf565b9150610231606086016101cf565b905092959194509250565b60006020828403121561024e57600080fd5b503591905056fea26469706673582212200066fdc3a25f85f2481e12c09881883be20625eadc022bb2b75174ea7d6d19a564736f6c63430008110033","runtime-code":"0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063622db53811610050578063622db538146101345780637668f03b14610147578063ce03fdab1461015a57600080fd5b806303a69e5d14610077578063138ac42f146100fb57806344f6891e1461010c575b600080fd5b6100d56100853660046101e8565b60008063ffffffff8316602085901b67ffffffff0000000016604087901b6bffffffff000000000000000016606089901b6fffffffff000000000000000000000000161717179695505050505050565b6040516fffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100d561010936600461023c565b90565b61011f61011a36600461023c565b61016d565b60405163ffffffff90911681526020016100f2565b61011f61014236600461023c565b61018d565b61011f61015536600461023c565b61019f565b61011f61016836600461023c565b6101b9565b60006101878260201c6bffffffffffffffffffffffff1690565b92915050565b60006101878260601c63ffffffff1690565b60006fffffffffffffffffffffffffffffffff8216610187565b60006101878260401c67ffffffffffffffff1690565b803563ffffffff811681146101e357600080fd5b919050565b600080600080608085870312156101fe57600080fd5b610207856101cf565b9350610215602086016101cf565b9250610223604086016101cf565b9150610231606086016101cf565b905092959194509250565b60006020828403121561024e57600080fd5b503591905056fea26469706673582212200066fdc3a25f85f2481e12c09881883be20625eadc022bb2b75174ea7d6d19a564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// Header is encoded data with \"general routing information\".\ntype Header is uint128;\n\nusing HeaderLib for Header global;\n\n/// Library for formatting _the header part_ of _the messages used by Origin and Destination_.\n/// - Header represents general information for routing a Message for Origin and Destination.\n/// - Header occupies a single storage word, and thus is stored on stack instead of being stored in memory.\n///\n/// # Header stack layout (from highest bits to lowest)\n///\n/// | Position   | Field            | Type   | Bytes | Description                             |\n/// | ---------- | ---------------- | ------ | ----- | --------------------------------------- |\n/// | (016..012] | origin           | uint32 | 4     | Domain where message originated         |\n/// | (012..008] | nonce            | uint32 | 4     | Message nonce on the origin domain      |\n/// | (008..004] | destination      | uint32 | 4     | Domain where message will be executed   |\n/// | (004..000] | optimisticPeriod | uint32 | 4     | Optimistic period that will be enforced |\nlibrary HeaderLib {\n    /// @dev Amount of bits to shift to origin field\n    uint128 private constant SHIFT_ORIGIN = 12 * 8;\n    /// @dev Amount of bits to shift to nonce field\n    uint128 private constant SHIFT_NONCE = 8 * 8;\n    /// @dev Amount of bits to shift to destination field\n    uint128 private constant SHIFT_DESTINATION = 4 * 8;\n\n    /// @notice Returns an encoded header with provided fields\n    /// @param origin_              Domain of origin chain\n    /// @param nonce_               Message nonce on origin chain\n    /// @param destination_         Domain of destination chain\n    /// @param optimisticPeriod_    Optimistic period for message execution\n    function encodeHeader(uint32 origin_, uint32 nonce_, uint32 destination_, uint32 optimisticPeriod_)\n        internal\n        pure\n        returns (Header)\n    {\n        return Header.wrap(\n            uint128(origin_) \u003c\u003c SHIFT_ORIGIN | uint128(nonce_) \u003c\u003c SHIFT_NONCE\n                | uint128(destination_) \u003c\u003c SHIFT_DESTINATION | uint128(optimisticPeriod_)\n        );\n    }\n\n    /// @notice Wraps the padded encoded request into a Header-typed value.\n    /// @dev The \"padded\" header is simply an encoded header casted to uint256 (highest bits are set to zero).\n    /// Casting to uint256 is done automatically in Solidity, so no extra actions from consumers are needed.\n    /// The highest bits are discarded, so that the contracts dealing with encoded headers\n    /// don't need to be updated, if a new field is added.\n    function wrapPadded(uint256 paddedHeader) internal pure returns (Header) {\n        return Header.wrap(uint128(paddedHeader));\n    }\n\n    // ══════════════════════════════════════════════ HEADER SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns header's origin field\n    function origin(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header) \u003e\u003e SHIFT_ORIGIN);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header) \u003e\u003e SHIFT_NONCE);\n    }\n\n    /// @notice Returns header's destination field\n    function destination(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header) \u003e\u003e SHIFT_DESTINATION);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticPeriod(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header));\n    }\n}\n\n/**\n * @notice Exposes Header methods for testing against golang.\n */\ncontract HeaderHarness {\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    /// @notice Returns header's origin field\n    function origin(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).origin();\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).nonce();\n    }\n\n    /// @notice Returns header's destination field\n    function destination(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).destination();\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticPeriod(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).optimisticPeriod();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function encodeHeader(uint32 origin_, uint32 nonce_, uint32 destination_, uint32 optimisticPeriod_)\n        public\n        pure\n        returns (uint128)\n    {\n        Header header = HeaderLib.encodeHeader(origin_, nonce_, destination_, optimisticPeriod_);\n        return Header.unwrap(header);\n    }\n\n    function wrapPadded(uint256 paddedHeader) public pure returns (uint128) {\n        Header header = HeaderLib.wrapPadded(paddedHeader);\n        return Header.unwrap(header);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"4259:2091:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"4259:2091:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5864:301;;;;;;:::i;:::-;6009:7;;2129:26;;;1459:5;2084:42;;;;;1345:5;2035:30;;;;;1242:6;2000:32;;;;;:65;:126;:155;6032:88;5864:301;-1:-1:-1;;;;;;5864:301:0;;;;764:34:1;752:47;;;734:66;;722:2;707:18;5864:301:0;;;;;;;;6171:177;;;;;;:::i;:::-;6290:12;6171:177;5172:144;;;;;;:::i;:::-;;:::i;:::-;;;1170:10:1;1158:23;;;1140:42;;1128:2;1113:18;5172:144:0;996:192:1;4798:134:0;;;;;;:::i;:::-;;:::i;5380:154::-;;;;;;:::i;:::-;;:::i;4983:132::-;;;;;;:::i;:::-;;:::i;5172:144::-;5236:6;5261:48;5282:12;1459:5;3855:42;;;;3673:232;5261:48;5254:55;5172:144;-1:-1:-1;;5172:144:0:o;4798:134::-;4857:6;4882:43;4903:12;1242:6;3300:37;;;;3123:222;5380:154;5449:6;5474:51;;;:53;2624:131;4983:132;5041:6;5066:42;5087:12;1345:5;3572:36;;;;3396:220;14:163:1;81:20;;141:10;130:22;;120:33;;110:61;;167:1;164;157:12;110:61;14:163;;;:::o;182:401::-;264:6;272;280;288;341:3;329:9;320:7;316:23;312:33;309:53;;;358:1;355;348:12;309:53;381:28;399:9;381:28;:::i;:::-;371:38;;428:37;461:2;450:9;446:18;428:37;:::i;:::-;418:47;;484:37;517:2;506:9;502:18;484:37;:::i;:::-;474:47;;540:37;573:2;562:9;558:18;540:37;:::i;:::-;530:47;;182:401;;;;;;;:::o;811:180::-;870:6;923:2;911:9;902:7;898:23;894:32;891:52;;;939:1;936;929:12;891:52;-1:-1:-1;962:23:1;;811:180;-1:-1:-1;811:180:1:o","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"paddedHeader","type":"uint256"}],"name":"destination","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint32","name":"origin_","type":"uint32"},{"internalType":"uint32","name":"nonce_","type":"uint32"},{"internalType":"uint32","name":"destination_","type":"uint32"},{"internalType":"uint32","name":"optimisticPeriod_","type":"uint32"}],"name":"encodeHeader","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedHeader","type":"uint256"}],"name":"nonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedHeader","type":"uint256"}],"name":"optimisticPeriod","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedHeader","type":"uint256"}],"name":"origin","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedHeader","type":"uint256"}],"name":"wrapPadded","outputs":[{"internalType":"uint128","name":"","type":"uint128"}],"stateMutability":"pure","type":"function"}],"userDoc":{"kind":"user","methods":{"destination(uint256)":{"notice":"Returns header's destination field"},"nonce(uint256)":{"notice":"Returns header's nonce field"},"optimisticPeriod(uint256)":{"notice":"Returns header's optimistic seconds field"},"origin(uint256)":{"notice":"Returns header's origin field"}},"notice":"Exposes Header methods for testing against golang.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedHeader\",\"type\":\"uint256\"}],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"origin_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nonce_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"destination_\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"optimisticPeriod_\",\"type\":\"uint32\"}],\"name\":\"encodeHeader\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedHeader\",\"type\":\"uint256\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedHeader\",\"type\":\"uint256\"}],\"name\":\"optimisticPeriod\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedHeader\",\"type\":\"uint256\"}],\"name\":\"origin\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedHeader\",\"type\":\"uint256\"}],\"name\":\"wrapPadded\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"destination(uint256)\":{\"notice\":\"Returns header's destination field\"},\"nonce(uint256)\":{\"notice\":\"Returns header's nonce field\"},\"optimisticPeriod(uint256)\":{\"notice\":\"Returns header's optimistic seconds field\"},\"origin(uint256)\":{\"notice\":\"Returns header's origin field\"}},\"notice\":\"Exposes Header methods for testing against golang.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/HeaderHarness.t.sol\":\"HeaderHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/HeaderHarness.t.sol\":{\"keccak256\":\"0x0b8fa34fb4c72f51271f2bed00cddafddcad139ab354f8dbcd100b491aa0db29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d22649cc2511c2f22afcff9fc40dda42cebf6f9ee06e60efe1394dbb4a71d1f\",\"dweb:/ipfs/QmVVccKzYRndYqiXa2gPdkbQamqYzJ4sxsHhwbJWL9i9t9\"]}},\"version\":1}"},"hashes":{"destination(uint256)":"44f6891e","encodeHeader(uint32,uint32,uint32,uint32)":"03a69e5d","nonce(uint256)":"ce03fdab","optimisticPeriod(uint256)":"7668f03b","origin(uint256)":"622db538","wrapPadded(uint256)":"138ac42f"}},"solidity/HeaderHarness.t.sol:HeaderLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122090345f0b965e8e7eac21402b9f6321faccbb6e79a384570352ad2387a6b801c864736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122090345f0b965e8e7eac21402b9f6321faccbb6e79a384570352ad2387a6b801c864736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\n/// Header is encoded data with \"general routing information\".\ntype Header is uint128;\n\nusing HeaderLib for Header global;\n\n/// Library for formatting _the header part_ of _the messages used by Origin and Destination_.\n/// - Header represents general information for routing a Message for Origin and Destination.\n/// - Header occupies a single storage word, and thus is stored on stack instead of being stored in memory.\n///\n/// # Header stack layout (from highest bits to lowest)\n///\n/// | Position   | Field            | Type   | Bytes | Description                             |\n/// | ---------- | ---------------- | ------ | ----- | --------------------------------------- |\n/// | (016..012] | origin           | uint32 | 4     | Domain where message originated         |\n/// | (012..008] | nonce            | uint32 | 4     | Message nonce on the origin domain      |\n/// | (008..004] | destination      | uint32 | 4     | Domain where message will be executed   |\n/// | (004..000] | optimisticPeriod | uint32 | 4     | Optimistic period that will be enforced |\nlibrary HeaderLib {\n    /// @dev Amount of bits to shift to origin field\n    uint128 private constant SHIFT_ORIGIN = 12 * 8;\n    /// @dev Amount of bits to shift to nonce field\n    uint128 private constant SHIFT_NONCE = 8 * 8;\n    /// @dev Amount of bits to shift to destination field\n    uint128 private constant SHIFT_DESTINATION = 4 * 8;\n\n    /// @notice Returns an encoded header with provided fields\n    /// @param origin_              Domain of origin chain\n    /// @param nonce_               Message nonce on origin chain\n    /// @param destination_         Domain of destination chain\n    /// @param optimisticPeriod_    Optimistic period for message execution\n    function encodeHeader(uint32 origin_, uint32 nonce_, uint32 destination_, uint32 optimisticPeriod_)\n        internal\n        pure\n        returns (Header)\n    {\n        return Header.wrap(\n            uint128(origin_) \u003c\u003c SHIFT_ORIGIN | uint128(nonce_) \u003c\u003c SHIFT_NONCE\n                | uint128(destination_) \u003c\u003c SHIFT_DESTINATION | uint128(optimisticPeriod_)\n        );\n    }\n\n    /// @notice Wraps the padded encoded request into a Header-typed value.\n    /// @dev The \"padded\" header is simply an encoded header casted to uint256 (highest bits are set to zero).\n    /// Casting to uint256 is done automatically in Solidity, so no extra actions from consumers are needed.\n    /// The highest bits are discarded, so that the contracts dealing with encoded headers\n    /// don't need to be updated, if a new field is added.\n    function wrapPadded(uint256 paddedHeader) internal pure returns (Header) {\n        return Header.wrap(uint128(paddedHeader));\n    }\n\n    // ══════════════════════════════════════════════ HEADER SLICING ═══════════════════════════════════════════════════\n\n    /// @notice Returns header's origin field\n    function origin(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header) \u003e\u003e SHIFT_ORIGIN);\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header) \u003e\u003e SHIFT_NONCE);\n    }\n\n    /// @notice Returns header's destination field\n    function destination(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header) \u003e\u003e SHIFT_DESTINATION);\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticPeriod(Header header) internal pure returns (uint32) {\n        // Casting to uint32 will truncate the highest bits, which is the behavior we want\n        return uint32(Header.unwrap(header));\n    }\n}\n\n/**\n * @notice Exposes Header methods for testing against golang.\n */\ncontract HeaderHarness {\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    /// @notice Returns header's origin field\n    function origin(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).origin();\n    }\n\n    /// @notice Returns header's nonce field\n    function nonce(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).nonce();\n    }\n\n    /// @notice Returns header's destination field\n    function destination(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).destination();\n    }\n\n    /// @notice Returns header's optimistic seconds field\n    function optimisticPeriod(uint256 paddedHeader) public pure returns (uint32) {\n        return HeaderLib.wrapPadded(paddedHeader).optimisticPeriod();\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function encodeHeader(uint32 origin_, uint32 nonce_, uint32 destination_, uint32 optimisticPeriod_)\n        public\n        pure\n        returns (uint128)\n    {\n        Header header = HeaderLib.encodeHeader(origin_, nonce_, destination_, optimisticPeriod_);\n        return Header.unwrap(header);\n    }\n\n    function wrapPadded(uint256 paddedHeader) public pure returns (uint128) {\n        Header header = HeaderLib.wrapPadded(paddedHeader);\n        return Header.unwrap(header);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"1125:3062:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1125:3062:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"1125:3062:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"Library for formatting _the header part_ of _the messages used by Origin and Destination_. - Header represents general information for routing a Message for Origin and Destination. - Header occupies a single storage word, and thus is stored on stack instead of being stored in memory. # Header stack layout (from highest bits to lowest) | Position   | Field            | Type   | Bytes | Description                             | | ---------- | ---------------- | ------ | ----- | --------------------------------------- | | (016..012] | origin           | uint32 | 4     | Domain where message originated         | | (012..008] | nonce            | uint32 | 4     | Message nonce on the origin domain      | | (008..004] | destination      | uint32 | 4     | Domain where message will be executed   | | (004..000] | optimisticPeriod | uint32 | 4     | Optimistic period that will be enforced |","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SHIFT_DESTINATION":{"details":"Amount of bits to shift to destination field"},"SHIFT_NONCE":{"details":"Amount of bits to shift to nonce field"},"SHIFT_ORIGIN":{"details":"Amount of bits to shift to origin field"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SHIFT_DESTINATION\":{\"details\":\"Amount of bits to shift to destination field\"},\"SHIFT_NONCE\":{\"details\":\"Amount of bits to shift to nonce field\"},\"SHIFT_ORIGIN\":{\"details\":\"Amount of bits to shift to origin field\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Library for formatting _the header part_ of _the messages used by Origin and Destination_. - Header represents general information for routing a Message for Origin and Destination. - Header occupies a single storage word, and thus is stored on stack instead of being stored in memory. # Header stack layout (from highest bits to lowest) | Position   | Field            | Type   | Bytes | Description                             | | ---------- | ---------------- | ------ | ----- | --------------------------------------- | | (016..012] | origin           | uint32 | 4     | Domain where message originated         | | (012..008] | nonce            | uint32 | 4     | Message nonce on the origin domain      | | (008..004] | destination      | uint32 | 4     | Domain where message will be executed   | | (004..000] | optimisticPeriod | uint32 | 4     | Optimistic period that will be enforced |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/HeaderHarness.t.sol\":\"HeaderLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/HeaderHarness.t.sol\":{\"keccak256\":\"0x0b8fa34fb4c72f51271f2bed00cddafddcad139ab354f8dbcd100b491aa0db29\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2d22649cc2511c2f22afcff9fc40dda42cebf6f9ee06e60efe1394dbb4a71d1f\",\"dweb:/ipfs/QmVVccKzYRndYqiXa2gPdkbQamqYzJ4sxsHhwbJWL9i9t9\"]}},\"version\":1}"},"hashes":{}}}
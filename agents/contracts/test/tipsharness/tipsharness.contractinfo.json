{"solidity/TipsHarness.t.sol:TipsHarness":{"code":"0x608060405234801561001057600080fd5b506104d3806100206000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063725bd46311610076578063b284b6091161005b578063b284b609146101ae578063c5a46ee6146101c1578063ecbf034e146101d457600080fd5b8063725bd4631461019357806386450b881461019b57600080fd5b80630453e80e146100a8578063138ac42f146100d95780634c63c701146100fa5780634f2a6f9e1461010d575b600080fd5b6100bb6100b63660046103b7565b6101e2565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100ec6100e73660046103b7565b6101f4565b6040519081526020016100d0565b6100bb6101083660046103b7565b6101fc565b6100ec61011b3660046103ed565b60008067ffffffffffffffff8316604085901b6fffffffffffffffff000000000000000016608087901b77ffffffffffffffff000000000000000000000000000000001660c089901b7fffffffffffffffff000000000000000000000000000000000000000000000000161717179695505050505050565b6100ec610208565b6100ec6101a9366004610441565b610211565b6100bb6101bc3660046103b7565b610224565b6100ec6101cf3660046103b7565b610230565b6100bb6100e73660046103b7565b60006101ee8260801c90565b92915050565b6000816101ee565b60006101ee8260401c90565b600080806101ee565b600061021d838361023b565b9392505050565b60006101ee8260c01c90565b60006101ee82610347565b60008061024784610347565b9050808310156102b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f546970732076616c756520746f6f206c6f77000000000000000000000000000060448201526064015b60405180910390fd5b80830360201c67ffffffffffffffff8567ffffffffffffffff168201111561033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f54697073206f766572666c6f770000000000000000000000000000000000000060448201526064016102af565b939093019392505050565b60008167ffffffffffffffff1661035e8360401c90565b67ffffffffffffffff166103728460801c90565b67ffffffffffffffff166103868560c01c90565b67ffffffffffffffff1661039a9190610463565b6103a49190610463565b6103ae9190610463565b60201b92915050565b6000602082840312156103c957600080fd5b5035919050565b803567ffffffffffffffff811681146103e857600080fd5b919050565b6000806000806080858703121561040357600080fd5b61040c856103d0565b935061041a602086016103d0565b9250610428604086016103d0565b9150610436606086016103d0565b905092959194509250565b6000806040838503121561045457600080fd5b50508035926020909101359150565b808201808211156101ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122018b9e97969dca298966c24b3a1bcc20106545776bf4772c8806552402dc2ffb564736f6c63430008110033","runtime-code":"0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063725bd46311610076578063b284b6091161005b578063b284b609146101ae578063c5a46ee6146101c1578063ecbf034e146101d457600080fd5b8063725bd4631461019357806386450b881461019b57600080fd5b80630453e80e146100a8578063138ac42f146100d95780634c63c701146100fa5780634f2a6f9e1461010d575b600080fd5b6100bb6100b63660046103b7565b6101e2565b60405167ffffffffffffffff90911681526020015b60405180910390f35b6100ec6100e73660046103b7565b6101f4565b6040519081526020016100d0565b6100bb6101083660046103b7565b6101fc565b6100ec61011b3660046103ed565b60008067ffffffffffffffff8316604085901b6fffffffffffffffff000000000000000016608087901b77ffffffffffffffff000000000000000000000000000000001660c089901b7fffffffffffffffff000000000000000000000000000000000000000000000000161717179695505050505050565b6100ec610208565b6100ec6101a9366004610441565b610211565b6100bb6101bc3660046103b7565b610224565b6100ec6101cf3660046103b7565b610230565b6100bb6100e73660046103b7565b60006101ee8260801c90565b92915050565b6000816101ee565b60006101ee8260401c90565b600080806101ee565b600061021d838361023b565b9392505050565b60006101ee8260c01c90565b60006101ee82610347565b60008061024784610347565b9050808310156102b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f546970732076616c756520746f6f206c6f77000000000000000000000000000060448201526064015b60405180910390fd5b80830360201c67ffffffffffffffff8567ffffffffffffffff168201111561033c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f54697073206f766572666c6f770000000000000000000000000000000000000060448201526064016102af565b939093019392505050565b60008167ffffffffffffffff1661035e8360401c90565b67ffffffffffffffff166103728460801c90565b67ffffffffffffffff166103868560c01c90565b67ffffffffffffffff1661039a9190610463565b6103a49190610463565b6103ae9190610463565b60201b92915050565b6000602082840312156103c957600080fd5b5035919050565b803567ffffffffffffffff811681146103e857600080fd5b919050565b6000806000806080858703121561040357600080fd5b61040c856103d0565b935061041a602086016103d0565b9250610428604086016103d0565b9150610436606086016103d0565b905092959194509250565b6000806040838503121561045457600080fd5b50508035926020909101359150565b808201808211156101ee577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea264697066735822122018b9e97969dca298966c24b3a1bcc20106545776bf4772c8806552402dc2ffb564736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Request.sol: (uint64,uint96): 8+12\nuint256 constant RECEIPT_BODY_LENGTH = 133;\n/// @dev See Receipt.sol: body + tips\nuint256 constant RECEIPT_LENGTH = RECEIPT_BODY_LENGTH + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant REQUEST_LENGTH = 20;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant RECEIPT_REPORT_SALT = keccak256(\"RECEIPT_REPORT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n/// Tips is encoded data with \"tips paid for sending a base message\".\n/// Note: even though uint256 is also an underlying type for MemView, Tips is stored ON STACK.\ntype Tips is uint256;\n\nusing TipsLib for Tips global;\n\n/// # Tips\n/// Library for formatting _the tips part_ of _the base messages_.\n///\n/// ## How the tips are awarded\n/// Tips are paid for sending a base message, and are split across all the agents that\n/// made the message execution on destination chain possible.\n/// ### Summit tips\n/// Split between:\n///     - Guard posting a snapshot with state ST_G for the origin chain.\n///     - Notary posting a snapshot SN_N using ST_G. This creates attestation A.\n///     - Notary posting a message receipt after it is executed on destination chain.\n/// ### Attestation tips\n/// Paid to:\n///     - Notary posting attestation A to destination chain.\n/// ### Execution tips\n/// Paid to:\n///     - First executor performing a valid execution attempt (correct proofs, optimistic period over),\n///      using attestation A to prove message inclusion on origin chain, whether the recipient reverted or not.\n/// ### Delivery tips.\n/// Paid to:\n///     - Executor who successfully executed the message on destination chain.\n///\n/// ## Tips encoding\n/// - Tips occupy a single storage word, and thus are stored on stack instead of being stored in memory.\n/// - The actual tip values should be determined by multiplying stored values by divided by TIPS_MULTIPLIER=2**32.\n/// - Tips are packed into a single word of storage, while allowing real values up to ~8*10**28 for every tip category.\n/// \u003e The only downside is that the \"real tip values\" are now multiplies of ~4*10**9, which should be fine even for\n/// the chains with the most expensive gas currency.\n/// # Tips stack layout (from highest bits to lowest)\n///\n/// | Position   | Field          | Type   | Bytes | Description                                                |\n/// | ---------- | -------------- | ------ | ----- | ---------------------------------------------------------- |\n/// | (032..024] | summitTip      | uint64 | 8     | Tip for agents interacting with Summit contract            |\n/// | (024..016] | attestationTip | uint64 | 8     | Tip for Notary posting attestation to Destination contract |\n/// | (016..008] | executionTip   | uint64 | 8     | Tip for valid execution attempt on destination chain       |\n/// | (008..000] | deliveryTip    | uint64 | 8     | Tip for successful message delivery on destination chain   |\n\nlibrary TipsLib {\n    /// @dev Amount of bits to shift to summitTip field\n    uint256 private constant SHIFT_SUMMIT_TIP = 24 * 8;\n    /// @dev Amount of bits to shift to attestationTip field\n    uint256 private constant SHIFT_ATTESTATION_TIP = 16 * 8;\n    /// @dev Amount of bits to shift to executionTip field\n    uint256 private constant SHIFT_EXECUTION_TIP = 8 * 8;\n\n    // ═══════════════════════════════════════════════════ TIPS ════════════════════════════════════════════════════════\n\n    /// @notice Returns encoded tips with the given fields\n    /// @param summitTip_        Tip for agents interacting with Summit contract, divided by TIPS_MULTIPLIER\n    /// @param attestationTip_   Tip for Notary posting attestation to Destination contract, divided by TIPS_MULTIPLIER\n    /// @param executionTip_     Tip for valid execution attempt on destination chain, divided by TIPS_MULTIPLIER\n    /// @param deliveryTip_      Tip for successful message delivery on destination chain, divided by TIPS_MULTIPLIER\n    function encodeTips(uint64 summitTip_, uint64 attestationTip_, uint64 executionTip_, uint64 deliveryTip_)\n        internal\n        pure\n        returns (Tips)\n    {\n        return Tips.wrap(\n            uint256(summitTip_) \u003c\u003c SHIFT_SUMMIT_TIP | uint256(attestationTip_) \u003c\u003c SHIFT_ATTESTATION_TIP\n                | uint256(executionTip_) \u003c\u003c SHIFT_EXECUTION_TIP | uint256(deliveryTip_)\n        );\n    }\n\n    /// @notice Wraps the padded encoded tips into a Tips-typed value.\n    /// @dev There is no actual padding here, as the underlying type is already uint256,\n    /// but we include this function for consistency and to be future-proof, if tips will eventually use anything\n    /// smaller than uint256.\n    function wrapPadded(uint256 paddedTips) internal pure returns (Tips) {\n        return Tips.wrap(paddedTips);\n    }\n\n    /**\n     * @notice Returns a formatted Tips payload specifying empty tips.\n     * @return Formatted tips\n     */\n    function emptyTips() internal pure returns (Tips) {\n        return Tips.wrap(0);\n    }\n\n    // ═══════════════════════════════════════════════ TIPS SLICING ════════════════════════════════════════════════════\n\n    /// @notice Returns summitTip field\n    function summitTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips) \u003e\u003e SHIFT_SUMMIT_TIP);\n    }\n\n    /// @notice Returns attestationTip field\n    function attestationTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips) \u003e\u003e SHIFT_ATTESTATION_TIP);\n    }\n\n    /// @notice Returns executionTip field\n    function executionTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips) \u003e\u003e SHIFT_EXECUTION_TIP);\n    }\n\n    /// @notice Returns deliveryTip field\n    function deliveryTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips));\n    }\n\n    // ════════════════════════════════════════════════ TIPS VALUE ═════════════════════════════════════════════════════\n\n    /// @notice Returns total value of the tips payload.\n    /// This is the sum of the encoded values, scaled up by TIPS_MULTIPLIER\n    function value(Tips tips) internal pure returns (uint256 value_) {\n        value_ = uint256(tips.summitTip()) + tips.attestationTip() + tips.executionTip() + tips.deliveryTip();\n        value_ \u003c\u003c= TIPS_GRANULARITY;\n    }\n\n    /// @notice Increases the delivery tip to match the new value.\n    function matchValue(Tips tips, uint256 newValue) internal pure returns (Tips newTips) {\n        uint256 oldValue = tips.value();\n        require(newValue \u003e= oldValue, \"Tips value too low\");\n        // We want to increase the delivery tip, while keeping the other tips the same\n        unchecked {\n            uint256 delta = (newValue - oldValue) \u003e\u003e TIPS_GRANULARITY;\n            // delta fits into uint224, as TIPS_GRANULARITY is 32, so this never overflows\n            require(delta + tips.deliveryTip() \u003c= type(uint64).max, \"Tips overflow\");\n            // Delivery tips is last 8 bytes, so we can just add delta to the tips value\n            newTips = Tips.wrap(Tips.unwrap(tips) + delta);\n        }\n    }\n}\n\n/**\n * @notice Exposes TipsLib methods for testing against golang.\n */\ncontract TipsHarness {\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    /// @notice Returns summitTip field\n    function summitTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).summitTip();\n    }\n\n    /// @notice Returns attestationTip field\n    function attestationTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).attestationTip();\n    }\n\n    /// @notice Returns executionTip field\n    function executionTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).executionTip();\n    }\n\n    /// @notice Returns deliveryTip field\n    function deliveryTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).deliveryTip();\n    }\n\n    /// @notice Returns total tip amount.\n    function value(uint256 paddedTips) public pure returns (uint256) {\n        return TipsLib.wrapPadded(paddedTips).value();\n    }\n\n    /// @notice Increases the delivery tip to match the new value.\n    function matchValue(Tips tips, uint256 newValue) public pure returns (Tips newTips) {\n        return tips.matchValue(newValue);\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function encodeTips(uint64 summitTip_, uint64 attestationTip_, uint64 executionTip_, uint64 deliveryTip_)\n        public\n        pure\n        returns (uint256)\n    {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Tips tips = TipsLib.encodeTips(summitTip_, attestationTip_, executionTip_, deliveryTip_);\n        return Tips.unwrap(tips);\n    }\n\n    function wrapPadded(uint256 paddedTips) public pure returns (uint256) {\n        return Tips.unwrap(TipsLib.wrapPadded(paddedTips));\n    }\n\n    function emptyTips() public pure returns (uint256) {\n        // TODO: figure out why this leaves `TipsLib.emptyTips()` uncovered\n        Tips tips = TipsLib.emptyTips();\n        return Tips.unwrap(tips);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"11465:2766:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"11465:2766:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;12181:144;;;;;;:::i;:::-;;:::i;:::-;;;373:18:1;361:31;;;343:50;;331:2;316:18;12181:144:0;;;;;;;;13877:137;;;;;;:::i;:::-;;:::i;:::-;;;550:25:1;;;538:2;523:18;13877:137:0;404:177:1;12374:140:0;;;;;;:::i;:::-;;:::i;13411:460::-;;;;;;:::i;:::-;13562:7;;7858:21;;;6629:5;7810:45;;;;;6511:6;7742:49;;;;;6389:6;7700:39;;;;;:91;:155;:179;13742:88;13411:460;-1:-1:-1;;;;;;13411:460:0;14020:209;;;:::i;12948:133::-;;;;;;:::i;:::-;;:::i;11996:134::-;;;;;;:::i;:::-;;:::i;12748:127::-;;;;;;:::i;:::-;;:::i;12562:138::-;;;;;;:::i;12181:144::-;12246:6;12271:47;12290:10;6511:6;9348:42;;9167:231;12271:47;12264:54;12181:144;-1:-1:-1;;12181:144:0:o;13877:137::-;13938:7;13995:10;13976:30;8206:114;12374:140;12437:6;12462:45;12481:10;6629:5;9626:40;;9447:227;14020:209;14062:7;;;14169:19;8443:86;12948:133;13018:12;13049:25;:4;13065:8;13049:15;:25::i;:::-;13042:32;12948:133;-1:-1:-1;;;12948:133:0:o;11996:134::-;12056:6;12081:42;12100:10;6389:6;9071:37;;8895:221;12748:127;12804:7;12830:38;12849:10;12830:36;:38::i;10681:709::-;10753:12;10777:16;10796:12;:4;:10;:12::i;:::-;10777:31;;10838:8;10826;:20;;10818:51;;;;;;;1853:2:1;10818:51:0;;;1835:21:1;1892:2;1872:18;;;1865:30;1931:20;1911:18;;;1904:48;1969:18;;10818:51:0;;;;;;;;;11007:19;;;2301:2;11006:41;11190:16;11168:4;11160:26;;:5;:26;:46;;11152:72;;;;;;;2200:2:1;11152:72:0;;;2182:21:1;2239:2;2219:18;;;2212:30;2278:15;2258:18;;;2251:43;2311:18;;11152:72:0;1998:337:1;11152:72:0;11347:25;;;;;10681:709;-1:-1:-1;;;10681:709:0:o;10388:220::-;10437:14;10546:4;10472:92;;10524:19;:4;6629:5;9626:40;;9447:227;10524:19;10472:71;;10500:21;:4;6511:6;9348:42;;9167:231;10500:21;10472:49;;10480:16;:4;6389:6;9071:37;;8895:221;10480:16;10472:25;;:49;;;;:::i;:::-;:71;;;;:::i;:::-;:92;;;;:::i;:::-;2301:2;10574:27;;10388:220;-1:-1:-1;;10388:220:0:o;14:180:1:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:1;;14:180;-1:-1:-1;14:180:1:o;586:171::-;653:20;;713:18;702:30;;692:41;;682:69;;747:1;744;737:12;682:69;586:171;;;:::o;762:401::-;844:6;852;860;868;921:3;909:9;900:7;896:23;892:33;889:53;;;938:1;935;928:12;889:53;961:28;979:9;961:28;:::i;:::-;951:38;;1008:37;1041:2;1030:9;1026:18;1008:37;:::i;:::-;998:47;;1064:37;1097:2;1086:9;1082:18;1064:37;:::i;:::-;1054:47;;1120:37;1153:2;1142:9;1138:18;1120:37;:::i;:::-;1110:47;;762:401;;;;;;;:::o;1168:272::-;1260:6;1268;1321:2;1309:9;1300:7;1296:23;1292:32;1289:52;;;1337:1;1334;1327:12;1289:52;-1:-1:-1;;1360:23:1;;;1430:2;1415:18;;;1402:32;;-1:-1:-1;1168:272:1:o;2340:279::-;2405:9;;;2426:10;;;2423:190;;;2469:77;2466:1;2459:88;2570:4;2567:1;2560:15;2598:4;2595:1;2588:15","abiDefinition":[{"inputs":[{"internalType":"uint256","name":"paddedTips","type":"uint256"}],"name":"attestationTip","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedTips","type":"uint256"}],"name":"deliveryTip","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[],"name":"emptyTips","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint64","name":"summitTip_","type":"uint64"},{"internalType":"uint64","name":"attestationTip_","type":"uint64"},{"internalType":"uint64","name":"executionTip_","type":"uint64"},{"internalType":"uint64","name":"deliveryTip_","type":"uint64"}],"name":"encodeTips","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedTips","type":"uint256"}],"name":"executionTip","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"Tips","name":"tips","type":"uint256"},{"internalType":"uint256","name":"newValue","type":"uint256"}],"name":"matchValue","outputs":[{"internalType":"Tips","name":"newTips","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedTips","type":"uint256"}],"name":"summitTip","outputs":[{"internalType":"uint64","name":"","type":"uint64"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedTips","type":"uint256"}],"name":"value","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"uint256","name":"paddedTips","type":"uint256"}],"name":"wrapPadded","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"pure","type":"function"}],"userDoc":{"kind":"user","methods":{"attestationTip(uint256)":{"notice":"Returns attestationTip field"},"deliveryTip(uint256)":{"notice":"Returns deliveryTip field"},"executionTip(uint256)":{"notice":"Returns executionTip field"},"matchValue(uint256,uint256)":{"notice":"Increases the delivery tip to match the new value."},"summitTip(uint256)":{"notice":"Returns summitTip field"},"value(uint256)":{"notice":"Returns total tip amount."}},"notice":"Exposes TipsLib methods for testing against golang.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedTips\",\"type\":\"uint256\"}],\"name\":\"attestationTip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedTips\",\"type\":\"uint256\"}],\"name\":\"deliveryTip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"emptyTips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"summitTip_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"attestationTip_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"executionTip_\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"deliveryTip_\",\"type\":\"uint64\"}],\"name\":\"encodeTips\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedTips\",\"type\":\"uint256\"}],\"name\":\"executionTip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Tips\",\"name\":\"tips\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newValue\",\"type\":\"uint256\"}],\"name\":\"matchValue\",\"outputs\":[{\"internalType\":\"Tips\",\"name\":\"newTips\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedTips\",\"type\":\"uint256\"}],\"name\":\"summitTip\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedTips\",\"type\":\"uint256\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"paddedTips\",\"type\":\"uint256\"}],\"name\":\"wrapPadded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"attestationTip(uint256)\":{\"notice\":\"Returns attestationTip field\"},\"deliveryTip(uint256)\":{\"notice\":\"Returns deliveryTip field\"},\"executionTip(uint256)\":{\"notice\":\"Returns executionTip field\"},\"matchValue(uint256,uint256)\":{\"notice\":\"Increases the delivery tip to match the new value.\"},\"summitTip(uint256)\":{\"notice\":\"Returns summitTip field\"},\"value(uint256)\":{\"notice\":\"Returns total tip amount.\"}},\"notice\":\"Exposes TipsLib methods for testing against golang.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TipsHarness.t.sol\":\"TipsHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TipsHarness.t.sol\":{\"keccak256\":\"0x5bea8d66a821937a9a6f3a20b3e5f450e4e385ff8996839938a3ba2859c04289\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4934c4caba0afb1548b95950ae037ae283127cce1271eefedf99f2ca3fa51f20\",\"dweb:/ipfs/QmTbGPfwcF6UQuUcd1JwiLD95ujFLqRkHD8dZ3ivU8RvFH\"]}},\"version\":1}"},"hashes":{"attestationTip(uint256)":"0453e80e","deliveryTip(uint256)":"ecbf034e","emptyTips()":"725bd463","encodeTips(uint64,uint64,uint64,uint64)":"4f2a6f9e","executionTip(uint256)":"4c63c701","matchValue(uint256,uint256)":"86450b88","summitTip(uint256)":"b284b609","value(uint256)":"c5a46ee6","wrapPadded(uint256)":"138ac42f"}},"solidity/TipsHarness.t.sol:TipsLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122017f0d9b934efc061e527e91eec5067f5b1b403c17da479b0a9bdfa60e24d82ad64736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122017f0d9b934efc061e527e91eec5067f5b1b403c17da479b0a9bdfa60e24d82ad64736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32,uint32,uint40,uint40): 32+32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See Receipt.sol: (uint32,uint32,bytes32,bytes32,uint8,address,address,address,tips): 4+4+32+32+1+20+20+20\nuint256 constant GAS_DATA_LENGTH = 12;\n/// @dev See Request.sol: (uint64,uint96): 8+12\nuint256 constant RECEIPT_BODY_LENGTH = 133;\n/// @dev See Receipt.sol: body + tips\nuint256 constant RECEIPT_LENGTH = RECEIPT_BODY_LENGTH + TIPS_LENGTH;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40,GasData): 32+4+4+5+5+len(GasData)\nuint256 constant STATE_LENGTH = 50 + GAS_DATA_LENGTH;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See GasData.sol: (uint16,uint16,uint16,uint16,uint16,uint16): 2+2+2+2+2+2\nuint256 constant REQUEST_LENGTH = 20;\n/// @dev See Tips.sol: (uint64,uint64,uint64,uint64): 8+8+8+8\nuint256 constant TIPS_LENGTH = 32;\n/// @dev The amount of discarded last bits when encoding tip values\nuint256 constant TIPS_GRANULARITY = 32;\n/// @dev Tip values could be only the multiples of TIPS_MULTIPLIER\nuint256 constant TIPS_MULTIPLIER = 1 \u003c\u003c TIPS_GRANULARITY;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant RECEIPT_SALT = keccak256(\"RECEIPT_SALT\");\nbytes32 constant RECEIPT_REPORT_SALT = keccak256(\"RECEIPT_REPORT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ═════════════════════════════════ PROTOCOL ══════════════════════════════════\n/// @dev Optimistic period for new agent roots in LightManager\nuint32 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\nuint32 constant BONDING_OPTIMISTIC_PERIOD = 1 days;\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n/// @dev Domain of the Synapse Chain\n// TODO: replace the placeholder with actual value (for MVP this is Optimism chainId)\nuint32 constant SYNAPSE_DOMAIN = 10;\n\n/// Tips is encoded data with \"tips paid for sending a base message\".\n/// Note: even though uint256 is also an underlying type for MemView, Tips is stored ON STACK.\ntype Tips is uint256;\n\nusing TipsLib for Tips global;\n\n/// # Tips\n/// Library for formatting _the tips part_ of _the base messages_.\n///\n/// ## How the tips are awarded\n/// Tips are paid for sending a base message, and are split across all the agents that\n/// made the message execution on destination chain possible.\n/// ### Summit tips\n/// Split between:\n///     - Guard posting a snapshot with state ST_G for the origin chain.\n///     - Notary posting a snapshot SN_N using ST_G. This creates attestation A.\n///     - Notary posting a message receipt after it is executed on destination chain.\n/// ### Attestation tips\n/// Paid to:\n///     - Notary posting attestation A to destination chain.\n/// ### Execution tips\n/// Paid to:\n///     - First executor performing a valid execution attempt (correct proofs, optimistic period over),\n///      using attestation A to prove message inclusion on origin chain, whether the recipient reverted or not.\n/// ### Delivery tips.\n/// Paid to:\n///     - Executor who successfully executed the message on destination chain.\n///\n/// ## Tips encoding\n/// - Tips occupy a single storage word, and thus are stored on stack instead of being stored in memory.\n/// - The actual tip values should be determined by multiplying stored values by divided by TIPS_MULTIPLIER=2**32.\n/// - Tips are packed into a single word of storage, while allowing real values up to ~8*10**28 for every tip category.\n/// \u003e The only downside is that the \"real tip values\" are now multiplies of ~4*10**9, which should be fine even for\n/// the chains with the most expensive gas currency.\n/// # Tips stack layout (from highest bits to lowest)\n///\n/// | Position   | Field          | Type   | Bytes | Description                                                |\n/// | ---------- | -------------- | ------ | ----- | ---------------------------------------------------------- |\n/// | (032..024] | summitTip      | uint64 | 8     | Tip for agents interacting with Summit contract            |\n/// | (024..016] | attestationTip | uint64 | 8     | Tip for Notary posting attestation to Destination contract |\n/// | (016..008] | executionTip   | uint64 | 8     | Tip for valid execution attempt on destination chain       |\n/// | (008..000] | deliveryTip    | uint64 | 8     | Tip for successful message delivery on destination chain   |\n\nlibrary TipsLib {\n    /// @dev Amount of bits to shift to summitTip field\n    uint256 private constant SHIFT_SUMMIT_TIP = 24 * 8;\n    /// @dev Amount of bits to shift to attestationTip field\n    uint256 private constant SHIFT_ATTESTATION_TIP = 16 * 8;\n    /// @dev Amount of bits to shift to executionTip field\n    uint256 private constant SHIFT_EXECUTION_TIP = 8 * 8;\n\n    // ═══════════════════════════════════════════════════ TIPS ════════════════════════════════════════════════════════\n\n    /// @notice Returns encoded tips with the given fields\n    /// @param summitTip_        Tip for agents interacting with Summit contract, divided by TIPS_MULTIPLIER\n    /// @param attestationTip_   Tip for Notary posting attestation to Destination contract, divided by TIPS_MULTIPLIER\n    /// @param executionTip_     Tip for valid execution attempt on destination chain, divided by TIPS_MULTIPLIER\n    /// @param deliveryTip_      Tip for successful message delivery on destination chain, divided by TIPS_MULTIPLIER\n    function encodeTips(uint64 summitTip_, uint64 attestationTip_, uint64 executionTip_, uint64 deliveryTip_)\n        internal\n        pure\n        returns (Tips)\n    {\n        return Tips.wrap(\n            uint256(summitTip_) \u003c\u003c SHIFT_SUMMIT_TIP | uint256(attestationTip_) \u003c\u003c SHIFT_ATTESTATION_TIP\n                | uint256(executionTip_) \u003c\u003c SHIFT_EXECUTION_TIP | uint256(deliveryTip_)\n        );\n    }\n\n    /// @notice Wraps the padded encoded tips into a Tips-typed value.\n    /// @dev There is no actual padding here, as the underlying type is already uint256,\n    /// but we include this function for consistency and to be future-proof, if tips will eventually use anything\n    /// smaller than uint256.\n    function wrapPadded(uint256 paddedTips) internal pure returns (Tips) {\n        return Tips.wrap(paddedTips);\n    }\n\n    /**\n     * @notice Returns a formatted Tips payload specifying empty tips.\n     * @return Formatted tips\n     */\n    function emptyTips() internal pure returns (Tips) {\n        return Tips.wrap(0);\n    }\n\n    // ═══════════════════════════════════════════════ TIPS SLICING ════════════════════════════════════════════════════\n\n    /// @notice Returns summitTip field\n    function summitTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips) \u003e\u003e SHIFT_SUMMIT_TIP);\n    }\n\n    /// @notice Returns attestationTip field\n    function attestationTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips) \u003e\u003e SHIFT_ATTESTATION_TIP);\n    }\n\n    /// @notice Returns executionTip field\n    function executionTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips) \u003e\u003e SHIFT_EXECUTION_TIP);\n    }\n\n    /// @notice Returns deliveryTip field\n    function deliveryTip(Tips tips) internal pure returns (uint64) {\n        // Casting to uint64 will truncate the highest bits, which is the behavior we want\n        return uint64(Tips.unwrap(tips));\n    }\n\n    // ════════════════════════════════════════════════ TIPS VALUE ═════════════════════════════════════════════════════\n\n    /// @notice Returns total value of the tips payload.\n    /// This is the sum of the encoded values, scaled up by TIPS_MULTIPLIER\n    function value(Tips tips) internal pure returns (uint256 value_) {\n        value_ = uint256(tips.summitTip()) + tips.attestationTip() + tips.executionTip() + tips.deliveryTip();\n        value_ \u003c\u003c= TIPS_GRANULARITY;\n    }\n\n    /// @notice Increases the delivery tip to match the new value.\n    function matchValue(Tips tips, uint256 newValue) internal pure returns (Tips newTips) {\n        uint256 oldValue = tips.value();\n        require(newValue \u003e= oldValue, \"Tips value too low\");\n        // We want to increase the delivery tip, while keeping the other tips the same\n        unchecked {\n            uint256 delta = (newValue - oldValue) \u003e\u003e TIPS_GRANULARITY;\n            // delta fits into uint224, as TIPS_GRANULARITY is 32, so this never overflows\n            require(delta + tips.deliveryTip() \u003c= type(uint64).max, \"Tips overflow\");\n            // Delivery tips is last 8 bytes, so we can just add delta to the tips value\n            newTips = Tips.wrap(Tips.unwrap(tips) + delta);\n        }\n    }\n}\n\n/**\n * @notice Exposes TipsLib methods for testing against golang.\n */\ncontract TipsHarness {\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    // ══════════════════════════════════════════════════ GETTERS ══════════════════════════════════════════════════════\n\n    /// @notice Returns summitTip field\n    function summitTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).summitTip();\n    }\n\n    /// @notice Returns attestationTip field\n    function attestationTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).attestationTip();\n    }\n\n    /// @notice Returns executionTip field\n    function executionTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).executionTip();\n    }\n\n    /// @notice Returns deliveryTip field\n    function deliveryTip(uint256 paddedTips) public pure returns (uint64) {\n        return TipsLib.wrapPadded(paddedTips).deliveryTip();\n    }\n\n    /// @notice Returns total tip amount.\n    function value(uint256 paddedTips) public pure returns (uint256) {\n        return TipsLib.wrapPadded(paddedTips).value();\n    }\n\n    /// @notice Increases the delivery tip to match the new value.\n    function matchValue(Tips tips, uint256 newValue) public pure returns (Tips newTips) {\n        return tips.matchValue(newValue);\n    }\n\n    // ════════════════════════════════════════════════ FORMATTERS ═════════════════════════════════════════════════════\n\n    function encodeTips(uint64 summitTip_, uint64 attestationTip_, uint64 executionTip_, uint64 deliveryTip_)\n        public\n        pure\n        returns (uint256)\n    {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Tips tips = TipsLib.encodeTips(summitTip_, attestationTip_, executionTip_, deliveryTip_);\n        return Tips.unwrap(tips);\n    }\n\n    function wrapPadded(uint256 paddedTips) public pure returns (uint256) {\n        return Tips.unwrap(TipsLib.wrapPadded(paddedTips));\n    }\n\n    function emptyTips() public pure returns (uint256) {\n        // TODO: figure out why this leaves `TipsLib.emptyTips()` uncovered\n        Tips tips = TipsLib.emptyTips();\n        return Tips.unwrap(tips);\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"6267:5125:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;6267:5125:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"6267:5125:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"notice":"# Tips Library for formatting _the tips part_ of _the base messages_. ## How the tips are awarded Tips are paid for sending a base message, and are split across all the agents that made the message execution on destination chain possible. ### Summit tips Split between:     - Guard posting a snapshot with state ST_G for the origin chain.     - Notary posting a snapshot SN_N using ST_G. This creates attestation A.     - Notary posting a message receipt after it is executed on destination chain. ### Attestation tips Paid to:     - Notary posting attestation A to destination chain. ### Execution tips Paid to:     - First executor performing a valid execution attempt (correct proofs, optimistic period over),      using attestation A to prove message inclusion on origin chain, whether the recipient reverted or not. ### Delivery tips. Paid to:     - Executor who successfully executed the message on destination chain. ## Tips encoding - Tips occupy a single storage word, and thus are stored on stack instead of being stored in memory. - The actual tip values should be determined by multiplying stored values by divided by TIPS_MULTIPLIER=2**32. - Tips are packed into a single word of storage, while allowing real values up to ~8*10**28 for every tip category. \u003e The only downside is that the \"real tip values\" are now multiplies of ~4*10**9, which should be fine even for the chains with the most expensive gas currency. # Tips stack layout (from highest bits to lowest) | Position   | Field          | Type   | Bytes | Description                                                | | ---------- | -------------- | ------ | ----- | ---------------------------------------------------------- | | (032..024] | summitTip      | uint64 | 8     | Tip for agents interacting with Summit contract            | | (024..016] | attestationTip | uint64 | 8     | Tip for Notary posting attestation to Destination contract | | (016..008] | executionTip   | uint64 | 8     | Tip for valid execution attempt on destination chain       | | (008..000] | deliveryTip    | uint64 | 8     | Tip for successful message delivery on destination chain   |","version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SHIFT_ATTESTATION_TIP":{"details":"Amount of bits to shift to attestationTip field"},"SHIFT_EXECUTION_TIP":{"details":"Amount of bits to shift to executionTip field"},"SHIFT_SUMMIT_TIP":{"details":"Amount of bits to shift to summitTip field"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SHIFT_ATTESTATION_TIP\":{\"details\":\"Amount of bits to shift to attestationTip field\"},\"SHIFT_EXECUTION_TIP\":{\"details\":\"Amount of bits to shift to executionTip field\"},\"SHIFT_SUMMIT_TIP\":{\"details\":\"Amount of bits to shift to summitTip field\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"# Tips Library for formatting _the tips part_ of _the base messages_. ## How the tips are awarded Tips are paid for sending a base message, and are split across all the agents that made the message execution on destination chain possible. ### Summit tips Split between:     - Guard posting a snapshot with state ST_G for the origin chain.     - Notary posting a snapshot SN_N using ST_G. This creates attestation A.     - Notary posting a message receipt after it is executed on destination chain. ### Attestation tips Paid to:     - Notary posting attestation A to destination chain. ### Execution tips Paid to:     - First executor performing a valid execution attempt (correct proofs, optimistic period over),      using attestation A to prove message inclusion on origin chain, whether the recipient reverted or not. ### Delivery tips. Paid to:     - Executor who successfully executed the message on destination chain. ## Tips encoding - Tips occupy a single storage word, and thus are stored on stack instead of being stored in memory. - The actual tip values should be determined by multiplying stored values by divided by TIPS_MULTIPLIER=2**32. - Tips are packed into a single word of storage, while allowing real values up to ~8*10**28 for every tip category. \u003e The only downside is that the \\\"real tip values\\\" are now multiplies of ~4*10**9, which should be fine even for the chains with the most expensive gas currency. # Tips stack layout (from highest bits to lowest) | Position   | Field          | Type   | Bytes | Description                                                | | ---------- | -------------- | ------ | ----- | ---------------------------------------------------------- | | (032..024] | summitTip      | uint64 | 8     | Tip for agents interacting with Summit contract            | | (024..016] | attestationTip | uint64 | 8     | Tip for Notary posting attestation to Destination contract | | (016..008] | executionTip   | uint64 | 8     | Tip for valid execution attempt on destination chain       | | (008..000] | deliveryTip    | uint64 | 8     | Tip for successful message delivery on destination chain   |\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/TipsHarness.t.sol\":\"TipsLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/TipsHarness.t.sol\":{\"keccak256\":\"0x5bea8d66a821937a9a6f3a20b3e5f450e4e385ff8996839938a3ba2859c04289\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4934c4caba0afb1548b95950ae037ae283127cce1271eefedf99f2ca3fa51f20\",\"dweb:/ipfs/QmTbGPfwcF6UQuUcd1JwiLD95ujFLqRkHD8dZ3ivU8RvFH\"]}},\"version\":1}"},"hashes":{}}}
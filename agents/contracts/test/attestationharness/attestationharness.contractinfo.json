{"solidity/AttestationHarness.t.sol:AttestationHarness":{"code":"","runtime-code":"","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint96,uint96,uint96,uint96): 12+12+12+12\nuint256 constant TIPS_LENGTH = 48;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n/// @dev Attestation is a memory view over a formatted attestation payload.\ntype Attestation is bytes29;\n/// @dev Attach library functions to Attestation\n\nusing {\n    AttestationLib.unwrap,\n    AttestationLib.equalToSummit,\n    AttestationLib.toExecutionAttestation,\n    AttestationLib.hash,\n    AttestationLib.snapRoot,\n    AttestationLib.agentRoot,\n    AttestationLib.nonce,\n    AttestationLib.blockNumber,\n    AttestationLib.timestamp\n} for Attestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the Summit contract.\nstruct SummitAttestation {\n    bytes32 snapRoot;\n    bytes32 agentRoot;\n    uint40 blockNumber;\n    uint40 timestamp;\n}\n/// @dev Attach library functions to SummitAttestation\n\nusing {AttestationLib.formatSummitAttestation} for SummitAttestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the ExecutionHub contract.\n/// mapping (bytes32 root =\u003e ExecutionAttestation) is supposed to be used\nstruct ExecutionAttestation {\n    address notary;\n    uint32 nonce;\n    uint40 submittedAt;\n}\n// 24 bits left for tight packing\n/// @dev Attach library functions to ExecutionAttestation\n\nusing {AttestationLib.isEmpty} for ExecutionAttestation global;\n\nlibrary AttestationLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Attestation structure represents the \"Snapshot Merkle Tree\" created from\n     * every Notary snapshot accepted by the Summit contract. Attestation includes\n     * the root of the \"Snapshot Merkle Tree\", as well as additional metadata.\n     *\n     * Steps for creation of \"Snapshot Merkle Tree\":\n     * 1. The list of hashes is composed for states in the Notary snapshot.\n     * 2. The list is padded with zero values until its length is 2**SNAPSHOT_TREE_HEIGHT.\n     * 3. Values from the list are used as leafs and the merkle tree is constructed.\n     *\n     * Similar to Origin, every derived Notary's \"Snapshot Merkle Root\" is saved in Summit contract.\n     * The main difference is that Origin contract itself is keeping track of an incremental merkle tree,\n     * by inserting the hash of the sent message and calculating the new \"Origin Merkle Root\".\n     * While Summit relies on Guards and Notaries to provide snapshot data, which is used to calculate the\n     * \"Snapshot Merkle Root\".\n     *\n     * Origin's State is \"state of Origin Merkle Tree after N-th message was sent\".\n     * Summit's Attestation is \"data for the N-th accepted Notary Snapshot\".\n     *\n     * Attestation is considered \"valid\" in Summit contract, if it matches the N-th (nonce)\n     * snapshot submitted by Notaries.\n     * Attestation is considered \"valid\" in Origin contract, if its underlying Snapshot is \"valid\".\n     *\n     * This means that a snapshot could be \"valid\" in Summit contract and \"invalid\" in Origin, if the underlying\n     * snapshot is invalid (i.e. one of the states in the list is invalid).\n     * The opposite could also be true. If a perfectly valid snapshot was never submitted to Summit, its attestation\n     * would be valid in Origin, but invalid in Summit (it was never accepted, so the metadata would be incorrect).\n     *\n     * Attestation is considered \"globally valid\", if it is valid in the Summit and all the Origin contracts.\n     *\n     * @dev Memory layout of Attestation fields\n     * [000 .. 032): snapRoot       bytes32 32 bytes    Root for \"Snapshot Merkle Tree\" created from a Notary snapshot\n     * [032 .. 064): agentRoot      bytes32 32 bytes    Root for \"Agent Merkle Tree\" tracked by BondingManager\n     * [064 .. 068): nonce          uint32   4 bytes    Total amount of all accepted Notary snapshots\n     * [068 .. 073): blockNumber    uint40   5 bytes    Block when this Notary snapshot was accepted in Summit\n     * [073 .. 078): timestamp      uint40   5 bytes    Time when this Notary snapshot was accepted in Summit\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_SNAP_ROOT = 0;\n    uint256 private constant OFFSET_AGENT_ROOT = 32;\n    uint256 private constant OFFSET_NONCE = 64;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 68;\n    uint256 private constant OFFSET_TIMESTAMP = 73;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ATTESTATION                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param snapRoot_     Snapshot merkle tree's root\n     * @param agentRoot_    Agent merkle tree's root\n     * @param nonce_        Attestation Nonce\n     * @param blockNumber_  Block number when attestation was created in Summit\n     * @param timestamp_    Block timestamp when attestation was created in Summit\n     * @return Formatted attestation\n     */\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns an Attestation view over the given payload.\n     * @dev Will revert if the payload is not an attestation.\n     */\n    function castToAttestation(bytes memory payload) internal pure returns (Attestation) {\n        return castToAttestation(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to an Attestation view.\n     * @dev Will revert if the memory view is not over an attestation.\n     */\n    function castToAttestation(bytes29 view_) internal pure returns (Attestation) {\n        require(isAttestation(view_), \"Not an attestation\");\n        return Attestation.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted Attestation.\n    function isAttestation(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == ATTESTATION_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Attestation att) internal pure returns (bytes29) {\n        return Attestation.unwrap(att);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param summitAtt     Attestation struct as it stored in Summit contract\n     * @param nonce_        Attestation nonce\n     * @return Formatted attestation\n     */\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return formatAttestation({\n            snapRoot_: summitAtt.snapRoot,\n            agentRoot_: summitAtt.agentRoot,\n            nonce_: nonce_,\n            blockNumber_: summitAtt.blockNumber,\n            timestamp_: summitAtt.timestamp\n        });\n    }\n\n    /// @notice Returns an empty struct to save in Summit contract upon initialization.\n    // solhint-disable-next-line ordering\n    function emptySummitAttestation() internal view returns (SummitAttestation memory) {\n        return summitAttestation(bytes32(0), bytes32(0));\n    }\n\n    /// @notice Returns a struct to save in the Summit contract for the given root and height.\n    function summitAttestation(bytes32 snapRoot_, bytes32 agentRoot_)\n        internal\n        view\n        returns (SummitAttestation memory summitAtt)\n    {\n        summitAtt.snapRoot = snapRoot_;\n        summitAtt.agentRoot = agentRoot_;\n        summitAtt.blockNumber = uint40(block.number);\n        summitAtt.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that an Attestation and its Summit representation are equal.\n    function equalToSummit(Attestation att, SummitAttestation memory summitAtt) internal pure returns (bool) {\n        return att.snapRoot() == summitAtt.snapRoot \u0026\u0026 att.agentRoot() == summitAtt.agentRoot\n            \u0026\u0026 att.blockNumber() == summitAtt.blockNumber \u0026\u0026 att.timestamp() == summitAtt.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(Attestation att, address notary)\n        internal\n        view\n        returns (ExecutionAttestation memory attestation)\n    {\n        attestation.notary = notary;\n        attestation.nonce = att.nonce();\n        // We need to store the timestamp when attestation was submitted to Destination\n        attestation.submittedAt = uint40(block.timestamp);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) internal pure returns (bool) {\n        return execAtt.notary == address(0);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION HASHING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of an Attestation, that could be later signed by a Notary.\n    function hash(Attestation att) internal pure returns (bytes32) {\n        // Get the underlying memory view\n        bytes29 view_ = att.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(ATTESTATION_SALT, view_.keccak()));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns root of the Snapshot merkle tree created in the Summit contract.\n    function snapRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_SNAP_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns root of the Agent merkle tree tracked by BondingManager.\n    function agentRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_AGENT_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns nonce of Summit contract at the time, when attestation was created.\n    function nonce(Attestation att) internal pure returns (uint32) {\n        bytes29 view_ = att.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when attestation was created in Summit.\n    function blockNumber(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when attestation was created in Summit.\n    /// @dev This is the timestamp according to the Synapse Chain.\n    function timestamp(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n// solhint-disable ordering\n/// @notice Exposes Attestation methods for testing against golang.\ncontract AttestationHarness {\n    using AttestationLib for bytes;\n    using AttestationLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToAttestation(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Attestation attestation = AttestationLib.castToAttestation(payload);\n        return attestation.unwrap().clone();\n    }\n\n    function snapRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().snapRoot();\n    }\n\n    function agentRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().agentRoot();\n    }\n\n    function nonce(bytes memory payload) public pure returns (uint32) {\n        return payload.castToAttestation().nonce();\n    }\n\n    function blockNumber(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().blockNumber();\n    }\n\n    function timestamp(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().timestamp();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().hash();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(bytes memory payload, address notary)\n        public\n        view\n        returns (ExecutionAttestation memory)\n    {\n        return payload.castToAttestation().toExecutionAttestation(notary);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) public pure returns (bool) {\n        return execAtt.isEmpty();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return summitAtt.formatSummitAttestation(nonce_);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ATTESTATION FORMATTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) public pure returns (bytes memory) {\n        return AttestationLib.formatAttestation(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    function isAttestation(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isAttestation();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"61248:4701:0:-:0;;;;;;;;;;;;;;;;;;;","srcMapRuntime":"61248:4701:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;62101:370;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;63029:133;;;;;;:::i;:::-;;:::i;:::-;;;2192:12:1;2180:25;;;2162:44;;2150:2;2135:18;63029:133:0;2018:194:1;64074:122:0;;;;;;:::i;:::-;;:::i;:::-;;;3525:14:1;;3518:22;3500:41;;3488:2;3473:18;64074:122:0;3360:187:1;65821:126:0;;;;;;:::i;:::-;;:::i;62615:134::-;;;;;;:::i;:::-;;:::i;:::-;;;3698:25:1;;;3686:2;3671:18;62615:134:0;3552:177:1;62755:125:0;;;;;;:::i;:::-;;:::i;:::-;;;3908:10:1;3896:23;;;3878:42;;3866:2;3851:18;62755:125:0;3734:192:1;65500:315:0;;;;;;:::i;:::-;;:::i;62477:132::-;;;;;;:::i;:::-;;:::i;63168:124::-;;;;;;:::i;:::-;;:::i;64742:212::-;;;;;;:::i;:::-;;:::i;63838:230::-;;;;;;:::i;:::-;;:::i;:::-;;;;5846:13:1;;5861:42;5842:62;5824:81;;5965:4;5953:17;;;5947:24;5973:10;5943:41;5921:20;;;5914:71;6033:17;;;6027:24;6053:12;6023:43;6001:20;;;5994:73;5812:2;5797:18;63838:230:0;5602:471:1;62886:137:0;;;;;;:::i;:::-;;:::i;62101:370::-;62171:12;62352:23;62378:41;62411:7;62378:32;:41::i;:::-;62352:67;-1:-1:-1;62436:28:0;-1:-1:-1;;62436:18:0;;:26;:28::i;:::-;62429:35;62101:370;-1:-1:-1;;;62101:370:0:o;63029:133::-;63091:6;63116:39;:27;:7;:25;:27::i;:::-;-1:-1:-1;;63116:37:0;;:39::i;:::-;63109:46;63029:133;-1:-1:-1;;63029:133:0:o;64074:122::-;64149:4;64172:17;:7;58177:14;:28;;;;58077:135;65821:126;65887:4;65910:30;:14;:7;65887:4;65910:11;:14::i;:::-;-1:-1:-1;;65910:28:0;3310:2;18352:20;3703:16;18348:37;45576:2;54572:33;;54488:124;62615:134;62677:7;62703:39;:27;:7;:25;:27::i;:::-;-1:-1:-1;;62703:37:0;;:39::i;62755:125::-;62813:6;62838:35;:27;:7;:25;:27::i;:::-;-1:-1:-1;;62838:33:0;;:35::i;65500:315::-;53695:73;;;;;;6313:19:1;;;6348:12;;;6341:28;;;6421:66;6407:3;6403:16;;;6399:89;65688:12:0;6385::1;;;6378:111;;;;6508:66;6612:3;6608:16;;;6604:25;;6590:12;;;6583:47;6664:16;;;6660:25;6646:12;;;6639:47;53695:73:0;;;;;;;;;6702:12:1;;;;53695:73:0;;;65719:89;65712:96;65500:315;-1:-1:-1;;;;;;65500:315:0:o;62477:132::-;62538:7;62564:38;:27;:7;:25;:27::i;:::-;-1:-1:-1;;62564:36:0;;:38::i;63168:124::-;63225:7;63251:34;:27;:7;:25;:27::i;:::-;-1:-1:-1;;63251:32:0;;:34::i;64742:212::-;64871:12;64906:41;:9;64940:6;64906:33;:41::i;63838:230::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;64003:58:0;64054:6;64003:27;:7;:25;:27::i;:::-;-1:-1:-1;;64003:50:0;;;:58::i;62886:137::-;62950:6;62975:41;:27;:7;:25;:27::i;:::-;-1:-1:-1;;62975:39:0;;:41::i;53926:152::-;53998:11;54028:43;54046:24;:7;:22;:24::i;:::-;54028:17;:43::i;30992:626::-;31045:16;31073:11;31094:12;31109:10;31113:5;3310:2;18352:20;3703:16;18348:37;;17836:565;31109:10;31094:25;;;;31229:4;31223:11;31216:18;;31284:3;31277:10;;31330:31;31343:5;31350:3;31356:4;31350:10;31330:12;:31::i;:::-;-1:-1:-1;31485:14:0;;;31501:4;31481:25;31475:4;31468:39;31548:17;;30992:626;;-1:-1:-1;30992:626:0:o;60957:191::-;61016:6;-1:-1:-1;;61050:10:0;;61086:54;61050:10;52477:2;61137:1;61086:15;:54::i;14469:595::-;14573:10;;14539:7;;14999:4;14990:14;;15031:26;;;;14990:14;14573:10;15031:5;:26::i;:::-;15024:33;14469:595;-1:-1:-1;;;;;14469:595:0:o;60058:182::-;60117:7;-1:-1:-1;;60152:10:0;;60181:52;60152:10;52322:2;;60181:11;:52::i;60338:183::-;60393:6;-1:-1:-1;;60427:10:0;;60463:50;60427:10;52370:2;60510:1;60463:15;:50::i;59791:180::-;59849:7;-1:-1:-1;;59884:10:0;;59913:51;59884:10;59849:7;59960:2;59913:11;:51::i;58850:306::-;58904:7;-1:-1:-1;;58981:10:0;;46637:29;59133:14;58981:10;59133:12;:14::i;:::-;59102:46;;;;;;6882:19:1;;;;6917:12;;6910:28;6954:12;;59102:46:0;;;;;;;;;;;;59092:57;;;;;;59085:64;;;58850:306;;;:::o;55591:412::-;55800:18;;55844:19;;;;;55919:21;;;;;55722:12;55966:19;;;;53695:73;;;;;6313:19:1;;;;6348:12;;;6341:28;;;;6421:66;6407:3;6403:16;;;6399:89;6385:12;;;6378:111;6508:66;6612:3;6608:16;;;6604:25;;6590:12;;;6583:47;6664:16;;;6660:25;;;6646:12;;;6639:47;53695:73:0;;;;;;;;;6702:12:1;;;;53695:73:0;;;55757:239;53474:301;57682:389;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;57849:27:0;;;;;57906:11;-1:-1:-1;;57906:9:0;;;:11::i;:::-;57886:31;;:17;;;:31;58015:49;58048:15;58015:49;:23;;;:49;57886:11;57682:389;-1:-1:-1;;57682:389:0:o;60606:196::-;60667:6;-1:-1:-1;;60701:10:0;;60737:57;60701:10;52425:2;60791:1;60737:15;:57::i;36639:127::-;36708:7;36734:25;:7;36708;36734:11;:25::i;54230:186::-;54295:11;54326:20;54340:5;3310:2;18352:20;3703:16;18348:37;45576:2;54572:33;;54488:124;54326:20;54318:51;;;;;;;7179:2:1;54318:51:0;;;7161:21:1;7218:2;7198:18;;;7191:30;7257:20;7237:18;;;7230:48;7295:18;;54318:51:0;;;;;;;;;-1:-1:-1;54403:5:0;54230:186::o;29775:846::-;29850:15;-1:-1:-1;;7985:13:0;;;;29877:53;;;;;;;7526:2:1;29877:53:0;;;7508:21:1;7565:2;7545:18;;;7538:30;7604:28;7584:18;;;7577:56;7650:18;;29877:53:0;7324:350:1;29877:53:0;29948:14;29956:5;29948:7;:14::i;:::-;29940:56;;;;;;;7881:2:1;29940:56:0;;;7863:21:1;7920:2;7900:18;;;7893:30;7959:31;7939:18;;;7932:59;8008:18;;29940:56:0;7679:353:1;29940:56:0;30006:12;30021:10;30025:5;3310:2;18352:20;3703:16;18348:37;;17836:565;30021:10;30006:25;;;;30041:14;30058:10;30062:5;30058:3;:10::i;:::-;30041:27;;;;30079:11;30100:8;30218:4;30212:11;30205:18;;30305:6;30300:3;30297:15;30294:41;;;30328:4;30322;30315:18;30294:41;30484:4;30476:6;30470:4;30462:6;30456:4;30449:5;30438:51;30431:58;;30516:3;30508:36;;;;;;;8239:2:1;30508:36:0;;;8221:21:1;8278:2;8258:18;;;8251:30;8317:22;8297:18;;;8290:50;8357:18;;30508:36:0;8037:344:1;30508:36:0;30565:49;30586:13;30593:5;30586:6;:13::i;:::-;12684:32;3222:2;12684:32;;;;12820:17;;12807:31;;12942:17;;3310:2;12927:33;;12076:900;30565:49;30555:59;29775:846;-1:-1:-1;;;;;;;29775:846:0:o;23411:340::-;23498:14;23727:11;23732:6;23727:2;:11;:::i;:::-;23726:17;;23742:1;23726:17;:::i;:::-;23684:60;;23692:28;23698:5;23705:6;23713;23692:5;:28::i;:::-;23684:60;;;23411:340;-1:-1:-1;;;;23411:340:0:o;13515:557::-;13596:15;;13638:11;13645:4;13638;:11;:::i;:::-;13623:26;;13917:4;13911:11;13905:4;13902:21;13899:38;;;-1:-1:-1;13934:1:0;13899:38;13960:4;13968:1;13960:9;13956:51;;-1:-1:-1;;13985:11:0;;;;;13956:51;-1:-1:-1;;3222:2:0;12684:32;;;12820:17;;;;12807:31;;;12942:17;3310:2;12927:33;;13515:557::o;22218:848::-;22301:14;22331:6;:11;;22341:1;22331:11;22327:59;;-1:-1:-1;22373:1:0;22358:17;;22327:59;22417:10;22421:5;3310:2;18352:20;3703:16;18348:37;;17836:565;22417:10;22399:28;;:15;;;;:6;:15;:::i;:::-;:28;22395:131;;;22450:64;22466:10;22470:5;22466:3;:10::i;:::-;22450:64;;22478:10;22482:5;3310:2;18352:20;3703:16;18348:37;;17836:565;22478:10;22450:64;;22490:6;22506;22498:15;;22450;:64::i;:::-;22443:72;;;;;;;;;;;:::i;22395:131::-;22553:2;22543:6;:12;;;;22535:50;;;;;;;9517:2:1;22535:50:0;;;9499:21:1;9556:2;9536:18;;;9529:30;9595:27;9575:18;;;9568:55;9640:18;;22535:50:0;9315:349:1;22535:50:0;22666:1;22657:10;;22596:15;22702:10;22706:5;22702:3;:10::i;:::-;22687:25;;;-1:-1:-1;22778:12:0;7474:66;7460:12;;;7456:85;23025:17;;;;23019:24;23015:35;;;-1:-1:-1;;;;;22218:848:0:o;24892:284::-;24946:14;24972:12;24987:10;24991:5;24987:3;:10::i;:::-;24972:25;;;;25007:12;25022:10;25026:5;3310:2;18352:20;3703:16;18348:37;;17836:565;25022:10;25007:25;;25139:21;;;;24892:284;-1:-1:-1;;;24892:284:0:o;8652:459::-;8707:8;8731:13;8738:5;8731:6;:13::i;:::-;:29;;8748:12;8731:29;8727:72;;-1:-1:-1;8783:5:0;;8652:459;-1:-1:-1;8652:459:0:o;8727:72::-;8808:12;8823:10;8827:5;8823:3;:10::i;:::-;9088:4;9082:11;-1:-1:-1;9069:26:0;;8652:459;-1:-1:-1;;;8652:459:0:o;16417:565::-;16468:11;;3494:20;3265:2;3310;3494:20;:::i;:::-;16933;;;;3703:16;16929:37;;16417:565;-1:-1:-1;;16417:565:0:o;15256:498::-;15310:12;;3222:2;3494:20;3222:2;3310;3494:20;:::i;:::-;3574;;;;:::i;:::-;15717:21;;;;;15256:498;-1:-1:-1;;15256:498:0:o;20985:731::-;21117:17;21153:9;21166:15;21176:4;21166:9;:15::i;:::-;21150:31;;;21194:9;21207:15;21217:4;21207:9;:15::i;:::-;21191:31;;;21235:9;21248:17;21258:6;21248:9;:17::i;:::-;21232:33;;;21278:9;21291:17;21301:6;21291:9;:17::i;:::-;21275:33;;;21458:1;21520;21600;21662;21344:355;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;21318:391;;21140:576;;;;20985:731;;;;;;:::o;18569:141::-;18620:7;18683:10;18687:5;3310:2;18352:20;3703:16;18348:37;;17836:565;18683:10;18670;18674:5;18670:3;:10::i;:::-;:23;18663:30;;;;18569:141;;;:::o;4906:662::-;4959:13;;5015:2;5000:256;5023:2;5019:1;:6;;;5000:256;;;5042:11;5068:5;:1;5072;5068:5;:::i;:::-;5062:12;;:1;:12;;5042:33;;5098:14;5106:5;5098:7;:14::i;:::-;5089:23;;;;;;5130:1;:7;;5135:2;5130:7;5126:58;;5167:2;5157:12;;;;;5126:58;-1:-1:-1;5225:6:0;;5000:256;;;-1:-1:-1;5319:2:0;5304:258;5327:3;5323:1;:7;;;5304:258;;;5347:11;5373:5;:1;5377;5373:5;:::i;:::-;5367:12;;:1;:12;;5347:33;;5404:14;5412:5;5404:7;:14::i;:::-;5394:24;;;;;;5436:1;:6;;5441:1;5436:6;5432:58;;5473:2;5462:13;;;;;5432:58;-1:-1:-1;5531:6:0;;5304:258;;;;4906:662;;;:::o;4386:196::-;4435:14;4472:17;4487:1;4482;:6;;;;4472:9;:17::i;:::-;4461:28;;4513:13;;;;;;4525:1;4513:13;4547:12;4557:1;4547:9;:12::i;:::-;4536:23;;;;4386:196;-1:-1:-1;4386:196:0:o;4015:199::-;4185:13;;;;;;;;;;;;;;;;;;4070:10;;4115:4;4107:12;;;;;4185:21;;;;;;:::i;:::-;;;;;;;;4015:199;-1:-1:-1;;;4015:199:0:o;14:184:1:-;66:77;63:1;56:88;163:4;160:1;153:15;187:4;184:1;177:15;203:777;245:5;298:3;291:4;283:6;279:17;275:27;265:55;;316:1;313;306:12;265:55;352:6;339:20;378:18;415:2;411;408:10;405:36;;;421:18;;:::i;:::-;555:2;549:9;617:4;609:13;;460:66;605:22;;;629:2;601:31;597:40;585:53;;;653:18;;;673:22;;;650:46;647:72;;;699:18;;:::i;:::-;739:10;735:2;728:22;774:2;766:6;759:18;820:3;813:4;808:2;800:6;796:15;792:26;789:35;786:55;;;837:1;834;827:12;786:55;901:2;894:4;886:6;882:17;875:4;867:6;863:17;850:54;948:1;941:4;936:2;928:6;924:15;920:26;913:37;968:6;959:15;;;;;;203:777;;;;:::o;985:320::-;1053:6;1106:2;1094:9;1085:7;1081:23;1077:32;1074:52;;;1122:1;1119;1112:12;1074:52;1162:9;1149:23;1195:18;1187:6;1184:30;1181:50;;;1227:1;1224;1217:12;1181:50;1250:49;1291:7;1282:6;1271:9;1267:22;1250:49;:::i;:::-;1240:59;985:320;-1:-1:-1;;;;985:320:1:o;1310:481::-;1351:3;1389:5;1383:12;1416:6;1411:3;1404:19;1441:1;1451:162;1465:6;1462:1;1459:13;1451:162;;;1527:4;1583:13;;;1579:22;;1573:29;1555:11;;;1551:20;;1544:59;1480:12;1451:162;;;1455:3;1658:1;1651:4;1642:6;1637:3;1633:16;1629:27;1622:38;1780:4;1710:66;1705:2;1697:6;1693:15;1689:88;1684:3;1680:98;1676:109;1669:116;;;1310:481;;;;:::o;1796:217::-;1943:2;1932:9;1925:21;1906:4;1963:44;2003:2;1992:9;1988:18;1980:6;1963:44;:::i;2217:196::-;2285:20;;2345:42;2334:54;;2324:65;;2314:93;;2403:1;2400;2393:12;2314:93;2217:196;;;:::o;2418:163::-;2485:20;;2545:10;2534:22;;2524:33;;2514:61;;2571:1;2568;2561:12;2586:165;2653:20;;2713:12;2702:24;;2692:35;;2682:63;;2741:1;2738;2731:12;2756:599;2853:6;2906:2;2894:9;2885:7;2881:23;2877:32;2874:52;;;2922:1;2919;2912:12;2874:52;2955:2;2949:9;2997:2;2989:6;2985:15;3066:6;3054:10;3051:22;3030:18;3018:10;3015:34;3012:62;3009:88;;;3077:18;;:::i;:::-;3113:2;3106:22;3152:29;3171:9;3152:29;:::i;:::-;3144:6;3137:45;3215:37;3248:2;3237:9;3233:18;3215:37;:::i;:::-;3210:2;3202:6;3198:15;3191:62;3286:37;3319:2;3308:9;3304:18;3286:37;:::i;:::-;3281:2;3269:15;;3262:62;3273:6;2756:599;-1:-1:-1;;;2756:599:1:o;3931:466::-;4023:6;4031;4039;4047;4055;4108:3;4096:9;4087:7;4083:23;4079:33;4076:53;;;4125:1;4122;4115:12;4076:53;4161:9;4148:23;4138:33;;4218:2;4207:9;4203:18;4190:32;4180:42;;4241:37;4274:2;4263:9;4259:18;4241:37;:::i;:::-;4231:47;;4297:37;4330:2;4319:9;4315:18;4297:37;:::i;:::-;4287:47;;4353:38;4386:3;4375:9;4371:19;4353:38;:::i;:::-;4343:48;;3931:466;;;;;;;;:::o;4402:796::-;4504:6;4512;4556:9;4547:7;4543:23;4586:3;4582:2;4578:12;4575:32;;;4603:1;4600;4593:12;4575:32;4627:4;4623:2;4619:13;4616:33;;;4645:1;4642;4635:12;4616:33;;4678:2;4672:9;4720:4;4712:6;4708:17;4791:6;4779:10;4776:22;4755:18;4743:10;4740:34;4737:62;4734:88;;;4802:18;;:::i;:::-;4842:10;4838:2;4831:22;;4890:9;4877:23;4869:6;4862:39;4962:2;4951:9;4947:18;4934:32;4929:2;4921:6;4917:15;4910:57;5000:37;5033:2;5022:9;5018:18;5000:37;:::i;:::-;4995:2;4987:6;4983:15;4976:62;5071:37;5104:2;5093:9;5089:18;5071:37;:::i;:::-;5066:2;5054:15;;5047:62;5058:6;-1:-1:-1;5153:39:1;5186:4;5171:20;;5153:39;:::i;:::-;5143:49;;4402:796;;;;;:::o;5203:394::-;5280:6;5288;5341:2;5329:9;5320:7;5316:23;5312:32;5309:52;;;5357:1;5354;5347:12;5309:52;5397:9;5384:23;5430:18;5422:6;5419:30;5416:50;;;5462:1;5459;5452:12;5416:50;5485:49;5526:7;5517:6;5506:9;5502:22;5485:49;:::i;:::-;5475:59;;;5553:38;5587:2;5576:9;5572:18;5553:38;:::i;8386:184::-;8438:77;8435:1;8428:88;8535:4;8532:1;8525:15;8559:4;8556:1;8549:15;8575:151;8665:4;8658:12;;;8644;;;8640:31;;8683:14;;8680:40;;;8700:18;;:::i;8731:225::-;8835:4;8814:12;;;8828;;;8810:31;8861:22;;;;8902:24;;;8892:58;;8930:18;;:::i;:::-;8892:58;8731:225;;;;:::o;8961:125::-;9026:9;;;9047:10;;;9044:36;;;9060:18;;:::i;9788:1391::-;10510:34;10498:47;;10575:23;10570:2;10561:12;;10554:45;10618:66;10722:3;10718:16;;;10714:25;;10709:2;10700:12;;10693:47;10759:17;10801:2;10792:12;;10785:24;;;10843:16;;;10839:25;;10834:2;10825:12;;10818:47;10895:34;10890:2;10881:12;;10874:56;10961:3;10955;10946:13;;10939:26;11000:16;;;10996:25;;10990:3;10981:13;;10974:48;11047:3;11038:13;;11031:25;11091:16;;;11087:25;11081:3;11072:13;;11065:48;9746:3;11168;11159:13;;9734:16;-1:-1:-1;9766:11:1;;;11129:44;9669:114;11184:184;11236:77;11233:1;11226:88;11333:4;11330:1;11323:15;11357:4;11354:1;11347:15","abiDefinition":[{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"agentRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"blockNumber","outputs":[{"internalType":"uint40","name":"","type":"uint40"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"castToAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"snapRoot_","type":"bytes32"},{"internalType":"bytes32","name":"agentRoot_","type":"bytes32"},{"internalType":"uint32","name":"nonce_","type":"uint32"},{"internalType":"uint40","name":"blockNumber_","type":"uint40"},{"internalType":"uint40","name":"timestamp_","type":"uint40"}],"name":"formatAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"snapRoot","type":"bytes32"},{"internalType":"bytes32","name":"agentRoot","type":"bytes32"},{"internalType":"uint40","name":"blockNumber","type":"uint40"},{"internalType":"uint40","name":"timestamp","type":"uint40"}],"internalType":"struct SummitAttestation","name":"summitAtt","type":"tuple"},{"internalType":"uint32","name":"nonce_","type":"uint32"}],"name":"formatSummitAttestation","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"hash","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"isAttestation","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"notary","type":"address"},{"internalType":"uint32","name":"nonce","type":"uint32"},{"internalType":"uint40","name":"submittedAt","type":"uint40"}],"internalType":"struct ExecutionAttestation","name":"execAtt","type":"tuple"}],"name":"isEmpty","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"nonce","outputs":[{"internalType":"uint32","name":"","type":"uint32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"snapRoot","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"}],"name":"timestamp","outputs":[{"internalType":"uint40","name":"","type":"uint40"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"bytes","name":"payload","type":"bytes"},{"internalType":"address","name":"notary","type":"address"}],"name":"toExecutionAttestation","outputs":[{"components":[{"internalType":"address","name":"notary","type":"address"},{"internalType":"uint32","name":"nonce","type":"uint32"},{"internalType":"uint40","name":"submittedAt","type":"uint40"}],"internalType":"struct ExecutionAttestation","name":"","type":"tuple"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"notice":"Exposes Attestation methods for testing against golang.","version":1},"developerDoc":{"kind":"dev","methods":{},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"agentRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"blockNumber\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"castToAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"snapRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"agentRoot_\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"nonce_\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp_\",\"type\":\"uint40\"}],\"name\":\"formatAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"snapRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"agentRoot\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"blockNumber\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct SummitAttestation\",\"name\":\"summitAtt\",\"type\":\"tuple\"},{\"internalType\":\"uint32\",\"name\":\"nonce_\",\"type\":\"uint32\"}],\"name\":\"formatSummitAttestation\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"hash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"isAttestation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"submittedAt\",\"type\":\"uint40\"}],\"internalType\":\"struct ExecutionAttestation\",\"name\":\"execAtt\",\"type\":\"tuple\"}],\"name\":\"isEmpty\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"snapRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"}],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"payload\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"}],\"name\":\"toExecutionAttestation\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"notary\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"nonce\",\"type\":\"uint32\"},{\"internalType\":\"uint40\",\"name\":\"submittedAt\",\"type\":\"uint40\"}],\"internalType\":\"struct ExecutionAttestation\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Exposes Attestation methods for testing against golang.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationHarness.t.sol\":\"AttestationHarness\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationHarness.t.sol\":{\"keccak256\":\"0xceea00bc4b22e9c57ff435207275b5df8459b24babf47fbbdaded6655da50dca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2429ebc2665bfada4ddb0aa4a256d9e089f3ead1853ac0787dad774e01a9d892\",\"dweb:/ipfs/QmTfu2PKWxQTAutNK95ctbA6P7USKCrYrRnUhLsKnkzcV8\"]}},\"version\":1}"},"hashes":{"agentRoot(bytes)":"3c4d0a2d","blockNumber(bytes)":"e948e600","castToAttestation(bytes)":"11f6389c","formatAttestation(bytes32,bytes32,uint32,uint40,uint40)":"86bf2253","formatSummitAttestation((bytes32,bytes32,uint40,uint40),uint32)":"ca3634c2","hash(bytes)":"aa1e84de","isAttestation(bytes)":"3ae7034d","isEmpty((address,uint32,uint40))":"26721a76","nonce(bytes)":"4e765004","snapRoot(bytes)":"91bacf60","timestamp(bytes)":"1c9aa222","toExecutionAttestation(bytes,address)":"d9569d9c"}},"solidity/AttestationHarness.t.sol:AttestationLib":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f04fb9b3bbbe648585cf8ce8eb33ce85bae55cd49dee7b804784c431511c1d364736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205f04fb9b3bbbe648585cf8ce8eb33ce85bae55cd49dee7b804784c431511c1d364736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint96,uint96,uint96,uint96): 12+12+12+12\nuint256 constant TIPS_LENGTH = 48;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n/// @dev Attestation is a memory view over a formatted attestation payload.\ntype Attestation is bytes29;\n/// @dev Attach library functions to Attestation\n\nusing {\n    AttestationLib.unwrap,\n    AttestationLib.equalToSummit,\n    AttestationLib.toExecutionAttestation,\n    AttestationLib.hash,\n    AttestationLib.snapRoot,\n    AttestationLib.agentRoot,\n    AttestationLib.nonce,\n    AttestationLib.blockNumber,\n    AttestationLib.timestamp\n} for Attestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the Summit contract.\nstruct SummitAttestation {\n    bytes32 snapRoot;\n    bytes32 agentRoot;\n    uint40 blockNumber;\n    uint40 timestamp;\n}\n/// @dev Attach library functions to SummitAttestation\n\nusing {AttestationLib.formatSummitAttestation} for SummitAttestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the ExecutionHub contract.\n/// mapping (bytes32 root =\u003e ExecutionAttestation) is supposed to be used\nstruct ExecutionAttestation {\n    address notary;\n    uint32 nonce;\n    uint40 submittedAt;\n}\n// 24 bits left for tight packing\n/// @dev Attach library functions to ExecutionAttestation\n\nusing {AttestationLib.isEmpty} for ExecutionAttestation global;\n\nlibrary AttestationLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Attestation structure represents the \"Snapshot Merkle Tree\" created from\n     * every Notary snapshot accepted by the Summit contract. Attestation includes\n     * the root of the \"Snapshot Merkle Tree\", as well as additional metadata.\n     *\n     * Steps for creation of \"Snapshot Merkle Tree\":\n     * 1. The list of hashes is composed for states in the Notary snapshot.\n     * 2. The list is padded with zero values until its length is 2**SNAPSHOT_TREE_HEIGHT.\n     * 3. Values from the list are used as leafs and the merkle tree is constructed.\n     *\n     * Similar to Origin, every derived Notary's \"Snapshot Merkle Root\" is saved in Summit contract.\n     * The main difference is that Origin contract itself is keeping track of an incremental merkle tree,\n     * by inserting the hash of the sent message and calculating the new \"Origin Merkle Root\".\n     * While Summit relies on Guards and Notaries to provide snapshot data, which is used to calculate the\n     * \"Snapshot Merkle Root\".\n     *\n     * Origin's State is \"state of Origin Merkle Tree after N-th message was sent\".\n     * Summit's Attestation is \"data for the N-th accepted Notary Snapshot\".\n     *\n     * Attestation is considered \"valid\" in Summit contract, if it matches the N-th (nonce)\n     * snapshot submitted by Notaries.\n     * Attestation is considered \"valid\" in Origin contract, if its underlying Snapshot is \"valid\".\n     *\n     * This means that a snapshot could be \"valid\" in Summit contract and \"invalid\" in Origin, if the underlying\n     * snapshot is invalid (i.e. one of the states in the list is invalid).\n     * The opposite could also be true. If a perfectly valid snapshot was never submitted to Summit, its attestation\n     * would be valid in Origin, but invalid in Summit (it was never accepted, so the metadata would be incorrect).\n     *\n     * Attestation is considered \"globally valid\", if it is valid in the Summit and all the Origin contracts.\n     *\n     * @dev Memory layout of Attestation fields\n     * [000 .. 032): snapRoot       bytes32 32 bytes    Root for \"Snapshot Merkle Tree\" created from a Notary snapshot\n     * [032 .. 064): agentRoot      bytes32 32 bytes    Root for \"Agent Merkle Tree\" tracked by BondingManager\n     * [064 .. 068): nonce          uint32   4 bytes    Total amount of all accepted Notary snapshots\n     * [068 .. 073): blockNumber    uint40   5 bytes    Block when this Notary snapshot was accepted in Summit\n     * [073 .. 078): timestamp      uint40   5 bytes    Time when this Notary snapshot was accepted in Summit\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_SNAP_ROOT = 0;\n    uint256 private constant OFFSET_AGENT_ROOT = 32;\n    uint256 private constant OFFSET_NONCE = 64;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 68;\n    uint256 private constant OFFSET_TIMESTAMP = 73;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ATTESTATION                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param snapRoot_     Snapshot merkle tree's root\n     * @param agentRoot_    Agent merkle tree's root\n     * @param nonce_        Attestation Nonce\n     * @param blockNumber_  Block number when attestation was created in Summit\n     * @param timestamp_    Block timestamp when attestation was created in Summit\n     * @return Formatted attestation\n     */\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns an Attestation view over the given payload.\n     * @dev Will revert if the payload is not an attestation.\n     */\n    function castToAttestation(bytes memory payload) internal pure returns (Attestation) {\n        return castToAttestation(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to an Attestation view.\n     * @dev Will revert if the memory view is not over an attestation.\n     */\n    function castToAttestation(bytes29 view_) internal pure returns (Attestation) {\n        require(isAttestation(view_), \"Not an attestation\");\n        return Attestation.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted Attestation.\n    function isAttestation(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == ATTESTATION_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Attestation att) internal pure returns (bytes29) {\n        return Attestation.unwrap(att);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param summitAtt     Attestation struct as it stored in Summit contract\n     * @param nonce_        Attestation nonce\n     * @return Formatted attestation\n     */\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return formatAttestation({\n            snapRoot_: summitAtt.snapRoot,\n            agentRoot_: summitAtt.agentRoot,\n            nonce_: nonce_,\n            blockNumber_: summitAtt.blockNumber,\n            timestamp_: summitAtt.timestamp\n        });\n    }\n\n    /// @notice Returns an empty struct to save in Summit contract upon initialization.\n    // solhint-disable-next-line ordering\n    function emptySummitAttestation() internal view returns (SummitAttestation memory) {\n        return summitAttestation(bytes32(0), bytes32(0));\n    }\n\n    /// @notice Returns a struct to save in the Summit contract for the given root and height.\n    function summitAttestation(bytes32 snapRoot_, bytes32 agentRoot_)\n        internal\n        view\n        returns (SummitAttestation memory summitAtt)\n    {\n        summitAtt.snapRoot = snapRoot_;\n        summitAtt.agentRoot = agentRoot_;\n        summitAtt.blockNumber = uint40(block.number);\n        summitAtt.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that an Attestation and its Summit representation are equal.\n    function equalToSummit(Attestation att, SummitAttestation memory summitAtt) internal pure returns (bool) {\n        return att.snapRoot() == summitAtt.snapRoot \u0026\u0026 att.agentRoot() == summitAtt.agentRoot\n            \u0026\u0026 att.blockNumber() == summitAtt.blockNumber \u0026\u0026 att.timestamp() == summitAtt.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(Attestation att, address notary)\n        internal\n        view\n        returns (ExecutionAttestation memory attestation)\n    {\n        attestation.notary = notary;\n        attestation.nonce = att.nonce();\n        // We need to store the timestamp when attestation was submitted to Destination\n        attestation.submittedAt = uint40(block.timestamp);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) internal pure returns (bool) {\n        return execAtt.notary == address(0);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION HASHING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of an Attestation, that could be later signed by a Notary.\n    function hash(Attestation att) internal pure returns (bytes32) {\n        // Get the underlying memory view\n        bytes29 view_ = att.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(ATTESTATION_SALT, view_.keccak()));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns root of the Snapshot merkle tree created in the Summit contract.\n    function snapRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_SNAP_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns root of the Agent merkle tree tracked by BondingManager.\n    function agentRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_AGENT_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns nonce of Summit contract at the time, when attestation was created.\n    function nonce(Attestation att) internal pure returns (uint32) {\n        bytes29 view_ = att.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when attestation was created in Summit.\n    function blockNumber(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when attestation was created in Summit.\n    /// @dev This is the timestamp according to the Synapse Chain.\n    function timestamp(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n// solhint-disable ordering\n/// @notice Exposes Attestation methods for testing against golang.\ncontract AttestationHarness {\n    using AttestationLib for bytes;\n    using AttestationLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToAttestation(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Attestation attestation = AttestationLib.castToAttestation(payload);\n        return attestation.unwrap().clone();\n    }\n\n    function snapRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().snapRoot();\n    }\n\n    function agentRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().agentRoot();\n    }\n\n    function nonce(bytes memory payload) public pure returns (uint32) {\n        return payload.castToAttestation().nonce();\n    }\n\n    function blockNumber(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().blockNumber();\n    }\n\n    function timestamp(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().timestamp();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().hash();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(bytes memory payload, address notary)\n        public\n        view\n        returns (ExecutionAttestation memory)\n    {\n        return payload.castToAttestation().toExecutionAttestation(notary);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) public pure returns (bool) {\n        return execAtt.isEmpty();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return summitAtt.formatSummitAttestation(nonce_);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ATTESTATION FORMATTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) public pure returns (bytes memory) {\n        return AttestationLib.formatAttestation(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    function isAttestation(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isAttestation();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"49450:11700:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;49450:11700:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"49450:11700:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"OFFSET_SNAP_ROOT":{"details":"Attestation structure represents the \"Snapshot Merkle Tree\" created from every Notary snapshot accepted by the Summit contract. Attestation includes the root of the \"Snapshot Merkle Tree\", as well as additional metadata. Steps for creation of \"Snapshot Merkle Tree\": 1. The list of hashes is composed for states in the Notary snapshot. 2. The list is padded with zero values until its length is 2**SNAPSHOT_TREE_HEIGHT. 3. Values from the list are used as leafs and the merkle tree is constructed. Similar to Origin, every derived Notary's \"Snapshot Merkle Root\" is saved in Summit contract. The main difference is that Origin contract itself is keeping track of an incremental merkle tree, by inserting the hash of the sent message and calculating the new \"Origin Merkle Root\". While Summit relies on Guards and Notaries to provide snapshot data, which is used to calculate the \"Snapshot Merkle Root\". Origin's State is \"state of Origin Merkle Tree after N-th message was sent\". Summit's Attestation is \"data for the N-th accepted Notary Snapshot\". Attestation is considered \"valid\" in Summit contract, if it matches the N-th (nonce) snapshot submitted by Notaries. Attestation is considered \"valid\" in Origin contract, if its underlying Snapshot is \"valid\". This means that a snapshot could be \"valid\" in Summit contract and \"invalid\" in Origin, if the underlying snapshot is invalid (i.e. one of the states in the list is invalid). The opposite could also be true. If a perfectly valid snapshot was never submitted to Summit, its attestation would be valid in Origin, but invalid in Summit (it was never accepted, so the metadata would be incorrect). Attestation is considered \"globally valid\", if it is valid in the Summit and all the Origin contracts.Memory layout of Attestation fields [000 .. 032): snapRoot       bytes32 32 bytes    Root for \"Snapshot Merkle Tree\" created from a Notary snapshot [032 .. 064): agentRoot      bytes32 32 bytes    Root for \"Agent Merkle Tree\" tracked by BondingManager [064 .. 068): nonce          uint32   4 bytes    Total amount of all accepted Notary snapshots [068 .. 073): blockNumber    uint40   5 bytes    Block when this Notary snapshot was accepted in Summit [073 .. 078): timestamp      uint40   5 bytes    Time when this Notary snapshot was accepted in Summit The variables below are not supposed to be used outside of the library directly."}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"OFFSET_SNAP_ROOT\":{\"details\":\"Attestation structure represents the \\\"Snapshot Merkle Tree\\\" created from every Notary snapshot accepted by the Summit contract. Attestation includes the root of the \\\"Snapshot Merkle Tree\\\", as well as additional metadata. Steps for creation of \\\"Snapshot Merkle Tree\\\": 1. The list of hashes is composed for states in the Notary snapshot. 2. The list is padded with zero values until its length is 2**SNAPSHOT_TREE_HEIGHT. 3. Values from the list are used as leafs and the merkle tree is constructed. Similar to Origin, every derived Notary's \\\"Snapshot Merkle Root\\\" is saved in Summit contract. The main difference is that Origin contract itself is keeping track of an incremental merkle tree, by inserting the hash of the sent message and calculating the new \\\"Origin Merkle Root\\\". While Summit relies on Guards and Notaries to provide snapshot data, which is used to calculate the \\\"Snapshot Merkle Root\\\". Origin's State is \\\"state of Origin Merkle Tree after N-th message was sent\\\". Summit's Attestation is \\\"data for the N-th accepted Notary Snapshot\\\". Attestation is considered \\\"valid\\\" in Summit contract, if it matches the N-th (nonce) snapshot submitted by Notaries. Attestation is considered \\\"valid\\\" in Origin contract, if its underlying Snapshot is \\\"valid\\\". This means that a snapshot could be \\\"valid\\\" in Summit contract and \\\"invalid\\\" in Origin, if the underlying snapshot is invalid (i.e. one of the states in the list is invalid). The opposite could also be true. If a perfectly valid snapshot was never submitted to Summit, its attestation would be valid in Origin, but invalid in Summit (it was never accepted, so the metadata would be incorrect). Attestation is considered \\\"globally valid\\\", if it is valid in the Summit and all the Origin contracts.Memory layout of Attestation fields [000 .. 032): snapRoot       bytes32 32 bytes    Root for \\\"Snapshot Merkle Tree\\\" created from a Notary snapshot [032 .. 064): agentRoot      bytes32 32 bytes    Root for \\\"Agent Merkle Tree\\\" tracked by BondingManager [064 .. 068): nonce          uint32   4 bytes    Total amount of all accepted Notary snapshots [068 .. 073): blockNumber    uint40   5 bytes    Block when this Notary snapshot was accepted in Summit [073 .. 078): timestamp      uint40   5 bytes    Time when this Notary snapshot was accepted in Summit The variables below are not supposed to be used outside of the library directly.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationHarness.t.sol\":\"AttestationLib\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationHarness.t.sol\":{\"keccak256\":\"0xceea00bc4b22e9c57ff435207275b5df8459b24babf47fbbdaded6655da50dca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2429ebc2665bfada4ddb0aa4a256d9e089f3ead1853ac0787dad774e01a9d892\",\"dweb:/ipfs/QmTfu2PKWxQTAutNK95ctbA6P7USKCrYrRnUhLsKnkzcV8\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationHarness.t.sol:ByteString":{"code":"0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207770bb92e6032144968d0aac3c1fcc4c647d6602fc88a5181a88b5d29b57f3c464736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207770bb92e6032144968d0aac3c1fcc4c647d6602fc88a5181a88b5d29b57f3c464736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint96,uint96,uint96,uint96): 12+12+12+12\nuint256 constant TIPS_LENGTH = 48;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n/// @dev Attestation is a memory view over a formatted attestation payload.\ntype Attestation is bytes29;\n/// @dev Attach library functions to Attestation\n\nusing {\n    AttestationLib.unwrap,\n    AttestationLib.equalToSummit,\n    AttestationLib.toExecutionAttestation,\n    AttestationLib.hash,\n    AttestationLib.snapRoot,\n    AttestationLib.agentRoot,\n    AttestationLib.nonce,\n    AttestationLib.blockNumber,\n    AttestationLib.timestamp\n} for Attestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the Summit contract.\nstruct SummitAttestation {\n    bytes32 snapRoot;\n    bytes32 agentRoot;\n    uint40 blockNumber;\n    uint40 timestamp;\n}\n/// @dev Attach library functions to SummitAttestation\n\nusing {AttestationLib.formatSummitAttestation} for SummitAttestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the ExecutionHub contract.\n/// mapping (bytes32 root =\u003e ExecutionAttestation) is supposed to be used\nstruct ExecutionAttestation {\n    address notary;\n    uint32 nonce;\n    uint40 submittedAt;\n}\n// 24 bits left for tight packing\n/// @dev Attach library functions to ExecutionAttestation\n\nusing {AttestationLib.isEmpty} for ExecutionAttestation global;\n\nlibrary AttestationLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Attestation structure represents the \"Snapshot Merkle Tree\" created from\n     * every Notary snapshot accepted by the Summit contract. Attestation includes\n     * the root of the \"Snapshot Merkle Tree\", as well as additional metadata.\n     *\n     * Steps for creation of \"Snapshot Merkle Tree\":\n     * 1. The list of hashes is composed for states in the Notary snapshot.\n     * 2. The list is padded with zero values until its length is 2**SNAPSHOT_TREE_HEIGHT.\n     * 3. Values from the list are used as leafs and the merkle tree is constructed.\n     *\n     * Similar to Origin, every derived Notary's \"Snapshot Merkle Root\" is saved in Summit contract.\n     * The main difference is that Origin contract itself is keeping track of an incremental merkle tree,\n     * by inserting the hash of the sent message and calculating the new \"Origin Merkle Root\".\n     * While Summit relies on Guards and Notaries to provide snapshot data, which is used to calculate the\n     * \"Snapshot Merkle Root\".\n     *\n     * Origin's State is \"state of Origin Merkle Tree after N-th message was sent\".\n     * Summit's Attestation is \"data for the N-th accepted Notary Snapshot\".\n     *\n     * Attestation is considered \"valid\" in Summit contract, if it matches the N-th (nonce)\n     * snapshot submitted by Notaries.\n     * Attestation is considered \"valid\" in Origin contract, if its underlying Snapshot is \"valid\".\n     *\n     * This means that a snapshot could be \"valid\" in Summit contract and \"invalid\" in Origin, if the underlying\n     * snapshot is invalid (i.e. one of the states in the list is invalid).\n     * The opposite could also be true. If a perfectly valid snapshot was never submitted to Summit, its attestation\n     * would be valid in Origin, but invalid in Summit (it was never accepted, so the metadata would be incorrect).\n     *\n     * Attestation is considered \"globally valid\", if it is valid in the Summit and all the Origin contracts.\n     *\n     * @dev Memory layout of Attestation fields\n     * [000 .. 032): snapRoot       bytes32 32 bytes    Root for \"Snapshot Merkle Tree\" created from a Notary snapshot\n     * [032 .. 064): agentRoot      bytes32 32 bytes    Root for \"Agent Merkle Tree\" tracked by BondingManager\n     * [064 .. 068): nonce          uint32   4 bytes    Total amount of all accepted Notary snapshots\n     * [068 .. 073): blockNumber    uint40   5 bytes    Block when this Notary snapshot was accepted in Summit\n     * [073 .. 078): timestamp      uint40   5 bytes    Time when this Notary snapshot was accepted in Summit\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_SNAP_ROOT = 0;\n    uint256 private constant OFFSET_AGENT_ROOT = 32;\n    uint256 private constant OFFSET_NONCE = 64;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 68;\n    uint256 private constant OFFSET_TIMESTAMP = 73;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ATTESTATION                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param snapRoot_     Snapshot merkle tree's root\n     * @param agentRoot_    Agent merkle tree's root\n     * @param nonce_        Attestation Nonce\n     * @param blockNumber_  Block number when attestation was created in Summit\n     * @param timestamp_    Block timestamp when attestation was created in Summit\n     * @return Formatted attestation\n     */\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns an Attestation view over the given payload.\n     * @dev Will revert if the payload is not an attestation.\n     */\n    function castToAttestation(bytes memory payload) internal pure returns (Attestation) {\n        return castToAttestation(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to an Attestation view.\n     * @dev Will revert if the memory view is not over an attestation.\n     */\n    function castToAttestation(bytes29 view_) internal pure returns (Attestation) {\n        require(isAttestation(view_), \"Not an attestation\");\n        return Attestation.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted Attestation.\n    function isAttestation(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == ATTESTATION_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Attestation att) internal pure returns (bytes29) {\n        return Attestation.unwrap(att);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param summitAtt     Attestation struct as it stored in Summit contract\n     * @param nonce_        Attestation nonce\n     * @return Formatted attestation\n     */\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return formatAttestation({\n            snapRoot_: summitAtt.snapRoot,\n            agentRoot_: summitAtt.agentRoot,\n            nonce_: nonce_,\n            blockNumber_: summitAtt.blockNumber,\n            timestamp_: summitAtt.timestamp\n        });\n    }\n\n    /// @notice Returns an empty struct to save in Summit contract upon initialization.\n    // solhint-disable-next-line ordering\n    function emptySummitAttestation() internal view returns (SummitAttestation memory) {\n        return summitAttestation(bytes32(0), bytes32(0));\n    }\n\n    /// @notice Returns a struct to save in the Summit contract for the given root and height.\n    function summitAttestation(bytes32 snapRoot_, bytes32 agentRoot_)\n        internal\n        view\n        returns (SummitAttestation memory summitAtt)\n    {\n        summitAtt.snapRoot = snapRoot_;\n        summitAtt.agentRoot = agentRoot_;\n        summitAtt.blockNumber = uint40(block.number);\n        summitAtt.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that an Attestation and its Summit representation are equal.\n    function equalToSummit(Attestation att, SummitAttestation memory summitAtt) internal pure returns (bool) {\n        return att.snapRoot() == summitAtt.snapRoot \u0026\u0026 att.agentRoot() == summitAtt.agentRoot\n            \u0026\u0026 att.blockNumber() == summitAtt.blockNumber \u0026\u0026 att.timestamp() == summitAtt.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(Attestation att, address notary)\n        internal\n        view\n        returns (ExecutionAttestation memory attestation)\n    {\n        attestation.notary = notary;\n        attestation.nonce = att.nonce();\n        // We need to store the timestamp when attestation was submitted to Destination\n        attestation.submittedAt = uint40(block.timestamp);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) internal pure returns (bool) {\n        return execAtt.notary == address(0);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION HASHING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of an Attestation, that could be later signed by a Notary.\n    function hash(Attestation att) internal pure returns (bytes32) {\n        // Get the underlying memory view\n        bytes29 view_ = att.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(ATTESTATION_SALT, view_.keccak()));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns root of the Snapshot merkle tree created in the Summit contract.\n    function snapRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_SNAP_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns root of the Agent merkle tree tracked by BondingManager.\n    function agentRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_AGENT_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns nonce of Summit contract at the time, when attestation was created.\n    function nonce(Attestation att) internal pure returns (uint32) {\n        bytes29 view_ = att.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when attestation was created in Summit.\n    function blockNumber(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when attestation was created in Summit.\n    /// @dev This is the timestamp according to the Synapse Chain.\n    function timestamp(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n// solhint-disable ordering\n/// @notice Exposes Attestation methods for testing against golang.\ncontract AttestationHarness {\n    using AttestationLib for bytes;\n    using AttestationLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToAttestation(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Attestation attestation = AttestationLib.castToAttestation(payload);\n        return attestation.unwrap().clone();\n    }\n\n    function snapRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().snapRoot();\n    }\n\n    function agentRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().agentRoot();\n    }\n\n    function nonce(bytes memory payload) public pure returns (uint32) {\n        return payload.castToAttestation().nonce();\n    }\n\n    function blockNumber(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().blockNumber();\n    }\n\n    function timestamp(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().timestamp();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().hash();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(bytes memory payload, address notary)\n        public\n        view\n        returns (ExecutionAttestation memory)\n    {\n        return payload.castToAttestation().toExecutionAttestation(notary);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) public pure returns (bool) {\n        return execAtt.isEmpty();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return summitAtt.formatSummitAttestation(nonce_);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ATTESTATION FORMATTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) public pure returns (bytes memory) {\n        return AttestationLib.formatAttestation(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    function isAttestation(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isAttestation();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"35474:9174:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;35474:9174:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"35474:9174:0:-:0;;;;;;;;","abiDefinition":[],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"SELECTOR_LENGTH":{"details":"Calldata memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes"},"SIGNATURE_LENGTH":{"details":"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"SELECTOR_LENGTH\":{\"details\":\"Calldata memory layout [000 .. 004) selector    bytes4  4 bytes      Optional: N function arguments [004 .. 036) arg1        bytes32 32 bytes      .. [AAA .. END) argN        bytes32 32 bytes\"},\"SIGNATURE_LENGTH\":{\"details\":\"non-compact ECDSA signatures are enforced as of OZ 4.7.3      Signature payload memory layout [000 .. 032) r   bytes32 32 bytes [032 .. 064) s   bytes32 32 bytes [064 .. 065) v   uint8    1 byte\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationHarness.t.sol\":\"ByteString\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationHarness.t.sol\":{\"keccak256\":\"0xceea00bc4b22e9c57ff435207275b5df8459b24babf47fbbdaded6655da50dca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2429ebc2665bfada4ddb0aa4a256d9e089f3ead1853ac0787dad774e01a9d892\",\"dweb:/ipfs/QmTfu2PKWxQTAutNK95ctbA6P7USKCrYrRnUhLsKnkzcV8\"]}},\"version\":1}"},"hashes":{}},"solidity/AttestationHarness.t.sol:TypedMemView":{"code":"0x6101f061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212206216ef17d8a7f443bcfbf6003d946c804cb34daa8db803202f3870075ef303b964736f6c63430008110033","runtime-code":"0x73000000000000000000000000000000000000000030146080604052600436106100ad5760003560e01c806397b8ad4a11610080578063eb74062811610065578063eb740628146100f8578063f26be3fc14610100578063fb734584146100f857600080fd5b806397b8ad4a146100cd578063b602d173146100e557600080fd5b806310153fce146100b25780631136e7ea146100cd57806313090c5a146100d55780631bfe17ce146100dd575b600080fd5b6100ba602881565b6040519081526020015b60405180910390f35b6100ba601881565b6100ba610158565b6100ba610172565b6100ba6bffffffffffffffffffffffff81565b6100ba606081565b6101277fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000081565b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000090911681526020016100c4565b606061016581601861017a565b61016f919061017a565b81565b61016f606060185b808201808211156101b4577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b9291505056fea26469706673582212206216ef17d8a7f443bcfbf6003d946c804cb34daa8db803202f3870075ef303b964736f6c63430008110033","info":{"source":"// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nlibrary TypedMemView {\n    // Why does this exist?\n    // the solidity `bytes memory` type has a few weaknesses.\n    // 1. You can't index ranges effectively\n    // 2. You can't slice without copying\n    // 3. The underlying data may represent any type\n    // 4. Solidity never deallocates memory, and memory costs grow\n    //    superlinearly\n\n    // By using a memory view instead of a `bytes memory` we get the following\n    // advantages:\n    // 1. Slices are done on the stack, by manipulating the pointer\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\n    // 3. We can insert type info into the pointer, and typecheck at runtime\n\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\n    // algorithms.\n\n    // Why bytes29?\n    // We want to avoid confusion between views, digests, and other common\n    // types so we chose a large and uncommonly used odd number of bytes\n    //\n    // Note that while bytes are left-aligned in a word, integers and addresses\n    // are right-aligned. This means when working in assembly we have to\n    // account for the 3 unused bytes on the righthand side\n    //\n    // First 5 bytes are a type flag.\n    // - ff_ffff_fffe is reserved for unknown type.\n    // - ff_ffff_ffff is reserved for invalid types/errors.\n    // next 12 are memory address\n    // next 12 are len\n    // bottom 3 bytes are empty\n\n    // Assumptions:\n    // - non-modification of memory.\n    // - No Solidity updates\n    // - - wrt free mem point\n    // - - wrt bytes representation in memory\n    // - - wrt memory addressing in general\n\n    // Usage:\n    // - create type constants\n    // - use `assertType` for runtime type assertions\n    // - - unfortunately we can't do this at compile time yet :(\n    // - recommended: implement modifiers that perform type checking\n    // - - e.g.\n    // - - `uint40 constant MY_TYPE = 3;`\n    // - - ` modifier onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\n    // - instantiate a typed view from a bytearray using `ref`\n    // - use `index` to inspect the contents of the view\n    // - use `slice` to create smaller views into the same memory\n    // - - `slice` can increase the offset\n    // - - `slice can decrease the length`\n    // - - must specify the output type of `slice`\n    // - - `slice` will return a null view if you try to overrun\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\n    // - use `equal` for typed comparisons.\n\n    // The null view\n    bytes29 public constant NULL = hex\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\";\n\n    /**\n     * @dev Memory layout for bytes29\n     * TODO (Chi): with the user defined types storing type is no longer necessary.\n     * Update the library, transforming bytes29 to bytes24 in the process.\n     * [000..005)   type     5 bytes    Type flag for the pointer\n     * [005..017)   loc     12 bytes    Memory address of underlying bytes\n     * [017..029)   len     12 bytes    Length of underlying bytes\n     * [029..032)   empty    3 bytes    Not used\n     */\n    uint256 public constant BITS_TYPE = 40;\n    uint256 public constant BITS_LOC = 96;\n    uint256 public constant BITS_LEN = 96;\n    uint256 public constant BITS_EMPTY = 24;\n\n    // `SHIFT_X` is how much bits to shift for `X` to be in the very bottom bits\n    uint256 public constant SHIFT_LEN = BITS_EMPTY; // 24\n    uint256 public constant SHIFT_LOC = SHIFT_LEN + BITS_LEN; // 24 + 96 = 120\n    uint256 public constant SHIFT_TYPE = SHIFT_LOC + BITS_LOC; // 24 + 96 + 96 = 216\n    // Bitmask for the lowest 96 bits\n    uint256 public constant LOW_96_BITS_MASK = type(uint96).max;\n\n    // For nibble encoding\n    bytes private constant NIBBLE_LOOKUP = \"0123456789abcdef\";\n\n    /**\n     * @notice Returns the encoded hex character that represents the lower 4 bits of the argument.\n     * @param byte_     The byte\n     * @return char     The encoded hex character\n     */\n    function nibbleHex(uint8 byte_) internal pure returns (uint8 char) {\n        uint8 nibble = byte_ \u0026 0x0f; // keep bottom 4 bits, zero out top 4 bits\n        char = uint8(NIBBLE_LOOKUP[nibble]);\n    }\n\n    /**\n     * @notice      Returns a uint16 containing the hex-encoded byte.\n     * @param b     The byte\n     * @return      encoded - The hex-encoded byte\n     */\n    function byteHex(uint8 b) internal pure returns (uint16 encoded) {\n        encoded |= nibbleHex(b \u003e\u003e 4); // top 4 bits\n        encoded \u003c\u003c= 8;\n        encoded |= nibbleHex(b); // lower 4 bits\n    }\n\n    /**\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\n     *              `second` contains the encoded lower 16 bytes.\n     *\n     * @param b     The 32 bytes as uint256\n     * @return      first - The top 16 bytes\n     * @return      second - The bottom 16 bytes\n     */\n    function encodeHex(uint256 b) internal pure returns (uint256 first, uint256 second) {\n        for (uint8 i = 31; i \u003e 15;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            first |= byteHex(byte_);\n            if (i != 16) {\n                first \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n\n        // abusing underflow here =_=\n        for (uint8 i = 15; i \u003c 255;) {\n            uint8 byte_ = uint8(b \u003e\u003e (i * 8));\n            second |= byteHex(byte_);\n            if (i != 0) {\n                second \u003c\u003c= 16;\n            }\n            unchecked {\n                i -= 1;\n            }\n        }\n    }\n\n    /**\n     * @notice          Changes the endianness of a uint256.\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\n     * @param b         The unsigned integer to reverse\n     * @return          v - The reversed value\n     */\n    function reverseUint256(uint256 b) internal pure returns (uint256 v) {\n        v = b;\n\n        // swap bytes\n        v = ((v \u003e\u003e 8) \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF)\n            | ((v \u0026 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) \u003c\u003c 8);\n        // swap 2-byte long pairs\n        v = ((v \u003e\u003e 16) \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF)\n            | ((v \u0026 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) \u003c\u003c 16);\n        // swap 4-byte long pairs\n        v = ((v \u003e\u003e 32) \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF)\n            | ((v \u0026 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) \u003c\u003c 32);\n        // swap 8-byte long pairs\n        v = ((v \u003e\u003e 64) \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF)\n            | ((v \u0026 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) \u003c\u003c 64);\n        // swap 16-byte long pairs\n        v = (v \u003e\u003e 128) | (v \u003c\u003c 128);\n    }\n\n    /**\n     * @notice      Create a mask with the highest `len_` bits set.\n     * @param len_  The length\n     * @return      mask - The mask\n     */\n    function leftMask(uint8 len_) private pure returns (uint256 mask) {\n        // 0x800...00 binary representation is 100...00\n        // sar stands for \"signed arithmetic shift\": https://en.wikipedia.org/wiki/Arithmetic_shift\n        // sar(N-1, 100...00) = 11...100..00, with exactly N highest bits set to 1\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mask := sar(sub(len_, 1), 0x8000000000000000000000000000000000000000000000000000000000000000)\n        }\n    }\n\n    /**\n     * @notice      Return the null view.\n     * @return      bytes29 - The null view\n     */\n    // solhint-disable-next-line ordering\n    function nullView() internal pure returns (bytes29) {\n        return NULL;\n    }\n\n    /**\n     * @notice      Check if the view is null.\n     * @return      bool - True if the view is null\n     */\n    function isNull(bytes29 view_) internal pure returns (bool) {\n        return view_ == NULL;\n    }\n\n    /**\n     * @notice      Check if the view is not null.\n     * @return      bool - True if the view is not null\n     */\n    function notNull(bytes29 view_) internal pure returns (bool) {\n        return !isNull(view_);\n    }\n\n    /**\n     * @notice          Check if the view is of a valid type and points to a valid location\n     *                  in memory.\n     * @dev             We perform this check by examining solidity's unallocated memory\n     *                  pointer and ensuring that the view's upper bound is less than that.\n     * @param view_     The view\n     * @return          ret - True if the view is valid\n     */\n    function isValid(bytes29 view_) internal pure returns (bool ret) {\n        if (typeOf(view_) == 0xffffffffff) {\n            return false;\n        }\n        uint256 end_ = end(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // View is valid if (\"upper bound\" \u003c= \"unallocated memory pointer\")\n            // Upper bound is exclusive, hence \"\u003c=\"\n            ret := not(gt(end_, mload(0x40)))\n        }\n    }\n\n    /**\n     * @notice          Require that a typed memory view be valid.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @return          bytes29 - The validated view\n     */\n    function assertValid(bytes29 view_) internal pure returns (bytes29) {\n        require(isValid(view_), \"Validity assertion failed\");\n        return view_;\n    }\n\n    /**\n     * @notice          Return true if the view_ is of the expected type. Otherwise false.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bool - True if the view_ is of the expected type\n     */\n    function isType(bytes29 view_, uint40 expected) internal pure returns (bool) {\n        return typeOf(view_) == expected;\n    }\n\n    /**\n     * @notice          Require that a typed memory view has a specific type.\n     * @dev             Returns the view for easy chaining.\n     * @param view_     The view\n     * @param expected  The expected type\n     * @return          bytes29 - The view with validated type\n     */\n    function assertType(bytes29 view_, uint40 expected) internal pure returns (bytes29) {\n        if (!isType(view_, expected)) {\n            (, uint256 g) = encodeHex(uint256(typeOf(view_)));\n            (, uint256 e) = encodeHex(uint256(expected));\n            string memory err =\n                string(abi.encodePacked(\"Type assertion failed. Got 0x\", uint80(g), \". Expected 0x\", uint80(e)));\n            revert(err);\n        }\n        return view_;\n    }\n\n    /**\n     * @notice          Return an identical view with a different type.\n     * @param view_     The view\n     * @param newType   The new type\n     * @return          newView - The new view with the specified type\n     */\n    function castTo(bytes29 view_, uint40 newType) internal pure returns (bytes29 newView) {\n        // How many bits are the \"type bits\" occupying\n        uint256 bitsType = BITS_TYPE;\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // shift off the \"type bits\" (shift left, then sift right)\n            newView := or(newView, shr(bitsType, shl(bitsType, view_)))\n            // set the new \"type bits\" (shift left, then OR)\n            newView := or(newView, shl(shiftType, newType))\n        }\n    }\n\n    /**\n     * @notice          Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Unsafe raw pointer construction. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function unsafeBuildUnchecked(uint256 type_, uint256 loc_, uint256 len_) private pure returns (bytes29 newView) {\n        uint256 bitsLoc = BITS_LOC;\n        uint256 bitsLen = BITS_LEN;\n        uint256 bitsEmpty = BITS_EMPTY;\n        // Ref memory layout\n        // [000..005) 5 bytes of type\n        // [005..017) 12 bytes of location\n        // [017..029) 12 bytes of length\n        // last 3 bits are blank and dropped in typecast\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // insert `type`, shift to prepare empty bits for `loc`\n            newView := shl(bitsLoc, or(newView, type_))\n            // insert `loc`, shift to prepare empty bits for `len`\n            newView := shl(bitsLen, or(newView, loc_))\n            // insert `len`, shift to insert 3 blank lowest bits\n            newView := shl(bitsEmpty, or(newView, len_))\n        }\n    }\n\n    /**\n     * @notice          Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @dev             Instantiate a new memory view. This should generally not be called\n     *                  directly. Prefer `ref` wherever possible.\n     * @param type_     The type\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @return          newView - The new view with the specified type, location and length\n     */\n    function build(uint256 type_, uint256 loc_, uint256 len_) internal pure returns (bytes29 newView) {\n        uint256 end_ = loc_ + len_;\n        // Make sure that a view is not constructed that points to unallocated memory\n        // as this could be indicative of a buffer overflow attack\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            if gt(end_, mload(0x40)) { end_ := 0 }\n        }\n        if (end_ == 0) {\n            return NULL;\n        }\n        newView = unsafeBuildUnchecked(type_, loc_, len_);\n    }\n\n    /**\n     * @notice          Instantiate a memory view from a byte array.\n     * @dev             Note that due to Solidity memory representation, it is not possible to\n     *                  implement a deref, as the `bytes` type stores its len in memory.\n     * @param arr       The byte array\n     * @param newType   The type\n     * @return          bytes29 - The memory view\n     */\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\n        uint256 len_ = arr.length;\n        // `bytes arr` is stored in memory in the following way\n        // 1. First, uint256 arr.length is stored. That requires 32 bytes (0x20).\n        // 2. Then, the array data is stored.\n        uint256 loc_;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // We add 0x20, so that the view starts exactly where the array data starts\n            loc_ := add(arr, 0x20)\n        }\n\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Return the associated type information.\n     * @param view_     The memory view\n     * @return          type_ - The type associated with the view\n     */\n    function typeOf(bytes29 view_) internal pure returns (uint40 type_) {\n        // How many bits are the \"type bits\" shifted from the bottom\n        uint256 shiftType = SHIFT_TYPE;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"type bits\". \"type bits\" are occupying\n            // the highest bits, so all that's left is \"type bits\", OR is not required.\n            type_ := shr(shiftType, view_)\n        }\n    }\n\n    /**\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the 5-byte type flag is equal\n     */\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\n        // Check that the highest 5 bytes are equal: xor and shift out lower 27 bytes\n        return (left ^ right) \u003e\u003e SHIFT_TYPE == 0;\n    }\n\n    /**\n     * @notice          Return the memory address of the underlying bytes.\n     * @param view_     The view\n     * @return          loc_ - The memory address\n     */\n    function loc(bytes29 view_) internal pure returns (uint96 loc_) {\n        // How many bits are the \"loc bits\" shifted from the bottom\n        uint256 shiftLoc = SHIFT_LOC;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"loc bits\".\n            // Then use the lowest 96 bits to determine `loc` by applying the bit-mask.\n            loc_ := and(shr(shiftLoc, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          The number of memory words this memory view occupies, rounded up.\n     * @param view_     The view\n     * @return          uint256 - The number of memory words\n     */\n    function words(bytes29 view_) internal pure returns (uint256) {\n        // returning ceil(length / 32.0)\n        return (uint256(len(view_)) + 31) / 32;\n    }\n\n    /**\n     * @notice          The in-memory footprint of a fresh copy of the view.\n     * @param view_   The view\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\n     */\n    function footprint(bytes29 view_) internal pure returns (uint256) {\n        return words(view_) * 32;\n    }\n\n    /**\n     * @notice          The number of bytes of the view.\n     * @param view_     The view\n     * @return          len_ - The length of the view\n     */\n    function len(bytes29 view_) internal pure returns (uint96 len_) {\n        // How many bits are the \"len bits\" shifted from the bottom\n        uint256 shiftLen = SHIFT_LEN;\n        // Mask for the bottom 96 bits\n        uint256 uint96Mask = LOW_96_BITS_MASK;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Shift out the bottom bits preceding \"len bits\".\n            // Then use the lowest 96 bits to determine `len` by applying the bit-mask.\n            len_ := and(shr(shiftLen, view_), uint96Mask)\n        }\n    }\n\n    /**\n     * @notice          Returns the endpoint of `view_`.\n     * @param view_   The view\n     * @return          uint256 - The endpoint of `view_`\n     */\n    function end(bytes29 view_) internal pure returns (uint256) {\n        unchecked {\n            return loc(view_) + len(view_);\n        }\n    }\n\n    /**\n     * @notice          Safe slicing without memory modification.\n     * @param view_     The view\n     * @param index_    The start index\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function slice(bytes29 view_, uint256 index_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        uint256 loc_ = loc(view_);\n\n        // Ensure it doesn't overrun the view\n        if (loc_ + index_ + len_ \u003e end(view_)) {\n            return NULL;\n        }\n\n        loc_ = loc_ + index_;\n        return build(newType, loc_, len_);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing\n     *                  bytes from `index` to end(view_).\n     * @param view_     The view\n     * @param index_    The start index\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function sliceFrom(bytes29 view_, uint256 index_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, index_, len(view_) - index_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the first `len` bytes.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function prefix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, 0, len_, newType);\n    }\n\n    /**\n     * @notice          Shortcut to `slice`. Gets a view representing the last `len` byte.\n     * @param view_     The view\n     * @param len_      The length\n     * @param newType   The new type\n     * @return          bytes29 - The new view\n     */\n    function postfix(bytes29 view_, uint256 len_, uint40 newType) internal pure returns (bytes29) {\n        return slice(view_, uint256(len(view_)) - len_, len_, newType);\n    }\n\n    /**\n     * @notice          Construct an error message for an indexing overrun.\n     * @param loc_      The memory address\n     * @param len_      The length\n     * @param index_    The index\n     * @param slice_    The slice where the overrun occurred\n     * @return          err - The err\n     */\n    function indexErrOverrun(uint256 loc_, uint256 len_, uint256 index_, uint256 slice_)\n        internal\n        pure\n        returns (string memory err)\n    {\n        (, uint256 a) = encodeHex(loc_);\n        (, uint256 b) = encodeHex(len_);\n        (, uint256 c) = encodeHex(index_);\n        (, uint256 d) = encodeHex(slice_);\n        err = string(\n            abi.encodePacked(\n                \"TypedMemView/index - Overran the view. Slice is at 0x\",\n                uint48(a),\n                \" with length 0x\",\n                uint48(b),\n                \". Attempted to index at offset 0x\",\n                uint48(c),\n                \" with length 0x\",\n                uint48(d),\n                \".\"\n            )\n        );\n    }\n\n    /**\n     * @notice          Load up to 32 bytes from the view onto the stack.\n     * @dev             Returns a bytes32 with only the `bytes_` highest bytes set.\n     *                  This can be immediately cast to a smaller fixed-length byte array.\n     *                  To automatically cast to an integer, use `indexUint`.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The 32 byte result\n     */\n    function index(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (bytes32 result) {\n        if (bytes_ == 0) {\n            return bytes32(0);\n        }\n        if (index_ + bytes_ \u003e len(view_)) {\n            revert(indexErrOverrun(loc(view_), len(view_), index_, uint256(bytes_)));\n        }\n        require(bytes_ \u003c= 32, \"Index: more than 32 bytes\");\n\n        uint8 bitLength;\n        unchecked {\n            bitLength = bytes_ * 8;\n        }\n        uint256 loc_ = loc(view_);\n        // Get a mask with `bitLength` highest bits set\n        uint256 mask = leftMask(bitLength);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // Load a full word using index offset, and apply mask to ignore non-relevant bytes\n            result := and(mload(add(loc_, index_)), mask)\n        }\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from the view at `index`.\n     * @dev             Requires that the view have \u003e= `bytes_` bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        // `index()` returns left-aligned `bytes_`, while integers are right-aligned\n        // Shifting here to right-align with the full 32 bytes word\n        return uint256(index(view_, index_, bytes_)) \u003e\u003e ((32 - bytes_) * 8);\n    }\n\n    /**\n     * @notice          Parse an unsigned integer from LE bytes.\n     * @param view_     The view\n     * @param index_    The index\n     * @param bytes_    The bytes\n     * @return          result - The unsigned integer\n     */\n    function indexLEUint(bytes29 view_, uint256 index_, uint8 bytes_) internal pure returns (uint256 result) {\n        return reverseUint256(uint256(index(view_, index_, bytes_)));\n    }\n\n    /**\n     * @notice          Parse an address from the view at `index`.\n     *                  Requires that the view have \u003e= 20 bytes following that index.\n     * @param view_     The view\n     * @param index_    The index\n     * @return          address - The address\n     */\n    function indexAddress(bytes29 view_, uint256 index_) internal pure returns (address) {\n        // index 20 bytes as `uint160`, and then cast to `address`\n        return address(uint160(indexUint(view_, index_, 20)));\n    }\n\n    /**\n     * @notice          Return the keccak256 hash of the underlying memory\n     * @param view_     The view\n     * @return          digest - The keccak256 hash of the underlying memory\n     */\n    function keccak(bytes29 view_) internal pure returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            digest := keccak256(loc_, len_)\n        }\n    }\n\n    /**\n     * @notice          Return the sha2 digest of the underlying memory.\n     * @dev             We explicitly deallocate memory afterwards.\n     * @param view_     The view\n     * @return          digest - The sha2 hash of the underlying memory\n     */\n    function sha2(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            digest := mload(ptr)\n        }\n        require(res, \"sha2: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\n     * @param view_     The pre-image\n     * @return          digest - the Digest\n     */\n    function hash160(bytes29 view_) internal view returns (bytes20 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            // rmd160 precompile is 0x03\n            res := and(res, staticcall(gas(), 0x03, ptr, 0x20, ptr, 0x20))\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\n        }\n        require(res, \"hash160: out of gas\");\n    }\n\n    /**\n     * @notice          Implements bitcoin's hash256 (double sha2)\n     * @param view_     A view of the preimage\n     * @return          digest - the Digest\n     */\n    function hash256(bytes29 view_) internal view returns (bytes32 digest) {\n        uint256 loc_ = loc(view_);\n        uint256 len_ = len(view_);\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // sha2 precompile is 0x02\n            res := staticcall(gas(), 0x02, loc_, len_, ptr, 0x20)\n            res := and(res, staticcall(gas(), 0x02, ptr, 0x20, ptr, 0x20))\n            digest := mload(ptr)\n        }\n        require(res, \"hash256: out of gas\");\n    }\n\n    /**\n     * @notice          Return true if the underlying memory is equal. Else false.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the underlying memory is equal\n     */\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return (loc(left) == loc(right) \u0026\u0026 len(left) == len(right)) || keccak(left) == keccak(right);\n    }\n\n    /**\n     * @notice          Return false if the underlying memory is equal. Else true.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - False if the underlying memory is equal\n     */\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !untypedEqual(left, right);\n    }\n\n    /**\n     * @notice          Compares type equality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are the same\n     */\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return left == right || (typeOf(left) == typeOf(right) \u0026\u0026 keccak(left) == keccak(right));\n    }\n\n    /**\n     * @notice          Compares type inequality.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param left      The first view\n     * @param right     The second view\n     * @return          bool - True if the types are not the same\n     */\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\n        return !equal(left, right);\n    }\n\n    /**\n     * @notice          Copy the view to a location, return an unsafe memory reference\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param view_     The view\n     * @param newLoc    The new location\n     * @return          written - the unsafe memory reference\n     */\n    function unsafeCopyTo(bytes29 view_, uint256 newLoc) private view returns (bytes29 written) {\n        require(notNull(view_), \"copyTo: Null pointer deref\");\n        require(isValid(view_), \"copyTo: Invalid pointer deref\");\n        uint256 len_ = len(view_);\n        uint256 oldLoc = loc(view_);\n\n        uint256 ptr;\n        bool res;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, newLoc) { revert(0x60, 0x20) } // empty revert message\n\n            // use the identity precompile (0x04) to copy\n            res := staticcall(gas(), 0x04, oldLoc, len_, newLoc, len_)\n        }\n        require(res, \"identity: out of gas\");\n\n        written = unsafeBuildUnchecked(typeOf(view_), newLoc, len_);\n    }\n\n    /**\n     * @notice          Copies the referenced memory to a new loc in memory,\n     *                  returning a `bytes` pointing to the new memory.\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\n     * @param view_     The view\n     * @return          ret - The view pointing to the new memory\n     */\n    function clone(bytes29 view_) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        uint256 len_ = len(view_);\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n            ret := ptr\n        }\n        unchecked {\n            unsafeCopyTo(view_, ptr + 0x20);\n        }\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            mstore(0x40, add(add(ptr, len_), 0x20)) // write new unused pointer\n            mstore(ptr, len_) // write len of new array (in bytes)\n        }\n    }\n\n    /**\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\n     * @dev             Super Dangerous direct memory access.\n     *\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\n     *                  As such it MUST be consumed IMMEDIATELY.\n     *                  This function is private to prevent unsafe usage by callers.\n     * @param memViews  The views\n     * @return          unsafeView - The conjoined view pointing to the new memory\n     */\n    function unsafeJoin(bytes29[] memory memViews, uint256 location) private view returns (bytes29 unsafeView) {\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            let ptr := mload(0x40)\n            // revert if we're writing in occupied memory\n            if gt(ptr, location) { revert(0x60, 0x20) } // empty revert message\n        }\n\n        uint256 offset = 0;\n        for (uint256 i = 0; i \u003c memViews.length; i++) {\n            bytes29 view_ = memViews[i];\n            unchecked {\n                unsafeCopyTo(view_, location + offset);\n                offset += len(view_);\n            }\n        }\n        unsafeView = unsafeBuildUnchecked(0, location, offset);\n    }\n\n    /**\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The keccak256 digest\n     */\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return keccak(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\n     * @param memViews  The views\n     * @return          bytes32 - The sha256 digest\n     */\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n        return sha2(unsafeJoin(memViews, ptr));\n    }\n\n    /**\n     * @notice          copies all views, joins them into a new bytearray.\n     * @param memViews  The views\n     * @return          ret - The new byte array\n     */\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\n        uint256 ptr;\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            ptr := mload(0x40) // load unused memory pointer\n        }\n\n        bytes29 newView;\n        unchecked {\n            newView = unsafeJoin(memViews, ptr + 0x20);\n        }\n        uint256 written = len(newView);\n        uint256 footprint_ = footprint(newView);\n\n        assembly {\n            // solhint-disable-previous-line no-inline-assembly\n            // store the length\n            mstore(ptr, written)\n            // new pointer is old + 0x20 + the footprint of the body\n            mstore(0x40, add(add(ptr, footprint_), 0x20))\n            ret := ptr\n        }\n    }\n}\n\n/// @dev CallData is a memory view over the payload to be used for an external call, i.e.\n/// recipient.call(callData). Its length is always (4 + 32 * N) bytes:\n/// - First 4 bytes represent the function selector.\n/// - 32 * N bytes represent N words that function arguments occupy.\ntype CallData is bytes29;\n\n/// @dev Attach library functions to CallData\nusing ByteString for CallData global;\n\n/// @dev Signature is a memory view over a \"65 bytes\" array representing a ECDSA signature.\ntype Signature is bytes29;\n\n/// @dev Attach library functions to Signature\nusing ByteString for Signature global;\n\nlibrary ByteString {\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev non-compact ECDSA signatures are enforced as of OZ 4.7.3\n     *\n     *      Signature payload memory layout\n     * [000 .. 032) r   bytes32 32 bytes\n     * [032 .. 064) s   bytes32 32 bytes\n     * [064 .. 065) v   uint8    1 byte\n     */\n    uint256 internal constant SIGNATURE_LENGTH = 65;\n    uint256 internal constant OFFSET_R = 0;\n    uint256 internal constant OFFSET_S = 32;\n    uint256 internal constant OFFSET_V = 64;\n\n    /**\n     * @dev Calldata memory layout\n     * [000 .. 004) selector    bytes4  4 bytes\n     *      Optional: N function arguments\n     * [004 .. 036) arg1        bytes32 32 bytes\n     *      ..\n     * [AAA .. END) argN        bytes32 32 bytes\n     */\n    uint256 internal constant SELECTOR_LENGTH = 4;\n    uint256 internal constant OFFSET_SELECTOR = 0;\n    uint256 internal constant OFFSET_ARGUMENTS = SELECTOR_LENGTH;\n\n    /**\n     * @notice Returns a memory view over the given payload, treating it as raw bytes.\n     * @dev Shortcut for .ref(0) - to be deprecated once \"uint40 type\" is removed from bytes29.\n     */\n    function castToRawBytes(bytes memory payload) internal pure returns (bytes29) {\n        return payload.ref({newType: 0});\n    }\n\n    // ═════════════════════════════════════════════════ SIGNATURE ═════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the signature payload from the given values.\n     * @dev Using ByteString.formatSignature({r: r, s: s, v: v}) will make sure\n     * that params are given in the right order.\n     */\n    function formatSignature(bytes32 r, bytes32 s, uint8 v) internal pure returns (bytes memory) {\n        return abi.encodePacked(r, s, v);\n    }\n\n    /**\n     * @notice Returns a Signature view over for the given payload.\n     * @dev Will revert if the payload is not a signature.\n     */\n    function castToSignature(bytes memory payload) internal pure returns (Signature) {\n        return castToSignature(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a Signature view.\n     * @dev Will revert if the memory view is not over a signature.\n     */\n    function castToSignature(bytes29 view_) internal pure returns (Signature) {\n        require(isSignature(view_), \"Not a signature\");\n        return Signature.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a signature\n     */\n    function isSignature(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == SIGNATURE_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Signature signature) internal pure returns (bytes29) {\n        return Signature.unwrap(signature);\n    }\n\n    // ═════════════════════════════════════════════ SIGNATURE SLICING ═════════════════════════════════════════════════\n\n    /// @notice Unpacks signature payload into (r, s, v) parameters.\n    /// @dev Make sure to verify signature length with isSignature() beforehand.\n    function toRSV(Signature signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(signature);\n        r = view_.index({index_: OFFSET_R, bytes_: 32});\n        s = view_.index({index_: OFFSET_S, bytes_: 32});\n        v = uint8(view_.indexUint({index_: OFFSET_V, bytes_: 1}));\n    }\n\n    // ═════════════════════════════════════════════════ CALLDATA ══════════════════════════════════════════════════════\n\n    /**\n     * @notice Constructs the calldata with the modified arguments:\n     * the existing arguments are prepended with the arguments from the prefix.\n     * @dev Given:\n     *  - `calldata = abi.encodeWithSelector(foo.selector, d, e);`\n     *  - `prefix = abi.encode(a, b, c);`\n     *  - `a`, `b`, `c` are arguments of static type (i.e. not dynamically sized ones)\n     *      Then:\n     *  - Function will return abi.encodeWithSelector(foo.selector, a, c, c, d, e)\n     *  - Returned calldata will trigger `foo(a, b, c, d, e)` when used for a contract call.\n     * Note: for clarification as to what types are considered static, see\n     * https://docs.soliditylang.org/en/latest/abi-spec.html#formal-specification-of-the-encoding\n     * @param callData  Calldata that needs to be modified\n     * @param prefix    ABI-encoded arguments to use as the first arguments in the new calldata\n     * @return Modified calldata having prefix as the first arguments.\n     */\n    function addPrefix(CallData callData, bytes memory prefix) internal view returns (bytes memory) {\n        // Prefix should occupy a whole amount of words in memory\n        require(_fullWords(prefix.length), \"Incorrect prefix\");\n        bytes29[] memory views = new bytes29[](3);\n        // Use payload's function selector\n        views[0] = callData.callSelector();\n        // Use prefix as the first arguments\n        views[1] = castToRawBytes(prefix);\n        // Use payload's remaining arguments\n        views[2] = callData.arguments();\n        return TypedMemView.join(views);\n    }\n\n    /**\n     * @notice Returns a CallData view over for the given payload.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes memory payload) internal pure returns (CallData) {\n        return castToCallData(castToRawBytes(payload));\n    }\n\n    /**\n     * @notice Casts a memory view to a CallData view.\n     * @dev Will revert if the memory view is not over a calldata.\n     */\n    function castToCallData(bytes29 view_) internal pure returns (CallData) {\n        require(isCallData(view_), \"Not a calldata\");\n        return CallData.wrap(view_);\n    }\n\n    /**\n     * @notice Checks that a byte string is a valid calldata, i.e.\n     * a function selector, followed by arbitrary amount of arguments.\n     */\n    function isCallData(bytes29 view_) internal pure returns (bool) {\n        uint256 length = view_.len();\n        // Calldata should at least have a function selector\n        if (length \u003c SELECTOR_LENGTH) return false;\n        // The remainder of the calldata should be exactly N memory words (N \u003e= 0)\n        return _fullWords(length - SELECTOR_LENGTH);\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(CallData callData) internal pure returns (bytes29) {\n        return CallData.unwrap(callData);\n    }\n\n    // ═════════════════════════════════════════════ CALLDATA SLICING ══════════════════════════════════════════════════\n\n    /**\n     * @notice Returns amount of memory words (32 byte chunks) the function arguments\n     * occupy in the calldata.\n     * @dev This might differ from amount of arguments supplied, if any of the arguments\n     * occupies more than one memory slot. It is true, however, that argument part of the payload\n     * occupies exactly N words, even for dynamic types like `bytes`\n     */\n    function argumentWords(CallData callData) internal pure returns (uint256) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        // Equivalent of (length - SELECTOR_LENGTH) / 32\n        return (view_.len() - SELECTOR_LENGTH) \u003e\u003e 5;\n    }\n\n    /// @notice Returns selector for the provided calldata.\n    function callSelector(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.slice({index_: OFFSET_SELECTOR, len_: SELECTOR_LENGTH, newType: 0});\n    }\n\n    /// @notice Returns abi encoded arguments for the provided calldata.\n    function arguments(CallData callData) internal pure returns (bytes29) {\n        // Get the underlying memory view\n        bytes29 view_ = unwrap(callData);\n        return view_.sliceFrom({index_: OFFSET_ARGUMENTS, newType: 0});\n    }\n\n    // ══════════════════════════════════════════════ PRIVATE HELPERS ══════════════════════════════════════════════════\n\n    /// @dev Checks if length is full amount of memory words (32 bytes).\n    function _fullWords(uint256 length) internal pure returns (bool) {\n        // The equivalent of length % 32 == 0\n        return length \u0026 31 == 0;\n    }\n}\n\n// Here we define common constants to enable their easier reusing later.\n\n// ══════════════════════════════════ MERKLE ═══════════════════════════════════\n/// @dev Height of the Agent Merkle Tree\nuint256 constant AGENT_TREE_HEIGHT = 32;\n/// @dev Height of the Origin Merkle Tree\nuint256 constant ORIGIN_TREE_HEIGHT = 32;\n/// @dev Height of the Snapshot Merkle Tree. Allows up to 64 leafs, e.g. up to 32 states\nuint256 constant SNAPSHOT_TREE_HEIGHT = 6;\n// ══════════════════════════════════ STRUCTS ══════════════════════════════════\n/// @dev See Attestation.sol: (bytes32,bytes32, uint32,uint40,uint40): 32+4+5+5\nuint256 constant ATTESTATION_LENGTH = 78;\n/// @dev See State.sol: (bytes32,uint32,uint32,uint40,uint40): 32+4+4+5+5\nuint256 constant STATE_LENGTH = 50;\n/// @dev Maximum amount of states in a single snapshot. Each state produces two leafs in the tree\nuint256 constant SNAPSHOT_MAX_STATES = 1 \u003c\u003c (SNAPSHOT_TREE_HEIGHT - 1);\n// ══════════════════════════════════ MESSAGE ══════════════════════════════════\n/// @dev See Header.sol: (uint32,uint32,uint32,uint32): 4+4+4+4\nuint256 constant HEADER_LENGTH = 16;\n/// @dev See Request.sol: (uint64): 8\nuint256 constant REQUEST_LENGTH = 8;\n/// @dev See Tips.sol: (uint96,uint96,uint96,uint96): 12+12+12+12\nuint256 constant TIPS_LENGTH = 48;\n// ══════════════════════════════ STATEMENT SALTS ══════════════════════════════\n/// @dev Salts for signing various statements\nbytes32 constant ATTESTATION_SALT = keccak256(\"ATTESTATION_SALT\");\nbytes32 constant ATTESTATION_REPORT_SALT = keccak256(\"ATTESTATION_REPORT_SALT\");\nbytes32 constant SNAPSHOT_SALT = keccak256(\"SNAPSHOT_SALT\");\nbytes32 constant STATE_REPORT_SALT = keccak256(\"STATE_REPORT_SALT\");\n// ════════════════════════════════ DESTINATION ════════════════════════════════\nuint256 constant AGENT_ROOT_OPTIMISTIC_PERIOD = 1 days;\n// ══════════════════════════════════ ORIGIN ═══════════════════════════════════\n/// @dev Maximum bytes per message = 2 KiB (somewhat arbitrarily set to begin)\nuint256 constant MAX_CONTENT_BYTES = 2 * 2 ** 10;\n// ═══════════════════════════════ SYSTEM ROUTER ═══════════════════════════════\n/// @dev Custom address used for sending and receiving system messages.\n/// - Origin will dispatch messages from SystemRouter as if they were \"sent by this sender\".\n/// - Destination will reroute messages \"sent to this recipient\" to SystemRouter.\n/// - As a result: only SystemRouter messages will have this value as both sender and recipient.\n/// Note: all bits except for lower 20 bytes are set to 1.\n/// Note: TypeCasts.bytes32ToAddress(SYSTEM_ROUTER) == address(0)\nbytes32 constant SYSTEM_ROUTER = bytes32(type(uint256).max \u003c\u003c 160);\n\n/// @dev Attestation is a memory view over a formatted attestation payload.\ntype Attestation is bytes29;\n/// @dev Attach library functions to Attestation\n\nusing {\n    AttestationLib.unwrap,\n    AttestationLib.equalToSummit,\n    AttestationLib.toExecutionAttestation,\n    AttestationLib.hash,\n    AttestationLib.snapRoot,\n    AttestationLib.agentRoot,\n    AttestationLib.nonce,\n    AttestationLib.blockNumber,\n    AttestationLib.timestamp\n} for Attestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the Summit contract.\nstruct SummitAttestation {\n    bytes32 snapRoot;\n    bytes32 agentRoot;\n    uint40 blockNumber;\n    uint40 timestamp;\n}\n/// @dev Attach library functions to SummitAttestation\n\nusing {AttestationLib.formatSummitAttestation} for SummitAttestation global;\n\n/// @dev Struct representing Attestation, as it is stored in the ExecutionHub contract.\n/// mapping (bytes32 root =\u003e ExecutionAttestation) is supposed to be used\nstruct ExecutionAttestation {\n    address notary;\n    uint32 nonce;\n    uint40 submittedAt;\n}\n// 24 bits left for tight packing\n/// @dev Attach library functions to ExecutionAttestation\n\nusing {AttestationLib.isEmpty} for ExecutionAttestation global;\n\nlibrary AttestationLib {\n    using ByteString for bytes;\n    using TypedMemView for bytes29;\n\n    /**\n     * @dev Attestation structure represents the \"Snapshot Merkle Tree\" created from\n     * every Notary snapshot accepted by the Summit contract. Attestation includes\n     * the root of the \"Snapshot Merkle Tree\", as well as additional metadata.\n     *\n     * Steps for creation of \"Snapshot Merkle Tree\":\n     * 1. The list of hashes is composed for states in the Notary snapshot.\n     * 2. The list is padded with zero values until its length is 2**SNAPSHOT_TREE_HEIGHT.\n     * 3. Values from the list are used as leafs and the merkle tree is constructed.\n     *\n     * Similar to Origin, every derived Notary's \"Snapshot Merkle Root\" is saved in Summit contract.\n     * The main difference is that Origin contract itself is keeping track of an incremental merkle tree,\n     * by inserting the hash of the sent message and calculating the new \"Origin Merkle Root\".\n     * While Summit relies on Guards and Notaries to provide snapshot data, which is used to calculate the\n     * \"Snapshot Merkle Root\".\n     *\n     * Origin's State is \"state of Origin Merkle Tree after N-th message was sent\".\n     * Summit's Attestation is \"data for the N-th accepted Notary Snapshot\".\n     *\n     * Attestation is considered \"valid\" in Summit contract, if it matches the N-th (nonce)\n     * snapshot submitted by Notaries.\n     * Attestation is considered \"valid\" in Origin contract, if its underlying Snapshot is \"valid\".\n     *\n     * This means that a snapshot could be \"valid\" in Summit contract and \"invalid\" in Origin, if the underlying\n     * snapshot is invalid (i.e. one of the states in the list is invalid).\n     * The opposite could also be true. If a perfectly valid snapshot was never submitted to Summit, its attestation\n     * would be valid in Origin, but invalid in Summit (it was never accepted, so the metadata would be incorrect).\n     *\n     * Attestation is considered \"globally valid\", if it is valid in the Summit and all the Origin contracts.\n     *\n     * @dev Memory layout of Attestation fields\n     * [000 .. 032): snapRoot       bytes32 32 bytes    Root for \"Snapshot Merkle Tree\" created from a Notary snapshot\n     * [032 .. 064): agentRoot      bytes32 32 bytes    Root for \"Agent Merkle Tree\" tracked by BondingManager\n     * [064 .. 068): nonce          uint32   4 bytes    Total amount of all accepted Notary snapshots\n     * [068 .. 073): blockNumber    uint40   5 bytes    Block when this Notary snapshot was accepted in Summit\n     * [073 .. 078): timestamp      uint40   5 bytes    Time when this Notary snapshot was accepted in Summit\n     *\n     * The variables below are not supposed to be used outside of the library directly.\n     */\n\n    uint256 private constant OFFSET_SNAP_ROOT = 0;\n    uint256 private constant OFFSET_AGENT_ROOT = 32;\n    uint256 private constant OFFSET_NONCE = 64;\n    uint256 private constant OFFSET_BLOCK_NUMBER = 68;\n    uint256 private constant OFFSET_TIMESTAMP = 73;\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                             ATTESTATION                              ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param snapRoot_     Snapshot merkle tree's root\n     * @param agentRoot_    Agent merkle tree's root\n     * @param nonce_        Attestation Nonce\n     * @param blockNumber_  Block number when attestation was created in Summit\n     * @param timestamp_    Block timestamp when attestation was created in Summit\n     * @return Formatted attestation\n     */\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) internal pure returns (bytes memory) {\n        return abi.encodePacked(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    /**\n     * @notice Returns an Attestation view over the given payload.\n     * @dev Will revert if the payload is not an attestation.\n     */\n    function castToAttestation(bytes memory payload) internal pure returns (Attestation) {\n        return castToAttestation(payload.castToRawBytes());\n    }\n\n    /**\n     * @notice Casts a memory view to an Attestation view.\n     * @dev Will revert if the memory view is not over an attestation.\n     */\n    function castToAttestation(bytes29 view_) internal pure returns (Attestation) {\n        require(isAttestation(view_), \"Not an attestation\");\n        return Attestation.wrap(view_);\n    }\n\n    /// @notice Checks that a payload is a formatted Attestation.\n    function isAttestation(bytes29 view_) internal pure returns (bool) {\n        return view_.len() == ATTESTATION_LENGTH;\n    }\n\n    /// @notice Convenience shortcut for unwrapping a view.\n    function unwrap(Attestation att) internal pure returns (bytes29) {\n        return Attestation.unwrap(att);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /**\n     * @notice Returns a formatted Attestation payload with provided fields.\n     * @param summitAtt     Attestation struct as it stored in Summit contract\n     * @param nonce_        Attestation nonce\n     * @return Formatted attestation\n     */\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        internal\n        pure\n        returns (bytes memory)\n    {\n        return formatAttestation({\n            snapRoot_: summitAtt.snapRoot,\n            agentRoot_: summitAtt.agentRoot,\n            nonce_: nonce_,\n            blockNumber_: summitAtt.blockNumber,\n            timestamp_: summitAtt.timestamp\n        });\n    }\n\n    /// @notice Returns an empty struct to save in Summit contract upon initialization.\n    // solhint-disable-next-line ordering\n    function emptySummitAttestation() internal view returns (SummitAttestation memory) {\n        return summitAttestation(bytes32(0), bytes32(0));\n    }\n\n    /// @notice Returns a struct to save in the Summit contract for the given root and height.\n    function summitAttestation(bytes32 snapRoot_, bytes32 agentRoot_)\n        internal\n        view\n        returns (SummitAttestation memory summitAtt)\n    {\n        summitAtt.snapRoot = snapRoot_;\n        summitAtt.agentRoot = agentRoot_;\n        summitAtt.blockNumber = uint40(block.number);\n        summitAtt.timestamp = uint40(block.timestamp);\n    }\n\n    /// @notice Checks that an Attestation and its Summit representation are equal.\n    function equalToSummit(Attestation att, SummitAttestation memory summitAtt) internal pure returns (bool) {\n        return att.snapRoot() == summitAtt.snapRoot \u0026\u0026 att.agentRoot() == summitAtt.agentRoot\n            \u0026\u0026 att.blockNumber() == summitAtt.blockNumber \u0026\u0026 att.timestamp() == summitAtt.timestamp;\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(Attestation att, address notary)\n        internal\n        view\n        returns (ExecutionAttestation memory attestation)\n    {\n        attestation.notary = notary;\n        attestation.nonce = att.nonce();\n        // We need to store the timestamp when attestation was submitted to Destination\n        attestation.submittedAt = uint40(block.timestamp);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) internal pure returns (bool) {\n        return execAtt.notary == address(0);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION HASHING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns the hash of an Attestation, that could be later signed by a Notary.\n    function hash(Attestation att) internal pure returns (bytes32) {\n        // Get the underlying memory view\n        bytes29 view_ = att.unwrap();\n        // The final hash to sign is keccak(attestationSalt, keccak(attestation))\n        return keccak256(bytes.concat(ATTESTATION_SALT, view_.keccak()));\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                         ATTESTATION SLICING                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    /// @notice Returns root of the Snapshot merkle tree created in the Summit contract.\n    function snapRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_SNAP_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns root of the Agent merkle tree tracked by BondingManager.\n    function agentRoot(Attestation att) internal pure returns (bytes32) {\n        bytes29 view_ = att.unwrap();\n        return view_.index({index_: OFFSET_AGENT_ROOT, bytes_: 32});\n    }\n\n    /// @notice Returns nonce of Summit contract at the time, when attestation was created.\n    function nonce(Attestation att) internal pure returns (uint32) {\n        bytes29 view_ = att.unwrap();\n        return uint32(view_.indexUint({index_: OFFSET_NONCE, bytes_: 4}));\n    }\n\n    /// @notice Returns a block number when attestation was created in Summit.\n    function blockNumber(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_BLOCK_NUMBER, bytes_: 5}));\n    }\n\n    /// @notice Returns a block timestamp when attestation was created in Summit.\n    /// @dev This is the timestamp according to the Synapse Chain.\n    function timestamp(Attestation att) internal pure returns (uint40) {\n        bytes29 view_ = att.unwrap();\n        return uint40(view_.indexUint({index_: OFFSET_TIMESTAMP, bytes_: 5}));\n    }\n}\n\n// solhint-disable ordering\n/// @notice Exposes Attestation methods for testing against golang.\ncontract AttestationHarness {\n    using AttestationLib for bytes;\n    using AttestationLib for bytes29;\n    using TypedMemView for bytes;\n    using TypedMemView for bytes29;\n\n    // Note: we don't add an empty test() function here, as it currently leads\n    // to zero coverage on the corresponding library.\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                               GETTERS                                ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function castToAttestation(bytes memory payload) public view returns (bytes memory) {\n        // Walkaround to get the forge coverage working on libraries, see\n        // https://github.com/foundry-rs/foundry/pull/3128#issuecomment-1241245086\n        Attestation attestation = AttestationLib.castToAttestation(payload);\n        return attestation.unwrap().clone();\n    }\n\n    function snapRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().snapRoot();\n    }\n\n    function agentRoot(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().agentRoot();\n    }\n\n    function nonce(bytes memory payload) public pure returns (uint32) {\n        return payload.castToAttestation().nonce();\n    }\n\n    function blockNumber(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().blockNumber();\n    }\n\n    function timestamp(bytes memory payload) public pure returns (uint40) {\n        return payload.castToAttestation().timestamp();\n    }\n\n    function hash(bytes memory payload) public pure returns (bytes32) {\n        return payload.castToAttestation().hash();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                       DESTINATION ATTESTATION                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function toExecutionAttestation(bytes memory payload, address notary)\n        public\n        view\n        returns (ExecutionAttestation memory)\n    {\n        return payload.castToAttestation().toExecutionAttestation(notary);\n    }\n\n    function isEmpty(ExecutionAttestation memory execAtt) public pure returns (bool) {\n        return execAtt.isEmpty();\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                          SUMMIT ATTESTATION                          ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatSummitAttestation(SummitAttestation memory summitAtt, uint32 nonce_)\n        public\n        pure\n        returns (bytes memory)\n    {\n        return summitAtt.formatSummitAttestation(nonce_);\n    }\n\n    /*╔══════════════════════════════════════════════════════════════════════╗*\\\n    ▏*║                        ATTESTATION FORMATTERS                        ║*▕\n    \\*╚══════════════════════════════════════════════════════════════════════╝*/\n\n    function formatAttestation(\n        bytes32 snapRoot_,\n        bytes32 agentRoot_,\n        uint32 nonce_,\n        uint40 blockNumber_,\n        uint40 timestamp_\n    ) public pure returns (bytes memory) {\n        return AttestationLib.formatAttestation(snapRoot_, agentRoot_, nonce_, blockNumber_, timestamp_);\n    }\n\n    function isAttestation(bytes memory payload) public pure returns (bool) {\n        return payload.ref(0).isAttestation();\n    }\n}\n","language":"Solidity","languageVersion":"0.8.17","compilerVersion":"0.8.17","compilerOptions":"--combined-json bin,bin-runtime,srcmap,srcmap-runtime,abi,userdoc,devdoc,metadata,hashes --optimize --optimize-runs 10000 --allow-paths ., ./, ../","srcMap":"58:34812:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:34812:0;;;;;;;;;;;;;;;;;","srcMapRuntime":"58:34812:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3143:38;;3179:2;3143:38;;;;;168:25:1;;;156:2;141:18;3143:38:0;;;;;;;;3400:46;;3310:2;3400:46;;3537:57;;;:::i;3458:56::-;;;:::i;3660:59::-;;3703:16;3660:59;;3230:37;;3265:2;3230:37;;2572:94;;;;;;;;388:66:1;376:79;;;358:98;;346:2;331:18;2572:94:0;204:258:1;3537:57:0;3222:2;3494:20;3222:2;3310;3494:20;:::i;:::-;3574;;;;:::i;:::-;3537:57;:::o;3458:56::-;3494:20;3265:2;3310;467:279:1;532:9;;;553:10;;;550:190;;;596:77;593:1;586:88;697:4;694:1;687:15;725:4;722:1;715:15;550:190;467:279;;;;:::o","abiDefinition":[{"inputs":[],"name":"BITS_EMPTY","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"BITS_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"LOW_96_BITS_MASK","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"NULL","outputs":[{"internalType":"bytes29","name":"","type":"bytes29"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LEN","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_LOC","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SHIFT_TYPE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"}],"userDoc":{"kind":"user","methods":{},"version":1},"developerDoc":{"kind":"dev","methods":{},"stateVariables":{"BITS_TYPE":{"details":"Memory layout for bytes29 TODO (Chi): with the user defined types storing type is no longer necessary. Update the library, transforming bytes29 to bytes24 in the process. [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used"}},"version":1},"metadata":"{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"BITS_EMPTY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BITS_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LOW_96_BITS_MASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NULL\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LEN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_LOC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SHIFT_TYPE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"BITS_TYPE\":{\"details\":\"Memory layout for bytes29 TODO (Chi): with the user defined types storing type is no longer necessary. Update the library, transforming bytes29 to bytes24 in the process. [000..005)   type     5 bytes    Type flag for the pointer [005..017)   loc     12 bytes    Memory address of underlying bytes [017..029)   len     12 bytes    Length of underlying bytes [029..032)   empty    3 bytes    Not used\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"solidity/AttestationHarness.t.sol\":\"TypedMemView\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"solidity/AttestationHarness.t.sol\":{\"keccak256\":\"0xceea00bc4b22e9c57ff435207275b5df8459b24babf47fbbdaded6655da50dca\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2429ebc2665bfada4ddb0aa4a256d9e089f3ead1853ac0787dad774e01a9d892\",\"dweb:/ipfs/QmTfu2PKWxQTAutNK95ctbA6P7USKCrYrRnUhLsKnkzcV8\"]}},\"version\":1}"},"hashes":{"BITS_EMPTY()":"97b8ad4a","BITS_LEN()":"eb740628","BITS_LOC()":"fb734584","BITS_TYPE()":"10153fce","LOW_96_BITS_MASK()":"b602d173","NULL()":"f26be3fc","SHIFT_LEN()":"1136e7ea","SHIFT_LOC()":"1bfe17ce","SHIFT_TYPE()":"13090c5a"}}}
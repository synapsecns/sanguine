// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	gin "github.com/gin-gonic/gin"
	gorm "gorm.io/gorm"

	http "net/http"

	logger "github.com/synapsecns/sanguine/core/metrics/logger"

	metric "go.opentelemetry.io/otel/metric"

	metrics "github.com/synapsecns/sanguine/core/metrics"

	mock "github.com/stretchr/testify/mock"

	otelhttp "go.opentelemetry.io/contrib/instrumentation/net/http/otelhttp"

	propagation "go.opentelemetry.io/otel/propagation"

	trace "go.opentelemetry.io/otel/trace"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// AddGormCallbacks provides a mock function with given fields: db
func (_m *Handler) AddGormCallbacks(db *gorm.DB) {
	_m.Called(db)
}

// ConfigureHTTPClient provides a mock function with given fields: client, opts
func (_m *Handler) ConfigureHTTPClient(client *http.Client, opts ...otelhttp.Option) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, client)
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ExperimentalLogger provides a mock function with given fields:
func (_m *Handler) ExperimentalLogger() logger.ExperimentalLogger {
	ret := _m.Called()

	var r0 logger.ExperimentalLogger
	if rf, ok := ret.Get(0).(func() logger.ExperimentalLogger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(logger.ExperimentalLogger)
		}
	}

	return r0
}

// GetTracerProvider provides a mock function with given fields:
func (_m *Handler) GetTracerProvider() trace.TracerProvider {
	ret := _m.Called()

	var r0 trace.TracerProvider
	if rf, ok := ret.Get(0).(func() trace.TracerProvider); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.TracerProvider)
		}
	}

	return r0
}

// Gin provides a mock function with given fields:
func (_m *Handler) Gin() gin.HandlerFunc {
	ret := _m.Called()

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func() gin.HandlerFunc); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// Handler provides a mock function with given fields:
func (_m *Handler) Handler() http.Handler {
	ret := _m.Called()

	var r0 http.Handler
	if rf, ok := ret.Get(0).(func() http.Handler); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http.Handler)
		}
	}

	return r0
}

// Meter provides a mock function with given fields: name, options
func (_m *Handler) Meter(name string, options ...metric.MeterOption) metric.Meter {
	_va := make([]interface{}, len(options))
	for _i := range options {
		_va[_i] = options[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, name)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 metric.Meter
	if rf, ok := ret.Get(0).(func(string, ...metric.MeterOption) metric.Meter); ok {
		r0 = rf(name, options...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metric.Meter)
		}
	}

	return r0
}

// Metrics provides a mock function with given fields:
func (_m *Handler) Metrics() metrics.Meter {
	ret := _m.Called()

	var r0 metrics.Meter
	if rf, ok := ret.Get(0).(func() metrics.Meter); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(metrics.Meter)
		}
	}

	return r0
}

// Propagator provides a mock function with given fields:
func (_m *Handler) Propagator() propagation.TextMapPropagator {
	ret := _m.Called()

	var r0 propagation.TextMapPropagator
	if rf, ok := ret.Get(0).(func() propagation.TextMapPropagator); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(propagation.TextMapPropagator)
		}
	}

	return r0
}

// Start provides a mock function with given fields: ctx
func (_m *Handler) Start(ctx context.Context) error {
	ret := _m.Called(ctx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Tracer provides a mock function with given fields:
func (_m *Handler) Tracer() trace.Tracer {
	ret := _m.Called()

	var r0 trace.Tracer
	if rf, ok := ret.Get(0).(func() trace.Tracer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(trace.Tracer)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *Handler) Type() metrics.HandlerType {
	ret := _m.Called()

	var r0 metrics.HandlerType
	if rf, ok := ret.Get(0).(func() metrics.HandlerType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(metrics.HandlerType)
	}

	return r0
}

type mockConstructorTestingTNewHandler interface {
	mock.TestingT
	Cleanup(func())
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHandler(t mockConstructorTestingTNewHandler) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

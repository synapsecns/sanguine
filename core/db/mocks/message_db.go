// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	common "github.com/ethereum/go-ethereum/common"

	mock "github.com/stretchr/testify/mock"

	types "github.com/synapsecns/sanguine/core/types"
)

// MessageDB is an autogenerated mock type for the MessageDB type
type MessageDB struct {
	mock.Mock
}

// GetIndexedHeight provides a mock function with given fields: domain
func (_m *MessageDB) GetIndexedHeight(domain string) (uint32, error) {
	ret := _m.Called(domain)

	var r0 uint32
	if rf, ok := ret.Get(0).(func(string) uint32); ok {
		r0 = rf(domain)
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageLatestBlockEnd provides a mock function with given fields:
func (_m *MessageDB) GetMessageLatestBlockEnd() (uint32, error) {
	ret := _m.Called()

	var r0 uint32
	if rf, ok := ret.Get(0).(func() uint32); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(uint32)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageByLeaf provides a mock function with given fields: leaf
func (_m *MessageDB) MessageByLeaf(leaf common.Hash) (types.CommittedMessage, error) {
	ret := _m.Called(leaf)

	var r0 types.CommittedMessage
	if rf, ok := ret.Get(0).(func(common.Hash) types.CommittedMessage); ok {
		r0 = rf(leaf)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CommittedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(leaf)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageByLeafIndex provides a mock function with given fields: leafIndex
func (_m *MessageDB) MessageByLeafIndex(leafIndex uint32) (types.CommittedMessage, error) {
	ret := _m.Called(leafIndex)

	var r0 types.CommittedMessage
	if rf, ok := ret.Get(0).(func(uint32) types.CommittedMessage); ok {
		r0 = rf(leafIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CommittedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(leafIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MessageByNonce provides a mock function with given fields: destination, nonce
func (_m *MessageDB) MessageByNonce(destination uint32, nonce uint32) (types.CommittedMessage, error) {
	ret := _m.Called(destination, nonce)

	var r0 types.CommittedMessage
	if rf, ok := ret.Get(0).(func(uint32, uint32) types.CommittedMessage); ok {
		r0 = rf(destination, nonce)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.CommittedMessage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32, uint32) error); ok {
		r1 = rf(destination, nonce)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProofByLeafIndex provides a mock function with given fields: leafIndex
func (_m *MessageDB) ProofByLeafIndex(leafIndex uint32) (types.Proof, error) {
	ret := _m.Called(leafIndex)

	var r0 types.Proof
	if rf, ok := ret.Get(0).(func(uint32) types.Proof); ok {
		r0 = rf(leafIndex)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.Proof)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(leafIndex)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveLatestRoot provides a mock function with given fields:
func (_m *MessageDB) RetrieveLatestRoot() (common.Hash, error) {
	ret := _m.Called()

	var r0 common.Hash
	if rf, ok := ret.Get(0).(func() common.Hash); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Hash)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveProducedUpdate provides a mock function with given fields: root
func (_m *MessageDB) RetrieveProducedUpdate(root common.Hash) (types.SignedUpdate, error) {
	ret := _m.Called(root)

	var r0 types.SignedUpdate
	if rf, ok := ret.Get(0).(func(common.Hash) types.SignedUpdate); ok {
		r0 = rf(root)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.SignedUpdate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(common.Hash) error); ok {
		r1 = rf(root)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StoreCommittedMessage provides a mock function with given fields: committedMessage
func (_m *MessageDB) StoreCommittedMessage(committedMessage types.CommittedMessage) error {
	ret := _m.Called(committedMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CommittedMessage) error); ok {
		r0 = rf(committedMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreIndexedHeight provides a mock function with given fields: domain, height
func (_m *MessageDB) StoreIndexedHeight(domain string, height uint32) error {
	ret := _m.Called(domain, height)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint32) error); ok {
		r0 = rf(domain, height)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreLatestMessage provides a mock function with given fields: committedMessage
func (_m *MessageDB) StoreLatestMessage(committedMessage types.CommittedMessage) error {
	ret := _m.Called(committedMessage)

	var r0 error
	if rf, ok := ret.Get(0).(func(types.CommittedMessage) error); ok {
		r0 = rf(committedMessage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreLatestRoot provides a mock function with given fields: latestRoot
func (_m *MessageDB) StoreLatestRoot(latestRoot common.Hash) error {
	ret := _m.Called(latestRoot)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash) error); ok {
		r0 = rf(latestRoot)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreMessageLatestBlockEnd provides a mock function with given fields: blockNumber
func (_m *MessageDB) StoreMessageLatestBlockEnd(blockNumber uint32) error {
	ret := _m.Called(blockNumber)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32) error); ok {
		r0 = rf(blockNumber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreProducedUpdate provides a mock function with given fields: previousRoot, update
func (_m *MessageDB) StoreProducedUpdate(previousRoot common.Hash, update types.SignedUpdate) error {
	ret := _m.Called(previousRoot, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(common.Hash, types.SignedUpdate) error); ok {
		r0 = rf(previousRoot, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StoreProof provides a mock function with given fields: leafIndex, proof
func (_m *MessageDB) StoreProof(leafIndex uint32, proof types.Proof) error {
	ret := _m.Called(leafIndex, proof)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32, types.Proof) error); ok {
		r0 = rf(leafIndex, proof)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateLatestLeafIndex provides a mock function with given fields: leafIndex
func (_m *MessageDB) UpdateLatestLeafIndex(leafIndex uint32) error {
	ret := _m.Called(leafIndex)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint32) error); ok {
		r0 = rf(leafIndex)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
